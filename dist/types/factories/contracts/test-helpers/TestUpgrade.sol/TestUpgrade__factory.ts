/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestUpgrade,
  TestUpgradeInterface,
} from "../../../../contracts/test-helpers/TestUpgrade.sol/TestUpgrade";

const _abi = [
  {
    inputs: [],
    name: "setVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "versionNum",
    outputs: [
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d28061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80630e15932b14604157806354fd4d50146072578063caf96d4a146090575b600080fd5b6070600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000166002179055565b005b60005460030b5b60405160039190910b815260200160405180910390f35b60005460799060030b8156fea26469706673582212207dc407d782cb49afff0bc0ea59cb71bcff13a50c1f1d3f6c9ca81ed49e436d0f64736f6c63430008090033";

type TestUpgradeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUpgradeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUpgrade__factory extends ContractFactory {
  constructor(...args: TestUpgradeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUpgrade> {
    return super.deploy(overrides || {}) as Promise<TestUpgrade>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestUpgrade {
    return super.attach(address) as TestUpgrade;
  }
  override connect(signer: Signer): TestUpgrade__factory {
    return super.connect(signer) as TestUpgrade__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUpgradeInterface {
    return new utils.Interface(_abi) as TestUpgradeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUpgrade {
    return new Contract(address, _abi, signerOrProvider) as TestUpgrade;
  }
}
