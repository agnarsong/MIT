/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DataLayrDisclosureLogic,
  DataLayrDisclosureLogicInterface,
} from "../../../../contracts/libraries/eigenda/DataLayrDisclosureLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "header",
        type: "bytes",
      },
    ],
    name: "getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "c",
            type: "tuple",
          },
          {
            internalType: "uint48",
            name: "degree",
            type: "uint48",
          },
          {
            internalType: "uint32",
            name: "numSys",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "numPar",
            type: "uint32",
          },
        ],
        internalType: "struct DataLayrDisclosureLogic.DataStoreKZGMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "i",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numSys",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numPar",
        type: "uint32",
      },
    ],
    name: "getLeadingCosetIndexFromHighestRootOfUnity",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "degree",
        type: "uint256",
      },
    ],
    name: "getZeroPolyMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "poly",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    name: "linearPolynomialEvaluation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "nextPowerOf2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "header",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "chunkNumber",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "poly",
        type: "bytes",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "interpolationPoly",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "revealProof",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "X",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "Y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct BN254.G2Point",
            name: "zeroPoly",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "zeroPolyProof",
            type: "bytes",
          },
        ],
        internalType: "struct DataLayrDisclosureLogic.MultiRevealProof",
        name: "multiRevealProof",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "polyEquivalenceProof",
        type: "tuple",
      },
    ],
    name: "nonInteractivePolynomialProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "c",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "pi",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "s",
        type: "uint256",
      },
    ],
    name: "openPolynomialAtPoint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "value",
        type: "uint32",
      },
    ],
    name: "reverseBits",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "length",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "value",
        type: "uint32",
      },
    ],
    name: "reverseBitsLimited",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "c",
            type: "tuple",
          },
          {
            internalType: "uint48",
            name: "degree",
            type: "uint48",
          },
          {
            internalType: "uint32",
            name: "numSys",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "numPar",
            type: "uint32",
          },
        ],
        internalType: "struct DataLayrDisclosureLogic.DataStoreKZGMetadata",
        name: "dskzgMetadata",
        type: "tuple",
      },
      {
        internalType: "uint32",
        name: "chunkNumber",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "interpolationPoly",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "revealProof",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "zeroPoly",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "zeroPolyProof",
        type: "bytes",
      },
    ],
    name: "validateDisclosureResponse",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "polys",
        type: "bytes[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point[]",
        name: "interpolationPolys",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "polyEquivalenceProof",
        type: "tuple",
      },
    ],
    name: "verifyBatchPolyEquivalenceProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "poly",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "interpolationPoly",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "polyEquivalenceProof",
        type: "tuple",
      },
    ],
    name: "verifyPolyEquivalenceProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61258a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100de5760003560e01c80635729f2ce1161008b578063bd73d38511610065578063bd73d38514610290578063c9f698e7146102a3578063ddeacaf6146102b657600080fd5b80635729f2ce1461025757806399ae87ee1461026a578063b39028271461027d57600080fd5b80632a797870116100bc5780632a797870146101445780632b2c99df14610221578063413a94ee1461024457600080fd5b80630e425d17146100e357806329cc94b8146101095780632a6fa69314610131575b600080fd5b6100f66100f1366004611a80565b6102c9565b6040519081526020015b60405180910390f35b61011c610117366004611aad565b6102f6565b60405163ffffffff9091168152602001610100565b6100f661013f366004611a80565b610337565b6101d5610152366004611b29565b6040805160c08101825260006080820181815260a0830182905282526020820181905291810182905260608101919091525050604080518082018252823581526020838101358183015282516080810184529182528383013560e090811c918301919091526044840135811c92820192909252604890920135901c606082015290565b604080518251805182526020908101518183015283015165ffffffffffff16818301529082015163ffffffff90811660608084019190915290920151909116608082015260a001610100565b61023461022f366004611b95565b610656565b6040519015158152602001610100565b610234610252366004611c41565b61070d565b610234610265366004611d9c565b610a63565b6100f6610278366004611de1565b610be3565b61011c61028b366004611e2d565b610c8b565b61023461029e366004611e48565b610cd9565b61011c6102b1366004611f08565b610f66565b6102346102c4366004611ffb565b6110e7565b600060015b82816001901b10156102ec57806102e481612123565b9150506102ce565b6001901b92915050565b6000806103088463ffffffff16611309565b61031390602061213e565b90508063ffffffff1661032584610c8b565b63ffffffff16901c9150505b92915050565b60008061034383611309565b90508061037257507fe82cea94884b1b895ea0742840a3b19249a723810fd1b04d8564d675b0a416f192915050565b80600114156103a357507f4843774a80fc8385b31024f5bd18b42e62de439206ab9468d42d826796d41f6792915050565b80600214156103d457507f092d3e5f87f5293e7ab0cc2ca6b0b5e4adb5e0011656544915f7cea34e69e5ab92915050565b806003141561040557507f494b208540ec8624fbbb3f2c64ffccdaf6253f8f4e50c0d93922d88195b0775592915050565b806004141561043657507ffdb44b84a82893cfa0e37a97f09ffc4298ad5e62be1bea1d03320ae836213d2292915050565b806005141561046757507f3f50cb08231d2a76853ba9dbb20dad45a1b75c57cdaff6223bfe069752cff3d492915050565b806006141561049857507fbb39eebd8138eefd5802a49d571e65b3e0d4e32277c28fbf5fbca66e7fb0431092915050565b80600714156104c957507ff0a39b513e11fa80cbecbf352f69310eddd5cd03148768e0e9542bd600b133ec92915050565b80600814156104fa57507f038cca2238865414efb752cc004fffec9e6069b709f495249cdf36efbd5952f692915050565b806009141561052b57507f2a26b054ed559dd255d8ac9060ebf6b95b768d87de767f8174ad2f9a4e48dd0192915050565b80600a141561055c57507f1fe180d0bc4ff7c69fefa595b3b5f3c284535a280f6fdcf69b20770d1e20e1fc92915050565b80600b141561058d57507f60e34ad57c61cd6fdd8177437c30e4a30334e63d7683989570cf27020efc820192915050565b80600c14156105be57507feda2417e770ddbe88f083acf06b6794dfb76301314a32bd0697440d76f6cd9cc92915050565b80600d14156105ef57507f8cbe9b8cf92ce70e3bec8e1e72a0f85569017a7e43c3db50e4a5badb8dea7ce892915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c6f67206e6f7420696e2076616c69642072616e67650000000000000000000060448201526064015b60405180910390fd5b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868660405161068a929190612163565b6040805191829003822060208084019190915287359183019190915286013560608201526080016040516020818303038152906040528051906020012060001c6106d491906121a2565b905060006106e3878784610be3565b905060006107016106f9368890038801886121b6565b868585610a63565b98975050505050505050565b6000808567ffffffffffffffff81111561072957610729611cf1565b604051908082528060200260200182016040528015610752578160200160208202803683370190505b50905060005b8681101561083a57878782818110610772576107726121d2565b90506020028101906107849190612201565b604051610792929190612163565b60405180910390208686838181106107ac576107ac6121d2565b905060400201600001358787848181106107c8576107c86121d2565b905060400201602001356040516020016107f5939291909283526020830191909152604082015260600190565b6040516020818303038152906040528051906020012082828151811061081d5761081d6121d2565b60209081029190910101528061083281612123565b915050610758565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260405160200161086f9190612299565b6040516020818303038152906040528051906020012060001c61089291906121a2565b905061089c6119e9565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360006040516020016108d19291906122a5565b6040516020818303038152906040528051906020012060001c6108f491906121a2565b808252602082015260008787828161090e5761090e6121d2565b90506040020180360381019061092491906121b6565b905060006109568b8b600081811061093e5761093e6121d2565b90506020028101906109509190612201565b86610be3565b905060015b88811015610a47576109a18361099c8c8c8581811061097c5761097c6121d2565b90506040020180360381019061099291906121b6565b6020880151611393565b611443565b925060006109d28d8d848181106109ba576109ba6121d2565b90506020028101906109cc9190612201565b88610be3565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180828760016020020151098408602086015186519194507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001910960208601525080610a3f81612123565b91505061095b565b50610a5482888684610a63565b9b9a5050505050505050505050565b60408051808201909152600181526002602082015260009081610a8e610a88836114f9565b86611393565b604080518082019091527f220ac48bb1f91fd93f502a3d0caa077ac70e0af8819b9d8fa26a168a2c558a5781527f08f54b82af08ceaf7cd5f180bac94870f6d8100a9c9afa9dd09a4491653891126020820152909150610aee8183611443565b91506000610b04610afe856114f9565b87611393565b90506000610b128a83611443565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d602083810191909152810191909152909150610a5485610bdc368d90038d018d6122be565b84846115b8565b600080836001825b82811015610c7d576000888289610c038260206122da565b92610c10939291906122f2565b610c199161231c565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180848309860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018784099250610c756020836122da565b915050610beb565b5091925050505b9392505050565b600080805b6020811015610cd2576001811b84811663ffffffff1615610cbf57610cb682601f61233a565b6001901b831792505b5080610cca81612123565b915050610c90565b5092915050565b6040805160c0810182526000608080830182815260a08401839052835260208084018390528385018390526060938401839052845180860186528c358152818d013581830152855192830186528252848c013560e090811c9183019190915260448c0135811c9482019490945260488b013590931c9183019190915290610d8081888660408101610d72368390038301608084016122be565b6102c46101008b018b612201565b610e0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f52657665616c206661696c65642064756520746f206e6f6e203120706169726960448201527f6e67000000000000000000000000000000000000000000000000000000000000606482015260840161064d565b60208101518590610e1e906001612351565b610e2990602061237b565b65ffffffffffff1614610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f506f6c796e6f6d69616c206d757374206861766520612032353620626974206360448201527f6f656666696369656e7420666f722065616368207465726d0000000000000000606482015260840161064d565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018787604051610ef1929190612163565b6040805191829003822060208084019190915288359183019190915287013560608201526080016040516020818303038152906040528051906020012060001c610f3b91906121a2565b90506000610f4a888884610be3565b9050610a54610f5e368890038801886121b6565b868484610a63565b600080610f7383856123a9565b90506000610f868563ffffffff166102c9565b90506000610f9486846123c8565b63ffffffff1615610fa6576001610fa9565b60005b60ff16610fb687856123eb565b610fc091906123a9565b90506000610fdc610fd1838561240e565b63ffffffff166102c9565b90508663ffffffff168863ffffffff16101561101e5780610ffd828a6102f6565b6110099061010061240e565b61101391906123eb565b945050505050610c84565b611028878461213e565b611032908261213e565b63ffffffff168863ffffffff16101561105f5780610ffd81856110558b8d61213e565b61011791906123a9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f43616e6e6f7420637265617465206e756d626572206f66206672616d6520686960448201527f67686572207468616e20706f737369626c650000000000000000000000000000606482015260840161064d565b8251602080820151915181860151808301519051604080519485019590955293830191909152606082015260808101919091526000906111a49060a0016040516020818303038152906040528051906020012061114d898b604001518c60600151610f66565b63ffffffff166111688b6020015165ffffffffffff16610337565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061183f92505050565b61120a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f496e636f7272656374207a65726f20706f6c79206d65726b6c652070726f6f66604482015260640161064d565b875160009061122a9061099c611225368b90038b018b6121b6565b6114f9565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6020838101919091528101919091529091506112fb6112f3368990038901896121b6565b8784846115b8565b9a9950505050505050505050565b6000808211611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4c6f67206d75737420626520646566696e656400000000000000000000000000604482015260640161064d565b60005b600183821c14610331578061138b81612123565b915050611377565b60408051808201909152600080825260208201526113af611a07565b83518152602080850151908201526040808201849052600090836060846007600019fa90508061143b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f626e3235342d6d756c2d6661696c656400000000000000000000000000000000604482015260640161064d565b505092915050565b604080518082019091526000808252602082015261145f611a25565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508061143b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f626e3235342d6164642d6661696c656400000000000000000000000000000000604482015260640161064d565b6040805180820190915260008082526020820152815115801561151e57506020820151155b1561153c575050604080518082019091526000808252602082015290565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015161158191906121a2565b6115ab907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761233a565b905292915050565b919050565b6040805180820182528581526020808201859052825180840190935285835282018390526000916115e7611a43565b60005b60028110156117ac576000611600826006612431565b9050848260028110611614576116146121d2565b602002015151836116268360006122da565b600c8110611636576116366121d2565b602002015284826002811061164d5761164d6121d2565b6020020151602001518382600161166491906122da565b600c8110611674576116746121d2565b602002015283826002811061168b5761168b6121d2565b602002015151518361169e8360026122da565b600c81106116ae576116ae6121d2565b60200201528382600281106116c5576116c56121d2565b60200201515160016020020151836116de8360036122da565b600c81106116ee576116ee6121d2565b6020020152838260028110611705576117056121d2565b602002015160200151600060028110611720576117206121d2565b6020020151836117318360046122da565b600c8110611741576117416121d2565b6020020152838260028110611758576117586121d2565b602002015160200151600160028110611773576117736121d2565b6020020151836117848360056122da565b600c8110611794576117946121d2565b602002015250806117a481612123565b9150506115ea565b506117b5611a62565b60006020826101808560086107d05a03fa90508061182f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f626e3235342d70616972696e672d6661696c6564000000000000000000000000604482015260640161064d565b5051151598975050505050505050565b60006020825161184f91906121a2565b156118b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c69642070726f6f66206c656e677468000000000000000000000000604482015260640161064d565b6000602083516118c69190612450565b90506118d3816002612548565b851061193b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4c65616620696e64657820697320746f6f206269670000000000000000000000604482015260640161064d565b60008660205b855181116119db5785810151925061195a6002896121a2565b61198f5760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506119bc565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6119c7600289612450565b97506119d46020826122da565b9050611941565b509094149695505050505050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600060208284031215611a9257600080fd5b5035919050565b803563ffffffff811681146115b357600080fd5b60008060408385031215611ac057600080fd5b611ac983611a99565b9150611ad760208401611a99565b90509250929050565b60008083601f840112611af257600080fd5b50813567ffffffffffffffff811115611b0a57600080fd5b602083019150836020828501011115611b2257600080fd5b9250929050565b60008060208385031215611b3c57600080fd5b823567ffffffffffffffff811115611b5357600080fd5b611b5f85828601611ae0565b90969095509350505050565b600060408284031215611b7d57600080fd5b50919050565b600060808284031215611b7d57600080fd5b60008060008060e08587031215611bab57600080fd5b843567ffffffffffffffff811115611bc257600080fd5b611bce87828801611ae0565b9095509350611be290508660208701611b6b565b9150611bf18660608701611b83565b905092959194509250565b60008083601f840112611c0e57600080fd5b50813567ffffffffffffffff811115611c2657600080fd5b6020830191508360208260061b8501011115611b2257600080fd5b600080600080600060c08688031215611c5957600080fd5b853567ffffffffffffffff80821115611c7157600080fd5b818801915088601f830112611c8557600080fd5b813581811115611c9457600080fd5b8960208260051b8501011115611ca957600080fd5b602092830197509550908701359080821115611cc457600080fd5b50611cd188828901611bfc565b9094509250611ce590508760408801611b83565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d4357611d43611cf1565b60405290565b6040516080810167ffffffffffffffff81118282101715611d4357611d43611cf1565b600060408284031215611d7e57600080fd5b611d86611d20565b9050813581526020820135602082015292915050565b6000806000806101008587031215611db357600080fd5b611dbd8686611d6c565b9350611dcc8660408701611b83565b939693955050505060c08201359160e0013590565b600080600060408486031215611df657600080fd5b833567ffffffffffffffff811115611e0d57600080fd5b611e1986828701611ae0565b909790965060209590950135949350505050565b600060208284031215611e3f57600080fd5b610c8482611a99565b6000806000806000806000610100888a031215611e6457600080fd5b873567ffffffffffffffff80821115611e7c57600080fd5b611e888b838c01611ae0565b9099509750879150611e9c60208b01611a99565b965060408a0135915080821115611eb257600080fd5b611ebe8b838c01611ae0565b909650945060608a0135915080821115611ed757600080fd5b508801610120818b031215611eeb57600080fd5b9150611efa8960808a01611b83565b905092959891949750929550565b600080600060608486031215611f1d57600080fd5b611f2684611a99565b9250611f3460208501611a99565b9150611f4260408501611a99565b90509250925092565b600082601f830112611f5c57600080fd5b6040516040810181811067ffffffffffffffff82111715611f7f57611f7f611cf1565b8060405250806040840185811115611f9657600080fd5b845b81811015611fb0578035835260209283019201611f98565b509195945050505050565b600060808284031215611fcd57600080fd5b611fd5611d20565b9050611fe18383611f4b565b8152611ff08360408401611f4b565b602082015292915050565b60008060008060008060008789036101e081121561201857600080fd5b60a081121561202657600080fd5b5061202f611d49565b6120398a8a611d6c565b8152604089013565ffffffffffff8116811461205457600080fd5b602082015261206560608a01611a99565b604082015261207660808a01611a99565b6060820152965061208960a08901611a99565b95506120988960c08a01611b6b565b94506120a8896101008a01611b6b565b93506120b8896101408a01611fbb565b92506101c088013567ffffffffffffffff8111156120d557600080fd5b6120e18a828b01611ae0565b989b979a50959850939692959293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415612137576121376120f4565b5060010190565b600063ffffffff8381169083168181101561215b5761215b6120f4565b039392505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826121b1576121b1612173565b500690565b6000604082840312156121c857600080fd5b610c848383611d6c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261223657600080fd5b83018035915067ffffffffffffffff82111561225157600080fd5b602001915036819003821315611b2257600080fd5b60008151602080840160005b8381101561228e57815187529582019590820190600101612272565b509495945050505050565b6000610c848284612266565b60006122b18285612266565b9283525050602001919050565b6000608082840312156122d057600080fd5b610c848383611fbb565b600082198211156122ed576122ed6120f4565b500190565b6000808585111561230257600080fd5b8386111561230f57600080fd5b5050820193919092039150565b8035602083101561033157600019602084900360031b1b1692915050565b60008282101561234c5761234c6120f4565b500390565b600065ffffffffffff808316818516808303821115612372576123726120f4565b01949350505050565b600065ffffffffffff808316818516818304811182151516156123a0576123a06120f4565b02949350505050565b600063ffffffff808316818516808303821115612372576123726120f4565b600063ffffffff808416806123df576123df612173565b92169190910692915050565b600063ffffffff8084168061240257612402612173565b92169190910492915050565b600063ffffffff808316818516818304811182151516156123a0576123a06120f4565b600081600019048311821515161561244b5761244b6120f4565b500290565b60008261245f5761245f612173565b500490565b600181815b8085111561249f578160001904821115612485576124856120f4565b8085161561249257918102915b93841c9390800290612469565b509250929050565b6000826124b657506001610331565b816124c357506000610331565b81600181146124d957600281146124e3576124ff565b6001915050610331565b60ff8411156124f4576124f46120f4565b50506001821b610331565b5060208310610133831016604e8410600b8410161715612522575081810a610331565b61252c8383612464565b8060001904821115612540576125406120f4565b029392505050565b6000610c8483836124a756fea26469706673582212208aaa2b74a776833262f947d408ea600eaeff4f603b531dacb4b2c6cb75ee5c2264736f6c63430008090033";

type DataLayrDisclosureLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataLayrDisclosureLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataLayrDisclosureLogic__factory extends ContractFactory {
  constructor(...args: DataLayrDisclosureLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataLayrDisclosureLogic> {
    return super.deploy(overrides || {}) as Promise<DataLayrDisclosureLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DataLayrDisclosureLogic {
    return super.attach(address) as DataLayrDisclosureLogic;
  }
  override connect(signer: Signer): DataLayrDisclosureLogic__factory {
    return super.connect(signer) as DataLayrDisclosureLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataLayrDisclosureLogicInterface {
    return new utils.Interface(_abi) as DataLayrDisclosureLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataLayrDisclosureLogic {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DataLayrDisclosureLogic;
  }
}
