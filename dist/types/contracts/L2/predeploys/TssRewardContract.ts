/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TssRewardContractInterface extends utils.Interface {
  functions: {
    "bestBlockID()": FunctionFragment;
    "bvmGasPriceOracleAddress()": FunctionFragment;
    "claimReward(uint256,uint32,uint256,address[])": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "dust()": FunctionFragment;
    "lastBatchTime()": FunctionFragment;
    "ledger(uint256)": FunctionFragment;
    "messenger()": FunctionFragment;
    "owner()": FunctionFragment;
    "queryReward()": FunctionFragment;
    "querySendAmountPerSecond()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sccAddress()": FunctionFragment;
    "sendAmountPerYear()": FunctionFragment;
    "setSendAmountPerYear(uint256)": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateReward(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawDust()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bestBlockID"
      | "bvmGasPriceOracleAddress"
      | "claimReward"
      | "deadAddress"
      | "dust"
      | "lastBatchTime"
      | "ledger"
      | "messenger"
      | "owner"
      | "queryReward"
      | "querySendAmountPerSecond"
      | "renounceOwnership"
      | "sccAddress"
      | "sendAmountPerYear"
      | "setSendAmountPerYear"
      | "totalAmount"
      | "transferOwnership"
      | "updateReward"
      | "withdraw"
      | "withdrawDust"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bestBlockID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bvmGasPriceOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dust", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBatchTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "querySendAmountPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sccAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAmountPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSendAmountPerYear",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDust",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bestBlockID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bvmGasPriceOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBatchTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySendAmountPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sccAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendAmountPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendAmountPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDust",
    data: BytesLike
  ): Result;

  events: {
    "DistributeTssReward(uint256,uint256,uint256,address[])": EventFragment;
    "DistributeTssRewardByBlock(uint256,uint32,uint256,address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributeTssReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeTssRewardByBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DistributeTssRewardEventObject {
  lastBatchTime: BigNumber;
  batchTime: BigNumber;
  amount: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string[]],
  DistributeTssRewardEventObject
>;

export type DistributeTssRewardEventFilter =
  TypedEventFilter<DistributeTssRewardEvent>;

export interface DistributeTssRewardByBlockEventObject {
  blockStartHeight: BigNumber;
  length: number;
  amount: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardByBlockEvent = TypedEvent<
  [BigNumber, number, BigNumber, string[]],
  DistributeTssRewardByBlockEventObject
>;

export type DistributeTssRewardByBlockEventFilter =
  TypedEventFilter<DistributeTssRewardByBlockEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TssRewardContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TssRewardContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bestBlockID(overrides?: CallOverrides): Promise<[BigNumber]>;

    bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    dust(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastBatchTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    querySendAmountPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sccAddress(overrides?: CallOverrides): Promise<[string]>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawDust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bestBlockID(overrides?: CallOverrides): Promise<BigNumber>;

  bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<string>;

  claimReward(
    _blockStartHeight: PromiseOrValue<BigNumberish>,
    _length: PromiseOrValue<BigNumberish>,
    _batchTime: PromiseOrValue<BigNumberish>,
    _tssMembers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  dust(overrides?: CallOverrides): Promise<BigNumber>;

  lastBatchTime(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messenger(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryReward(overrides?: CallOverrides): Promise<BigNumber>;

  querySendAmountPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sccAddress(overrides?: CallOverrides): Promise<string>;

  sendAmountPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  setSendAmountPerYear(
    _sendAmountPerYear: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReward(
    _blockID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawDust(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bestBlockID(overrides?: CallOverrides): Promise<BigNumber>;

    bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<string>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    dust(overrides?: CallOverrides): Promise<BigNumber>;

    lastBatchTime(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    querySendAmountPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sccAddress(overrides?: CallOverrides): Promise<string>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawDust(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DistributeTssReward(uint256,uint256,uint256,address[])"(
      lastBatchTime?: null,
      batchTime?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;
    DistributeTssReward(
      lastBatchTime?: null,
      batchTime?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;

    "DistributeTssRewardByBlock(uint256,uint32,uint256,address[])"(
      blockStartHeight?: null,
      length?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardByBlockEventFilter;
    DistributeTssRewardByBlock(
      blockStartHeight?: null,
      length?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardByBlockEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bestBlockID(overrides?: CallOverrides): Promise<BigNumber>;

    bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dust(overrides?: CallOverrides): Promise<BigNumber>;

    lastBatchTime(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    querySendAmountPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sccAddress(overrides?: CallOverrides): Promise<BigNumber>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawDust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bestBlockID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bvmGasPriceOracleAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dust(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBatchTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    querySendAmountPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sccAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
