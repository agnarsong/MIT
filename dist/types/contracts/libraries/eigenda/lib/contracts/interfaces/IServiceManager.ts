/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IServiceManagerInterface extends utils.Interface {
  functions: {
    "collateralToken()": FunctionFragment;
    "eigenLayrDelegation()": FunctionFragment;
    "freezeOperator(address)": FunctionFragment;
    "latestTime()": FunctionFragment;
    "revokeSlashingAbility(address,uint32)": FunctionFragment;
    "stakeWithdrawalVerification(bytes,uint256,uint256)": FunctionFragment;
    "taskNumber()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collateralToken"
      | "eigenLayrDelegation"
      | "freezeOperator"
      | "latestTime"
      | "revokeSlashingAbility"
      | "stakeWithdrawalVerification"
      | "taskNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eigenLayrDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSlashingAbility",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithdrawalVerification",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskNumber",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eigenLayrDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeSlashingAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithdrawalVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskNumber", data: BytesLike): Result;

  events: {};
}

export interface IServiceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IServiceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    eigenLayrDelegation(overrides?: CallOverrides): Promise<[string]>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestTime(overrides?: CallOverrides): Promise<[number]>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeWithdrawalVerification(
      data: PromiseOrValue<BytesLike>,
      initTimestamp: PromiseOrValue<BigNumberish>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    taskNumber(overrides?: CallOverrides): Promise<[number]>;
  };

  collateralToken(overrides?: CallOverrides): Promise<string>;

  eigenLayrDelegation(overrides?: CallOverrides): Promise<string>;

  freezeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestTime(overrides?: CallOverrides): Promise<number>;

  revokeSlashingAbility(
    operator: PromiseOrValue<string>,
    unbondedAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeWithdrawalVerification(
    data: PromiseOrValue<BytesLike>,
    initTimestamp: PromiseOrValue<BigNumberish>,
    unlockTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  taskNumber(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    collateralToken(overrides?: CallOverrides): Promise<string>;

    eigenLayrDelegation(overrides?: CallOverrides): Promise<string>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestTime(overrides?: CallOverrides): Promise<number>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithdrawalVerification(
      data: PromiseOrValue<BytesLike>,
      initTimestamp: PromiseOrValue<BigNumberish>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    taskNumber(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    eigenLayrDelegation(overrides?: CallOverrides): Promise<BigNumber>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestTime(overrides?: CallOverrides): Promise<BigNumber>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeWithdrawalVerification(
      data: PromiseOrValue<BytesLike>,
      initTimestamp: PromiseOrValue<BigNumberish>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskNumber(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eigenLayrDelegation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithdrawalVerification(
      data: PromiseOrValue<BytesLike>,
      initTimestamp: PromiseOrValue<BigNumberish>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
