/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Sequencer {
  export type SequencerInfoStruct = {
    owner: PromiseOrValue<string>;
    mintAddress: PromiseOrValue<string>;
    nodeID: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    keyIndex: PromiseOrValue<BigNumberish>;
  };

  export type SequencerInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    mintAddress: string;
    nodeID: string;
    amount: BigNumber;
    keyIndex: BigNumber;
  };
}

export interface SequencerInterface extends utils.Interface {
  functions: {
    "bitToken()": FunctionFragment;
    "createSequencer(uint256,address,bytes)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "epoch()": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getSequencer(address)": FunctionFragment;
    "getSequencers()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isSequencer(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "rel(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "scheduler()": FunctionFragment;
    "sequencerLimit()": FunctionFragment;
    "sequencers(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBitAddress(address)": FunctionFragment;
    "updateEpoch(uint256)": FunctionFragment;
    "updateScheduler(address)": FunctionFragment;
    "updateSequencerLimit(uint8)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bitToken"
      | "createSequencer"
      | "deposit"
      | "epoch"
      | "getOwners"
      | "getSequencer"
      | "getSequencers"
      | "initialize"
      | "isSequencer"
      | "owner"
      | "owners"
      | "rel"
      | "renounceOwnership"
      | "scheduler"
      | "sequencerLimit"
      | "sequencers"
      | "transferOwnership"
      | "updateBitAddress"
      | "updateEpoch"
      | "updateScheduler"
      | "updateSequencerLimit"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bitToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createSequencer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSequencer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSequencers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSequencer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scheduler", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sequencerLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequencers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBitAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScheduler",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSequencerLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bitToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scheduler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequencerLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sequencers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScheduler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSequencerLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SequencerCreate(address,address,bytes)": EventFragment;
    "SequencerDelete(address,bytes)": EventFragment;
    "SequencerUpdate(address,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerDelete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerUpdate"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SequencerCreateEventObject {
  arg0: string;
  arg1: string;
  arg2: string;
}
export type SequencerCreateEvent = TypedEvent<
  [string, string, string],
  SequencerCreateEventObject
>;

export type SequencerCreateEventFilter = TypedEventFilter<SequencerCreateEvent>;

export interface SequencerDeleteEventObject {
  arg0: string;
  arg1: string;
}
export type SequencerDeleteEvent = TypedEvent<
  [string, string],
  SequencerDeleteEventObject
>;

export type SequencerDeleteEventFilter = TypedEventFilter<SequencerDeleteEvent>;

export interface SequencerUpdateEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type SequencerUpdateEvent = TypedEvent<
  [string, string, BigNumber],
  SequencerUpdateEventObject
>;

export type SequencerUpdateEventFilter = TypedEventFilter<SequencerUpdateEvent>;

export interface Sequencer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SequencerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bitToken(overrides?: CallOverrides): Promise<[string]>;

    createSequencer(
      _amount: PromiseOrValue<BigNumberish>,
      _mintAddress: PromiseOrValue<string>,
      _nodeID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Sequencer.SequencerInfoStructOutput]>;

    getSequencers(
      overrides?: CallOverrides
    ): Promise<[Sequencer.SequencerInfoStructOutput[]]>;

    initialize(
      _bitToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rel(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scheduler(overrides?: CallOverrides): Promise<[string]>;

    sequencerLimit(overrides?: CallOverrides): Promise<[number]>;

    sequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        owner: string;
        mintAddress: string;
        nodeID: string;
        amount: BigNumber;
        keyIndex: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBitAddress(
      _bitToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateScheduler(
      _scheduler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSequencerLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bitToken(overrides?: CallOverrides): Promise<string>;

  createSequencer(
    _amount: PromiseOrValue<BigNumberish>,
    _mintAddress: PromiseOrValue<string>,
    _nodeID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getSequencer(
    signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Sequencer.SequencerInfoStructOutput>;

  getSequencers(
    overrides?: CallOverrides
  ): Promise<Sequencer.SequencerInfoStructOutput[]>;

  initialize(
    _bitToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isSequencer(
    signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  owners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rel(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scheduler(overrides?: CallOverrides): Promise<string>;

  sequencerLimit(overrides?: CallOverrides): Promise<number>;

  sequencers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      owner: string;
      mintAddress: string;
      nodeID: string;
      amount: BigNumber;
      keyIndex: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBitAddress(
    _bitToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEpoch(
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateScheduler(
    _scheduler: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSequencerLimit(
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bitToken(overrides?: CallOverrides): Promise<string>;

    createSequencer(
      _amount: PromiseOrValue<BigNumberish>,
      _mintAddress: PromiseOrValue<string>,
      _nodeID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Sequencer.SequencerInfoStructOutput>;

    getSequencers(
      overrides?: CallOverrides
    ): Promise<Sequencer.SequencerInfoStructOutput[]>;

    initialize(
      _bitToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rel(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    scheduler(overrides?: CallOverrides): Promise<string>;

    sequencerLimit(overrides?: CallOverrides): Promise<number>;

    sequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        owner: string;
        mintAddress: string;
        nodeID: string;
        amount: BigNumber;
        keyIndex: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBitAddress(
      _bitToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateScheduler(
      _scheduler: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSequencerLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SequencerCreate(address,address,bytes)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): SequencerCreateEventFilter;
    SequencerCreate(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): SequencerCreateEventFilter;

    "SequencerDelete(address,bytes)"(
      arg0?: null,
      arg1?: null
    ): SequencerDeleteEventFilter;
    SequencerDelete(arg0?: null, arg1?: null): SequencerDeleteEventFilter;

    "SequencerUpdate(address,bytes,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): SequencerUpdateEventFilter;
    SequencerUpdate(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): SequencerUpdateEventFilter;
  };

  estimateGas: {
    bitToken(overrides?: CallOverrides): Promise<BigNumber>;

    createSequencer(
      _amount: PromiseOrValue<BigNumberish>,
      _mintAddress: PromiseOrValue<string>,
      _nodeID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSequencers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bitToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rel(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scheduler(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBitAddress(
      _bitToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateScheduler(
      _scheduler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSequencerLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bitToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSequencer(
      _amount: PromiseOrValue<BigNumberish>,
      _mintAddress: PromiseOrValue<string>,
      _nodeID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSequencers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _bitToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isSequencer(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rel(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scheduler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBitAddress(
      _bitToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateScheduler(
      _scheduler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSequencerLimit(
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
