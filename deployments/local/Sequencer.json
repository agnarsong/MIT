{
  "address": "0x82e130FF187E787D5DdDFAa4f36CB59e6B1Da6dd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "SequencerCreate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "SequencerDelete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SequencerUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bitToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_mintAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_nodeID",
          "type": "bytes"
        }
      ],
      "name": "createSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "getSequencer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mintAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "nodeID",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keyIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct Sequencer.SequencerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSequencers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mintAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "nodeID",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keyIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct Sequencer.SequencerInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bitToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "isSequencer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scheduler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerLimit",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sequencers",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "nodeID",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keyIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bitToken",
          "type": "address"
        }
      ],
      "name": "updateBitAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "updateEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_scheduler",
          "type": "address"
        }
      ],
      "name": "updateScheduler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_limit",
          "type": "uint8"
        }
      ],
      "name": "updateSequencerLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9f7febf299f9e7d6d762f2177fe1bd5723bdfdd8b351b911ed360fe88dec377",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0x82e130FF187E787D5DdDFAa4f36CB59e6B1Da6dd",
    "transactionIndex": 0,
    "gasUsed": "1960729",
    "logsBloom": "0x
    "blockHash": "0xb409618fa3f84909ea1b716ca327f041b7785e93e5430f51e660069c6c72a4bf",
    "transactionHash": "0xd9f7febf299f9e7d6d762f2177fe1bd5723bdfdd8b351b911ed360fe88dec377",
    "logs": [],
    "blockNumber": 14,
    "cumulativeGasUsed": "1960729",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cf6a1c489857cab7b86178a7327b973",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"SequencerCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"SequencerDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SequencerUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_nodeID\",\"type\":\"bytes\"}],\"name\":\"createSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"getSequencer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct Sequencer.SequencerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSequencers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct Sequencer.SequencerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bitToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sequencers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bitToken\",\"type\":\"address\"}],\"name\":\"updateBitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduler\",\"type\":\"address\"}],\"name\":\"updateScheduler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_limit\",\"type\":\"uint8\"}],\"name\":\"updateSequencerLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSequencer(uint256,address,bytes)\":{\"params\":{\"_amount\":\"amount of bit token, will transfer to this contract when sequencer create\",\"_mintAddress\":\"sequencer mint address\",\"_nodeID\":\"sequencer node ID\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"amount of bit token\"}},\"getOwners()\":{\"returns\":{\"_0\":\"owners all owners\"}},\"getSequencer(address)\":{\"params\":{\"signer\":\"signer address, the key to find sequencer\"},\"returns\":{\"_0\":\"seq sequencer info\"}},\"getSequencers()\":{\"returns\":{\"_0\":\"seqs all sequencers\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBitAddress(address)\":{\"params\":{\"_bitToken\":\"new ERC20 address of bit token\"}},\"updateEpoch(uint256)\":{\"params\":{\"_epoch\":\"new epoch\"}},\"updateScheduler(address)\":{\"params\":{\"_scheduler\":\"new scheculer`s address\"}},\"updateSequencerLimit(uint8)\":{\"params\":{\"_limit\":\"new limit\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"amount of bit token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSequencer(uint256,address,bytes)\":{\"notice\":\"Create a new sequencer info and init amount\"},\"deposit(uint256)\":{\"notice\":\"Check sequencer exist then add deposit amount\"},\"getOwners()\":{\"notice\":\"Return owners\"},\"getSequencer(address)\":{\"notice\":\"Return sequencer info by signer address\"},\"getSequencers()\":{\"notice\":\"Return all sequencer infos\"},\"isSequencer(address)\":{\"notice\":\"Return if signer exist\"},\"updateBitAddress(address)\":{\"notice\":\"Update bit token address\"},\"updateEpoch(uint256)\":{\"notice\":\"Update Epoch\"},\"updateScheduler(address)\":{\"notice\":\"Update Epoch\"},\"updateSequencerLimit(uint8)\":{\"notice\":\"Update Epoch\"},\"withdraw(uint256)\":{\"notice\":\"amount > deposit(signer).amount -> withdraw all 0 < amount < deposit(signer).amount -> withdraw amount to signer when deposit(signer).amount = 0, delete the sequencer\"},\"withdrawAll()\":{\"notice\":\"Check sequencer exist then withdraw all. This action will delete sequencer after withdraw\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/sequencer/Sequencer.sol\":\"Sequencer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/L1/sequencer/Sequencer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract Sequencer is ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n    struct SequencerInfo {\\n        address owner;\\n        address mintAddress;\\n        bytes nodeID;\\n        uint256 amount;\\n        uint256 keyIndex;\\n    }\\n\\n    // Maps sequencers, set by signer address(signer -> sequencer)\\n    mapping(address => SequencerInfo) public sequencers;\\n\\n    // Maps mint address to signer\\n    // to check and avoid mintAddress being bound by multiple singers\\n    // (Mint address -> signer)\\n    mapping(address => address) public rel;\\n\\n    // Store the address of the signer\\n    address[] public owners;\\n    // Store bit token address\\n    address public bitToken;\\n    // Store the Epoch\\n    uint256 public epoch;\\n    // Store limit of sequencer\\n    uint8 public sequencerLimit;\\n    // Store scheduler\\n    address public scheduler;\\n\\n    // SequencerCreate(signer, mintAddress, nodeID)\\n    event SequencerCreate(address, address, bytes);\\n    // SequencerUpdate(mintAddress, nodeID, amount)\\n    event SequencerUpdate(address, bytes, uint256);\\n    // SequencerDelete(mintAddress, nodeID)\\n    event SequencerDelete(address, bytes);\\n\\n    function initialize(address _bitToken) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        bitToken = _bitToken;\\n        epoch = 0;\\n        sequencerLimit = 0;\\n    }\\n\\n    /**\\n     * Update Epoch\\n     * @param _scheduler new scheculer`s address\\n     */\\n    function updateScheduler(address _scheduler) public onlyOwner {\\n        scheduler = _scheduler;\\n    }\\n\\n    /**\\n     * Update Epoch\\n     * @param _limit new limit\\n     */\\n    function updateSequencerLimit(uint8 _limit) public onlyOwner {\\n        sequencerLimit = _limit;\\n    }\\n\\n    /**\\n     * Update Epoch\\n     * @param _epoch new epoch\\n     */\\n    function updateEpoch(uint256 _epoch) public onlyOwner {\\n        epoch = _epoch;\\n    }\\n\\n    /**\\n     * Update bit token address\\n     * @param _bitToken new ERC20 address of bit token\\n     */\\n    function updateBitAddress(address _bitToken) public onlyOwner {\\n        bitToken = _bitToken;\\n    }\\n\\n    /**\\n     * Create a new sequencer info and init amount\\n     * @param _amount amount of bit token, will transfer to this contract when sequencer create\\n     * @param _mintAddress sequencer mint address\\n     * @param _nodeID sequencer node ID\\n     */\\n    function createSequencer(\\n        uint256 _amount,\\n        address _mintAddress,\\n        bytes calldata _nodeID\\n    ) external nonReentrant {\\n        // check params todo: check nodeID\\n        require(_amount > 0, \\\"Invild amount\\\");\\n        require(_mintAddress != address(0), \\\"Invild address, address can not be 0\\\");\\n        // check already have sequencer\\n        require(sequencers[msg.sender].mintAddress == address(0), \\\"Already has been created\\\");\\n        require(rel[_mintAddress] == address(0), \\\"This mint address already has owner\\\");\\n        IERC20(bitToken).transferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 index = owners.length;\\n        sequencers[msg.sender] = SequencerInfo({\\n            owner: msg.sender,\\n            mintAddress: _mintAddress,\\n            nodeID: _nodeID,\\n            amount: _amount,\\n            keyIndex: index\\n        });\\n        owners.push(msg.sender);\\n        rel[_mintAddress] = msg.sender;\\n        emit SequencerCreate(msg.sender, _mintAddress, _nodeID);\\n    }\\n\\n    /**\\n     * Check sequencer exist then add deposit amount\\n     * @param _amount amount of bit token\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        // check params\\n        require(_amount > 0, \\\"Invild amount\\\");\\n        // check already have sequencer\\n        require(sequencers[msg.sender].mintAddress != address(0), \\\"Sequencer not exist\\\");\\n\\n        // transfer\\n        IERC20(bitToken).transferFrom(msg.sender, address(this), _amount);\\n        sequencers[msg.sender].amount += _amount;\\n        emit SequencerUpdate(\\n            sequencers[msg.sender].mintAddress,\\n            sequencers[msg.sender].nodeID,\\n            sequencers[msg.sender].amount\\n        );\\n    }\\n\\n    /**\\n     * amount > deposit(signer).amount -> withdraw all\\n     * 0 < amount < deposit(signer).amount -> withdraw amount to signer\\n     * when deposit(signer).amount = 0, delete the sequencer\\n     * @param _amount amount of bit token\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        // check params\\n        require(_amount > 0, \\\"Invild amount\\\");\\n        // check already have sequencer\\n        require(sequencers[msg.sender].mintAddress != address(0), \\\"Sequencer not exist\\\");\\n\\n        uint256 withdrawAmount = _amount;\\n        if (_amount > sequencers[msg.sender].amount) {\\n            // when _amount > sequencers.amount, withdraw all tokens\\n            withdrawAmount = sequencers[msg.sender].amount;\\n        }\\n\\n        // transfer\\n        IERC20(bitToken).transfer(msg.sender, withdrawAmount);\\n\\n        sequencers[msg.sender].amount -= withdrawAmount;\\n        emit SequencerUpdate(\\n            sequencers[msg.sender].mintAddress,\\n            sequencers[msg.sender].nodeID,\\n            sequencers[msg.sender].amount\\n        );\\n\\n        if (sequencers[msg.sender].amount == 0) {\\n            deleteSequencer(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * Check sequencer exist then withdraw all.\\n     * This action will delete sequencer after withdraw\\n     */\\n    function withdrawAll() external nonReentrant {\\n        // check already have sequencer\\n        require(sequencers[msg.sender].mintAddress != address(0), \\\"Do not have create\\\");\\n\\n        uint256 withdrawAmount = sequencers[msg.sender].amount;\\n\\n        // transfer\\n        IERC20(bitToken).transfer(msg.sender, withdrawAmount);\\n\\n        emit SequencerUpdate(sequencers[msg.sender].mintAddress, sequencers[msg.sender].nodeID, 0);\\n        deleteSequencer(msg.sender);\\n    }\\n\\n    /**\\n     * Return all sequencer infos\\n     * @return seqs all sequencers\\n     */\\n    function getSequencers() external view returns (SequencerInfo[] memory) {\\n        SequencerInfo[] memory seqs = new SequencerInfo[](owners.length);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            address key = owners[i];\\n            seqs[i] = sequencers[key];\\n        }\\n        return seqs;\\n    }\\n\\n    /**\\n     * Return sequencer info by signer address\\n     * @param signer signer address, the key to find sequencer\\n     # @return seq sequencer info\\n     */\\n    function getSequencer(address signer) public view returns (SequencerInfo memory) {\\n        return sequencers[signer];\\n    }\\n\\n    /**\\n     * Return owners\\n     # @return owners all owners\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    /**\\n     * Return if signer exist\\n     */\\n    function isSequencer(address signer) public view returns (bool) {\\n        return sequencers[signer].mintAddress != address(0);\\n    }\\n\\n    /**\\n     * Delete sequencer\\n     */\\n    function deleteSequencer(address signer) internal {\\n        uint256 index = sequencers[signer].keyIndex;\\n        uint256 length = owners.length;\\n\\n        emit SequencerDelete(sequencers[signer].mintAddress, sequencers[signer].nodeID);\\n        // change index\\n        owners[index] = owners[length - 1];\\n        sequencers[owners[index]].keyIndex = index;\\n\\n        // delete\\n        delete rel[sequencers[signer].mintAddress];\\n        owners.pop();\\n        delete sequencers[signer];\\n    }\\n}\\n\",\"keccak256\":\"0x51bc93c7f668f772ee820be4cea4d6b7e2304c72caacebb2bb1ede5572a2c071\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122a8806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063900cf0cf116100e3578063cab2ea2a1161008c578063e90f218f11610066578063e90f218f14610383578063ee43b5d9146103a3578063f2fde38b146103b657600080fd5b8063cab2ea2a1461032f578063d1ad17bf14610358578063d84e9f921461037057600080fd5b8063b6b55f25116100bd578063b6b55f25146102f6578063bea0051d14610309578063c4d66de81461031c57600080fd5b8063900cf0cf146102ab5780639c13b6b5146102c2578063a0e67e2b146102e157600080fd5b80632e1a7d4d11610145578063715018a61161011f578063715018a61461028a578063853828b6146102925780638da5cb5b1461029a57600080fd5b80632e1a7d4d1461022357806343dfc471146102365780636d46e9871461024957600080fd5b806315ca0dc01161017657806315ca0dc0146101d75780631c7a07ee146101ec57806326b0c1141461021057600080fd5b8063025e7c2714610192578063125c5f16146101c2575b600080fd5b6101a56101a0366004611c5e565b6103c9565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ca6103f3565b6040516101b99190611d38565b6101ea6101e5366004611c5e565b6105d6565b005b6101ff6101fa366004611dd4565b6105e3565b6040516101b9959493929190611df6565b6101ea61021e366004611e36565b6106a7565b6101ea610231366004611c5e565b6106e3565b6101ea610244366004611e59565b610973565b61027a610257366004611dd4565b6001600160a01b0390811660009081526097602052604090206001015416151590565b60405190151581526020016101b9565b6101ea610dda565b6101ea610dee565b6065546001600160a01b03166101a5565b6102b4609b5481565b6040519081526020016101b9565b609c546102cf9060ff1681565b60405160ff90911681526020016101b9565b6102e9610fcb565b6040516101b99190611ee0565b6101ea610304366004611c5e565b61102d565b6101ea610317366004611dd4565b61126c565b6101ea61032a366004611dd4565b6112b3565b6101a561033d366004611dd4565b6098602052600090815260409020546001600160a01b031681565b609c546101a59061010090046001600160a01b031681565b609a546101a5906001600160a01b031681565b610396610391366004611dd4565b611494565b6040516101b99190611f2d565b6101ea6103b1366004611dd4565b6115c3565b6101ea6103c4366004611dd4565b611605565b609981815481106103d957600080fd5b6000918252602090912001546001600160a01b0316905081565b60995460609060009067ffffffffffffffff81111561041457610414611f40565b60405190808252806020026020018201604052801561048957816020015b6104766040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b8152602001906001900390816104325790505b50905060005b6099548110156105d0576000609982815481106104ae576104ae611f6f565b60009182526020808320909101546001600160a01b0390811680845260978352604093849020845160a08101865281548416815260018201549093169383019390935260028301805491955091938401919061050990611f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461053590611f9e565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b50505050508152602001600382015481526020016004820154815250508383815181106105b1576105b1611f6f565b60200260200101819052505080806105c89061201b565b91505061048f565b50919050565b6105de611695565b609b55565b6097602052600090815260409020805460018201546002830180546001600160a01b0393841694929093169261061890611f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461064490611f9e565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050908060030154908060040154905085565b6106af611695565b609c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b6002600154141561073b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001558061078d5760405162461bcd60e51b815260206004820152600d60248201527f496e76696c6420616d6f756e74000000000000000000000000000000000000006044820152606401610732565b336000908152609760205260409020600101546001600160a01b03166107f55760405162461bcd60e51b815260206004820152601360248201527f53657175656e636572206e6f74206578697374000000000000000000000000006044820152606401610732565b3360009081526097602052604090206003015481908111156108265750336000908152609760205260409020600301545b609a546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190612054565b5033600090815260976020526040812060030180548392906108e6908490612076565b909155505033600090815260976020526040908190206001810154600382015492517fb60fdb7a00b5d98213e969843dc87e0f330162b9a4dc216e9b21412854b1682493610943936001600160a01b039093169260020191612164565b60405180910390a13360009081526097602052604090206003015461096b5761096b336116ef565b505060018055565b600260015414156109c65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b600260015583610a185760405162461bcd60e51b815260206004820152600d60248201527f496e76696c6420616d6f756e74000000000000000000000000000000000000006044820152606401610732565b6001600160a01b038316610a935760405162461bcd60e51b8152602060048201526024808201527f496e76696c6420616464726573732c20616464726573732063616e206e6f742060448201527f62652030000000000000000000000000000000000000000000000000000000006064820152608401610732565b336000908152609760205260409020600101546001600160a01b031615610afc5760405162461bcd60e51b815260206004820152601860248201527f416c726561647920686173206265656e206372656174656400000000000000006044820152606401610732565b6001600160a01b038381166000908152609860205260409020541615610b8a5760405162461bcd60e51b815260206004820152602360248201527f54686973206d696e74206164647265737320616c726561647920686173206f7760448201527f6e657200000000000000000000000000000000000000000000000000000000006064820152608401610732565b609a546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2d9190612054565b506099546040805160a0810182523381526001600160a01b0386166020808301919091528251601f8601829004820281018201845285815291928301919086908690819084018382808284376000920182905250938552505050602080830189905260409283018590523382526097815290829020835181546001600160a01b039182167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617835585840151600184018054919093169116179055918301518051610d019260028501920190611b8f565b506060820151600382015560809091015160049091015560998054600181019091557f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d00018054337fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092556001600160a01b0386166000908152609860205260409081902080549092168317909155517f4bc782d7487c41941075eb09650b2eb45a57e23e2241db6a958b8af8485324f691610dc791879087908790612196565b60405180910390a1505060018055505050565b610de2611695565b610dec6000611912565b565b60026001541415610e415760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600190815533600090815260976020526040902001546001600160a01b0316610eae5760405162461bcd60e51b815260206004820152601260248201527f446f206e6f7420686176652063726561746500000000000000000000000000006044820152606401610732565b336000818152609760205260409081902060030154609a5491517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019390935260248301819052916001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610f2a57600080fd5b505af1158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190612054565b5033600090815260976020526040808220600181015491517fb60fdb7a00b5d98213e969843dc87e0f330162b9a4dc216e9b21412854b1682493610fb3936001600160a01b03169260020191612164565b60405180910390a1610fc4336116ef565b5060018055565b6060609980548060200260200160405190810160405280929190818152602001828054801561102357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611005575b5050505050905090565b600260015414156110805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600155806110d25760405162461bcd60e51b815260206004820152600d60248201527f496e76696c6420616d6f756e74000000000000000000000000000000000000006044820152606401610732565b336000908152609760205260409020600101546001600160a01b031661113a5760405162461bcd60e51b815260206004820152601360248201527f53657175656e636572206e6f74206578697374000000000000000000000000006044820152606401610732565b609a546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190612054565b503360009081526097602052604081206003018054839290611200908490612201565b909155505033600090815260976020526040908190206001810154600382015492517fb60fdb7a00b5d98213e969843dc87e0f330162b9a4dc216e9b21412854b168249361125d936001600160a01b039093169260020191612164565b60405180910390a15060018055565b611274611695565b609c80546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600054610100900460ff16158080156112d35750600054600160ff909116105b806112ed5750303b1580156112ed575060005460ff166001145b61135f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610732565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156113bd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6113c561197c565b6113cd611a01565b609a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556000609b55609c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055801561149057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6114d86040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b6001600160a01b03808316600090815260976020908152604091829020825160a081018452815485168152600182015490941691840191909152600281018054919284019161152690611f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461155290611f9e565b801561159f5780601f106115745761010080835404028352916020019161159f565b820191906000526020600020905b81548152906001019060200180831161158257829003601f168201915b50505050508152602001600382015481526020016004820154815250509050919050565b6115cb611695565b609a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61160d611695565b6001600160a01b0381166116895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610732565b61169281611912565b50565b6065546001600160a01b03163314610dec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610732565b6001600160a01b0380821660009081526097602052604090819020600481015460995460018301549351919490937f37c49a6eae060065fbdeff05623918ea0969b4b1146b4c2fd33658caa72ed0db9361175193919092169160020190612219565b60405180910390a16099611766600183612076565b8154811061177657611776611f6f565b600091825260209091200154609980546001600160a01b0390921691849081106117a2576117a2611f6f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160976000609985815481106117e8576117e8611f6f565b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182206004019490945586831681526097845281812060010154909216825260989092522080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055609980548061186a5761186a612243565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915593019093556001600160a01b0386168152609790925260408220805482168155600181018054909216909155906118fd6002830182611c13565b50600060038201819055600490910155505050565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610dec611a86565b600054610100900460ff16611a7e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610dec611b0c565b600054610100900460ff16611b035760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610dec33611912565b600054610100900460ff16611b895760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b60018055565b828054611b9b90611f9e565b90600052602060002090601f016020900481019282611bbd5760008555611c03565b82601f10611bd657805160ff1916838001178555611c03565b82800160010185558215611c03579182015b82811115611c03578251825591602001919060010190611be8565b50611c0f929150611c49565b5090565b508054611c1f90611f9e565b6000825580601f10611c2f575050565b601f01602090049060005260206000209081019061169291905b5b80821115611c0f5760008155600101611c4a565b600060208284031215611c7057600080fd5b5035919050565b6000815180845260005b81811015611c9d57602081850181015186830182015201611c81565b81811115611caf576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006001600160a01b0380835116845280602084015116602085015250604082015160a06040850152611d1860a0850182611c77565b905060608301516060850152608083015160808501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611dab577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d99858351611ce2565b94509285019290850190600101611d5f565b5092979650505050505050565b80356001600160a01b0381168114611dcf57600080fd5b919050565b600060208284031215611de657600080fd5b611def82611db8565b9392505050565b60006001600160a01b03808816835280871660208401525060a06040830152611e2260a0830186611c77565b606083019490945250608001529392505050565b600060208284031215611e4857600080fd5b813560ff81168114611def57600080fd5b60008060008060608587031215611e6f57600080fd5b84359350611e7f60208601611db8565b9250604085013567ffffffffffffffff80821115611e9c57600080fd5b818701915087601f830112611eb057600080fd5b813581811115611ebf57600080fd5b886020828501011115611ed157600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b81811015611f215783516001600160a01b031683529284019291840191600101611efc565b50909695505050505050565b602081526000611def6020830184611ce2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680611fb257607f821691505b602082108114156105d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561204d5761204d611fec565b5060010190565b60006020828403121561206657600080fd5b81518015158114611def57600080fd5b60008282101561208857612088611fec565b500390565b8054600090600181811c90808316806120a757607f831692505b60208084108214156120e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852602088018280156120fd576001811461212c57612157565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00871682528282019750612157565b60008981526020902060005b8781101561215157815484820152908601908401612138565b83019850505b5050505050505092915050565b6001600160a01b0384168152606060208201526000612186606083018561208d565b9050826040830152949350505050565b60006001600160a01b038087168352808616602084015250606060408301528260608301528284608084013760006080848401015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116830101905095945050505050565b6000821982111561221457612214611fec565b500190565b6001600160a01b038316815260406020820152600061223b604083018461208d565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220e3b3965f6ffbf37cd33e4e7b1f980932c08c40375429f1982c44df10c0a7085d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063900cf0cf116100e3578063cab2ea2a1161008c578063e90f218f11610066578063e90f218f14610383578063ee43b5d9146103a3578063f2fde38b146103b657600080fd5b8063cab2ea2a1461032f578063d1ad17bf14610358578063d84e9f921461037057600080fd5b8063b6b55f25116100bd578063b6b55f25146102f6578063bea0051d14610309578063c4d66de81461031c57600080fd5b8063900cf0cf146102ab5780639c13b6b5146102c2578063a0e67e2b146102e157600080fd5b80632e1a7d4d11610145578063715018a61161011f578063715018a61461028a578063853828b6146102925780638da5cb5b1461029a57600080fd5b80632e1a7d4d1461022357806343dfc471146102365780636d46e9871461024957600080fd5b806315ca0dc01161017657806315ca0dc0146101d75780631c7a07ee146101ec57806326b0c1141461021057600080fd5b8063025e7c2714610192578063125c5f16146101c2575b600080fd5b6101a56101a0366004611c5e565b6103c9565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ca6103f3565b6040516101b99190611d38565b6101ea6101e5366004611c5e565b6105d6565b005b6101ff6101fa366004611dd4565b6105e3565b6040516101b9959493929190611df6565b6101ea61021e366004611e36565b6106a7565b6101ea610231366004611c5e565b6106e3565b6101ea610244366004611e59565b610973565b61027a610257366004611dd4565b6001600160a01b0390811660009081526097602052604090206001015416151590565b60405190151581526020016101b9565b6101ea610dda565b6101ea610dee565b6065546001600160a01b03166101a5565b6102b4609b5481565b6040519081526020016101b9565b609c546102cf9060ff1681565b60405160ff90911681526020016101b9565b6102e9610fcb565b6040516101b99190611ee0565b6101ea610304366004611c5e565b61102d565b6101ea610317366004611dd4565b61126c565b6101ea61032a366004611dd4565b6112b3565b6101a561033d366004611dd4565b6098602052600090815260409020546001600160a01b031681565b609c546101a59061010090046001600160a01b031681565b609a546101a5906001600160a01b031681565b610396610391366004611dd4565b611494565b6040516101b99190611f2d565b6101ea6103b1366004611dd4565b6115c3565b6101ea6103c4366004611dd4565b611605565b609981815481106103d957600080fd5b6000918252602090912001546001600160a01b0316905081565b60995460609060009067ffffffffffffffff81111561041457610414611f40565b60405190808252806020026020018201604052801561048957816020015b6104766040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b8152602001906001900390816104325790505b50905060005b6099548110156105d0576000609982815481106104ae576104ae611f6f565b60009182526020808320909101546001600160a01b0390811680845260978352604093849020845160a08101865281548416815260018201549093169383019390935260028301805491955091938401919061050990611f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461053590611f9e565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b50505050508152602001600382015481526020016004820154815250508383815181106105b1576105b1611f6f565b60200260200101819052505080806105c89061201b565b91505061048f565b50919050565b6105de611695565b609b55565b6097602052600090815260409020805460018201546002830180546001600160a01b0393841694929093169261061890611f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461064490611f9e565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050908060030154908060040154905085565b6106af611695565b609c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b6002600154141561073b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001558061078d5760405162461bcd60e51b815260206004820152600d60248201527f496e76696c6420616d6f756e74000000000000000000000000000000000000006044820152606401610732565b336000908152609760205260409020600101546001600160a01b03166107f55760405162461bcd60e51b815260206004820152601360248201527f53657175656e636572206e6f74206578697374000000000000000000000000006044820152606401610732565b3360009081526097602052604090206003015481908111156108265750336000908152609760205260409020600301545b609a546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190612054565b5033600090815260976020526040812060030180548392906108e6908490612076565b909155505033600090815260976020526040908190206001810154600382015492517fb60fdb7a00b5d98213e969843dc87e0f330162b9a4dc216e9b21412854b1682493610943936001600160a01b039093169260020191612164565b60405180910390a13360009081526097602052604090206003015461096b5761096b336116ef565b505060018055565b600260015414156109c65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b600260015583610a185760405162461bcd60e51b815260206004820152600d60248201527f496e76696c6420616d6f756e74000000000000000000000000000000000000006044820152606401610732565b6001600160a01b038316610a935760405162461bcd60e51b8152602060048201526024808201527f496e76696c6420616464726573732c20616464726573732063616e206e6f742060448201527f62652030000000000000000000000000000000000000000000000000000000006064820152608401610732565b336000908152609760205260409020600101546001600160a01b031615610afc5760405162461bcd60e51b815260206004820152601860248201527f416c726561647920686173206265656e206372656174656400000000000000006044820152606401610732565b6001600160a01b038381166000908152609860205260409020541615610b8a5760405162461bcd60e51b815260206004820152602360248201527f54686973206d696e74206164647265737320616c726561647920686173206f7760448201527f6e657200000000000000000000000000000000000000000000000000000000006064820152608401610732565b609a546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2d9190612054565b506099546040805160a0810182523381526001600160a01b0386166020808301919091528251601f8601829004820281018201845285815291928301919086908690819084018382808284376000920182905250938552505050602080830189905260409283018590523382526097815290829020835181546001600160a01b039182167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617835585840151600184018054919093169116179055918301518051610d019260028501920190611b8f565b506060820151600382015560809091015160049091015560998054600181019091557f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d00018054337fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092556001600160a01b0386166000908152609860205260409081902080549092168317909155517f4bc782d7487c41941075eb09650b2eb45a57e23e2241db6a958b8af8485324f691610dc791879087908790612196565b60405180910390a1505060018055505050565b610de2611695565b610dec6000611912565b565b60026001541415610e415760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600190815533600090815260976020526040902001546001600160a01b0316610eae5760405162461bcd60e51b815260206004820152601260248201527f446f206e6f7420686176652063726561746500000000000000000000000000006044820152606401610732565b336000818152609760205260409081902060030154609a5491517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019390935260248301819052916001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610f2a57600080fd5b505af1158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190612054565b5033600090815260976020526040808220600181015491517fb60fdb7a00b5d98213e969843dc87e0f330162b9a4dc216e9b21412854b1682493610fb3936001600160a01b03169260020191612164565b60405180910390a1610fc4336116ef565b5060018055565b6060609980548060200260200160405190810160405280929190818152602001828054801561102357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611005575b5050505050905090565b600260015414156110805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600155806110d25760405162461bcd60e51b815260206004820152600d60248201527f496e76696c6420616d6f756e74000000000000000000000000000000000000006044820152606401610732565b336000908152609760205260409020600101546001600160a01b031661113a5760405162461bcd60e51b815260206004820152601360248201527f53657175656e636572206e6f74206578697374000000000000000000000000006044820152606401610732565b609a546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190612054565b503360009081526097602052604081206003018054839290611200908490612201565b909155505033600090815260976020526040908190206001810154600382015492517fb60fdb7a00b5d98213e969843dc87e0f330162b9a4dc216e9b21412854b168249361125d936001600160a01b039093169260020191612164565b60405180910390a15060018055565b611274611695565b609c80546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600054610100900460ff16158080156112d35750600054600160ff909116105b806112ed5750303b1580156112ed575060005460ff166001145b61135f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610732565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156113bd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6113c561197c565b6113cd611a01565b609a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556000609b55609c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055801561149057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6114d86040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b6001600160a01b03808316600090815260976020908152604091829020825160a081018452815485168152600182015490941691840191909152600281018054919284019161152690611f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461155290611f9e565b801561159f5780601f106115745761010080835404028352916020019161159f565b820191906000526020600020905b81548152906001019060200180831161158257829003601f168201915b50505050508152602001600382015481526020016004820154815250509050919050565b6115cb611695565b609a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61160d611695565b6001600160a01b0381166116895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610732565b61169281611912565b50565b6065546001600160a01b03163314610dec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610732565b6001600160a01b0380821660009081526097602052604090819020600481015460995460018301549351919490937f37c49a6eae060065fbdeff05623918ea0969b4b1146b4c2fd33658caa72ed0db9361175193919092169160020190612219565b60405180910390a16099611766600183612076565b8154811061177657611776611f6f565b600091825260209091200154609980546001600160a01b0390921691849081106117a2576117a2611f6f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160976000609985815481106117e8576117e8611f6f565b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182206004019490945586831681526097845281812060010154909216825260989092522080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055609980548061186a5761186a612243565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915593019093556001600160a01b0386168152609790925260408220805482168155600181018054909216909155906118fd6002830182611c13565b50600060038201819055600490910155505050565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610dec611a86565b600054610100900460ff16611a7e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610dec611b0c565b600054610100900460ff16611b035760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610dec33611912565b600054610100900460ff16611b895760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b60018055565b828054611b9b90611f9e565b90600052602060002090601f016020900481019282611bbd5760008555611c03565b82601f10611bd657805160ff1916838001178555611c03565b82800160010185558215611c03579182015b82811115611c03578251825591602001919060010190611be8565b50611c0f929150611c49565b5090565b508054611c1f90611f9e565b6000825580601f10611c2f575050565b601f01602090049060005260206000209081019061169291905b5b80821115611c0f5760008155600101611c4a565b600060208284031215611c7057600080fd5b5035919050565b6000815180845260005b81811015611c9d57602081850181015186830182015201611c81565b81811115611caf576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006001600160a01b0380835116845280602084015116602085015250604082015160a06040850152611d1860a0850182611c77565b905060608301516060850152608083015160808501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611dab577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d99858351611ce2565b94509285019290850190600101611d5f565b5092979650505050505050565b80356001600160a01b0381168114611dcf57600080fd5b919050565b600060208284031215611de657600080fd5b611def82611db8565b9392505050565b60006001600160a01b03808816835280871660208401525060a06040830152611e2260a0830186611c77565b606083019490945250608001529392505050565b600060208284031215611e4857600080fd5b813560ff81168114611def57600080fd5b60008060008060608587031215611e6f57600080fd5b84359350611e7f60208601611db8565b9250604085013567ffffffffffffffff80821115611e9c57600080fd5b818701915087601f830112611eb057600080fd5b813581811115611ebf57600080fd5b886020828501011115611ed157600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b81811015611f215783516001600160a01b031683529284019291840191600101611efc565b50909695505050505050565b602081526000611def6020830184611ce2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680611fb257607f821691505b602082108114156105d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561204d5761204d611fec565b5060010190565b60006020828403121561206657600080fd5b81518015158114611def57600080fd5b60008282101561208857612088611fec565b500390565b8054600090600181811c90808316806120a757607f831692505b60208084108214156120e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852602088018280156120fd576001811461212c57612157565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00871682528282019750612157565b60008981526020902060005b8781101561215157815484820152908601908401612138565b83019850505b5050505050505092915050565b6001600160a01b0384168152606060208201526000612186606083018561208d565b9050826040830152949350505050565b60006001600160a01b038087168352808616602084015250606060408301528260608301528284608084013760006080848401015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116830101905095945050505050565b6000821982111561221457612214611fec565b500190565b6001600160a01b038316815260406020820152600061223b604083018461208d565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220e3b3965f6ffbf37cd33e4e7b1f980932c08c40375429f1982c44df10c0a7085d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSequencer(uint256,address,bytes)": {
        "params": {
          "_amount": "amount of bit token, will transfer to this contract when sequencer create",
          "_mintAddress": "sequencer mint address",
          "_nodeID": "sequencer node ID"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "amount of bit token"
        }
      },
      "getOwners()": {
        "returns": {
          "_0": "owners all owners"
        }
      },
      "getSequencer(address)": {
        "params": {
          "signer": "signer address, the key to find sequencer"
        },
        "returns": {
          "_0": "seq sequencer info"
        }
      },
      "getSequencers()": {
        "returns": {
          "_0": "seqs all sequencers"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBitAddress(address)": {
        "params": {
          "_bitToken": "new ERC20 address of bit token"
        }
      },
      "updateEpoch(uint256)": {
        "params": {
          "_epoch": "new epoch"
        }
      },
      "updateScheduler(address)": {
        "params": {
          "_scheduler": "new scheculer`s address"
        }
      },
      "updateSequencerLimit(uint8)": {
        "params": {
          "_limit": "new limit"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "amount of bit token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSequencer(uint256,address,bytes)": {
        "notice": "Create a new sequencer info and init amount"
      },
      "deposit(uint256)": {
        "notice": "Check sequencer exist then add deposit amount"
      },
      "getOwners()": {
        "notice": "Return owners"
      },
      "getSequencer(address)": {
        "notice": "Return sequencer info by signer address"
      },
      "getSequencers()": {
        "notice": "Return all sequencer infos"
      },
      "isSequencer(address)": {
        "notice": "Return if signer exist"
      },
      "updateBitAddress(address)": {
        "notice": "Update bit token address"
      },
      "updateEpoch(uint256)": {
        "notice": "Update Epoch"
      },
      "updateScheduler(address)": {
        "notice": "Update Epoch"
      },
      "updateSequencerLimit(uint8)": {
        "notice": "Update Epoch"
      },
      "withdraw(uint256)": {
        "notice": "amount > deposit(signer).amount -> withdraw all 0 < amount < deposit(signer).amount -> withdraw amount to signer when deposit(signer).amount = 0, delete the sequencer"
      },
      "withdrawAll()": {
        "notice": "Check sequencer exist then withdraw all. This action will delete sequencer after withdraw"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 423,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 467,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 752,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7760,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "sequencers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_struct(SequencerInfo)7755_storage)"
      },
      {
        "astId": 7764,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "rel",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7767,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "owners",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7769,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "bitToken",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 7771,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "epoch",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 7773,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "sequencerLimit",
        "offset": 0,
        "slot": "156",
        "type": "t_uint8"
      },
      {
        "astId": 7775,
        "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
        "label": "scheduler",
        "offset": 1,
        "slot": "156",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(SequencerInfo)7755_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Sequencer.SequencerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SequencerInfo)7755_storage"
      },
      "t_struct(SequencerInfo)7755_storage": {
        "encoding": "inplace",
        "label": "struct Sequencer.SequencerInfo",
        "members": [
          {
            "astId": 7746,
            "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7748,
            "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
            "label": "mintAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7750,
            "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
            "label": "nodeID",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 7752,
            "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7754,
            "contract": "contracts/L1/sequencer/Sequencer.sol:Sequencer",
            "label": "keyIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}