{
  "address": "0x1Edd37fc504513bAa00D782E52478d0a3f675553",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rollupBatchIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dataStoreId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stratL2BlockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endL2BlockNumber",
          "type": "uint256"
        }
      ],
      "name": "RollupStoreConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dataStoreId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stratL2BlockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endL2BlockNumber",
          "type": "uint256"
        }
      ],
      "name": "RollupStoreInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rollupBatchIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dataStoreId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stratL2BlockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endL2BlockNumber",
          "type": "uint256"
        }
      ],
      "name": "RollupStoreReverted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCK_STALE_MEASURE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FRAUD_STRING",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "headerHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint32",
                  "name": "durationDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "globalDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "confirmer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "signatoryRecordHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDataLayrServiceManager.DataStoreSearchData",
          "name": "searchData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "startL2Block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endL2Block",
          "type": "uint256"
        }
      ],
      "name": "confirmData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataManageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "dataStoreIdToL2RollUpBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startL2BlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBL2BlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "dataStoreIdToRollupStoreNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fraudProofPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL2ConfirmedBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dataStoreId",
          "type": "uint32"
        }
      ],
      "name": "getL2RollUpBlockByDataStoreId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startL2BlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBL2BlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct BVM_EigenDataLayrChain.BatchRollupBlock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL2StoredBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rollupBatchIndex",
          "type": "uint256"
        }
      ],
      "name": "getRollupStoreByRollupBatchIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dataStoreId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "confirmAt",
              "type": "uint32"
            },
            {
              "internalType": "enum BVM_EigenDataLayrChain.RollupStoreStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BVM_EigenDataLayrChain.RollupStore",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataManageAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block_stale_measure",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fraudProofPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_l2SubmittedBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ConfirmedBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2StoredBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "polys",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "parse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fraudulentStoreNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "headerHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint32",
                  "name": "durationDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "globalDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "confirmer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "signatoryRecordHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDataLayrServiceManager.DataStoreSearchData",
          "name": "searchData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "header",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "firstChunkNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes[]",
              "name": "polys",
              "type": "bytes[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BN254.G1Point",
                  "name": "interpolationPoly",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BN254.G1Point",
                  "name": "revealProof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256[2]",
                      "name": "X",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "Y",
                      "type": "uint256[2]"
                    }
                  ],
                  "internalType": "struct BN254.G2Point",
                  "name": "zeroPoly",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "zeroPolyProof",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataLayrDisclosureLogic.MultiRevealProof[]",
              "name": "multiRevealProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "X",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "Y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct BN254.G2Point",
              "name": "polyEquivalenceProof",
              "type": "tuple"
            }
          ],
          "internalType": "struct BVM_EigenDataLayrChain.DisclosureProofs",
          "name": "disclosureProofs",
          "type": "tuple"
        }
      ],
      "name": "proveFraud",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeFraudProofAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollupBatchIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rollupBatchIndexRollupStores",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "dataStoreId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "confirmAt",
          "type": "uint32"
        },
        {
          "internalType": "enum BVM_EigenDataLayrChain.RollupStoreStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setFraudProofAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "startL2Block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endL2Block",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "totalOperatorsIndex",
          "type": "uint32"
        }
      ],
      "name": "storeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "unavailableFraudProofAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dataManageAddress",
          "type": "address"
        }
      ],
      "name": "updateDataLayrManagerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fraudProofPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateFraudProofPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_l2ConfirmedBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "updateL2ConfirmedBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_l2StoredBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "updateL2StoredBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "updateSequencerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8196ac489c77be1bed8e96194f51943bf63f6e35d8de98f5781ebb08bb7b0088",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0x1Edd37fc504513bAa00D782E52478d0a3f675553",
    "transactionIndex": 0,
    "gasUsed": "3832345",
    "logsBloom": "0x
    "blockHash": "0xc5b796caf19e6d05dfff4bab9213be57e3aef1728e349dc84c063619fb5b5aa3",
    "transactionHash": "0x8196ac489c77be1bed8e96194f51943bf63f6e35d8de98f5781ebb08bb7b0088",
    "logs": [],
    "blockNumber": 40,
    "cumulativeGasUsed": "3832345",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cf6a1c489857cab7b86178a7327b973",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rollupBatchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dataStoreId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stratL2BlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endL2BlockNumber\",\"type\":\"uint256\"}],\"name\":\"RollupStoreConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dataStoreId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stratL2BlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endL2BlockNumber\",\"type\":\"uint256\"}],\"name\":\"RollupStoreInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rollupBatchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dataStoreId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stratL2BlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endL2BlockNumber\",\"type\":\"uint256\"}],\"name\":\"RollupStoreReverted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_STALE_MEASURE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAUD_STRING\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"durationDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"globalDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"signatoryRecordHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreSearchData\",\"name\":\"searchData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startL2Block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endL2Block\",\"type\":\"uint256\"}],\"name\":\"confirmData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataManageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"dataStoreIdToL2RollUpBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startL2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBL2BlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"dataStoreIdToRollupStoreNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraudProofPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL2ConfirmedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dataStoreId\",\"type\":\"uint32\"}],\"name\":\"getL2RollUpBlockByDataStoreId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startL2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBL2BlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct BVM_EigenDataLayrChain.BatchRollupBlock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL2StoredBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rollupBatchIndex\",\"type\":\"uint256\"}],\"name\":\"getRollupStoreByRollupBatchIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"confirmAt\",\"type\":\"uint32\"},{\"internalType\":\"enum BVM_EigenDataLayrChain.RollupStoreStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BVM_EigenDataLayrChain.RollupStore\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataManageAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block_stale_measure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fraudProofPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2SubmittedBlockNumber\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ConfirmedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2StoredBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"polys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"parse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fraudulentStoreNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"durationDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"globalDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"signatoryRecordHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreSearchData\",\"name\":\"searchData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"firstChunkNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"polys\",\"type\":\"bytes[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"interpolationPoly\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"revealProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"zeroPoly\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"zeroPolyProof\",\"type\":\"bytes\"}],\"internalType\":\"struct DataLayrDisclosureLogic.MultiRevealProof[]\",\"name\":\"multiRevealProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"polyEquivalenceProof\",\"type\":\"tuple\"}],\"internalType\":\"struct BVM_EigenDataLayrChain.DisclosureProofs\",\"name\":\"disclosureProofs\",\"type\":\"tuple\"}],\"name\":\"proveFraud\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFraudProofAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupBatchIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rollupBatchIndexRollupStores\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"confirmAt\",\"type\":\"uint32\"},{\"internalType\":\"enum BVM_EigenDataLayrChain.RollupStoreStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFraudProofAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startL2Block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endL2Block\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"totalOperatorsIndex\",\"type\":\"uint32\"}],\"name\":\"storeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unavailableFraudProofAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataManageAddress\",\"type\":\"address\"}],\"name\":\"updateDataLayrManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fraudProofPeriod\",\"type\":\"uint256\"}],\"name\":\"updateFraudProofPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2ConfirmedBlockNumber\",\"type\":\"uint256\"}],\"name\":\"updateL2ConfirmedBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2StoredBlockNumber\",\"type\":\"uint256\"}],\"name\":\"updateL2StoredBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"updateSequencerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirmData(bytes,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),uint256,uint256)\":{\"details\":\"Only dataStores created through this contract can be confirmed by calling this function.\",\"params\":{\"data\":\"Input of the header information for a dataStore and signatures for confirming the dataStore -- used as input to the `confirmDataStore` function of the DataLayrServiceManager -- see the DataLayr docs for more info on this.\",\"searchData\":\"Data used to specify the dataStore being confirmed. Must be provided so other contracts can properly look up the dataStore.\"}},\"getL2ConfirmedBlockNumber()\":{\"returns\":{\"_0\":\"Latest stored L2 block number.\"}},\"getL2RollUpBlockByDataStoreId(uint32)\":{\"returns\":{\"_0\":\"BatchRollupBlock.\"}},\"getL2StoredBlockNumber()\":{\"returns\":{\"_0\":\"Latest stored L2 block number.\"}},\"getRollupStoreByRollupBatchIndex(uint256)\":{\"returns\":{\"_0\":\"RollupStore.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proveFraud(uint256,uint256,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),(bytes,uint32,bytes[],((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2]),bytes)[],(uint256[2],uint256[2])))\":{\"details\":\"This function is only callable if: -the sequencer is staked, -the dataStore in question has been confirmed, and -the fraudproof period for the dataStore has not yet passed.\",\"params\":{\"disclosureProofs\":\"Non-interactive polynomial proofs that prove that the specific data of interest was part of the dataStore in question.\",\"fraudulentStoreNumber\":\"The rollup l2Block to prove fraud on\",\"searchData\":\"Data used to specify the dataStore being fraud-proven. Must be provided so other contracts can properly look up the dataStore.\",\"startIndex\":\"The index to begin reading the proven data from\"}},\"removeFraudProofAddress(address)\":{\"params\":{\"_address\":\"for fraud proof\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFraudProofAddress(address)\":{\"params\":{\"_address\":\"for fraud proof\"}},\"storeData(bytes,uint8,uint32,uint256,uint256,uint32)\":{\"details\":\"The specified `blockNumber `must be less than `BLOCK_STALE_MEASURE` blocks in the past.\",\"params\":{\"blockNumber\":\"is the previous block number which was used to encode the data for storage\",\"duration\":\"is the duration to store the datastore for\",\"header\":\"of data to be stored\",\"totalOperatorsIndex\":\"is index in the totalOperators array of DataLayr referring to what the total number of operators was at `blockNumber`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unavailableFraudProofAddress(address)\":{\"params\":{\"_address\":\"for fraud proof\"}},\"updateDataLayrManagerAddress(address)\":{\"params\":{\"_dataManageAddress\":\"dlsm address\"}},\"updateFraudProofPeriod(uint256)\":{\"params\":{\"_fraudProofPeriod\":\"fraud proof period\"}},\"updateL2ConfirmedBlockNumber(uint256)\":{\"params\":{\"_l2ConfirmedBlockNumber\":\"l2 latest block number\"}},\"updateL2StoredBlockNumber(uint256)\":{\"params\":{\"_l2StoredBlockNumber\":\"l2 latest block number\"}},\"updateSequencerAddress(address)\":{\"params\":{\"_sequencer\":\"update sequencer address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"confirmData(bytes,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),uint256,uint256)\":{\"notice\":\"After the `storeData `transaction is included in a block and doesn\\u2019t revert, the sequencer will disperse the data to the DataLayr nodes off chain and get their signatures that they have stored the data. Now, the sequencer has to post the signature on chain and get it verified.\"},\"getL2ConfirmedBlockNumber()\":{\"notice\":\"Returns the block number of the latest stored L2.\"},\"getL2RollUpBlockByDataStoreId(uint32)\":{\"notice\":\"Returns the l2 block number by store id\"},\"getL2StoredBlockNumber()\":{\"notice\":\"Returns the block number of the latest stored L2.\"},\"getRollupStoreByRollupBatchIndex(uint256)\":{\"notice\":\"Returns the rollup store by l2 block number\"},\"proveFraud(uint256,uint256,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),(bytes,uint32,bytes[],((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2]),bytes)[],(uint256[2],uint256[2])))\":{\"notice\":\"Called by a challenger (this could be anyone -- \\\"challenger\\\" is not a permissioned role) to prove that fraud has occurred. First, a subset of data included in a dataStore that was initiated by the sequencer is proven, and then the presence of fraud in the data is checked. For the sake of this example, \\\"fraud occurring\\\" means that the sequencer included the forbidden `FRAUD_STRING` in a dataStore that they initiated. In pratical use, \\\"fraud occurring\\\" might mean including data that specifies an invalid transaction or invalid state transition.\"},\"removeFraudProofAddress(address)\":{\"notice\":\"remove fraud proof address\"},\"setFraudProofAddress(address)\":{\"notice\":\"set fraud proof address\"},\"storeData(bytes,uint8,uint32,uint256,uint256,uint32)\":{\"notice\":\"Called by the (staked) sequencer to pay for a datastore and post some metadata (in the `header` parameter) about it on chain. Since the sequencer must encode the data before they post the header on chain, they must use a *snapshot* of the number and stakes of DataLayr operators from a previous block number, specified by the `blockNumber` input.\"},\"unavailableFraudProofAddress(address)\":{\"notice\":\"unavailable fraud proof address\"},\"updateDataLayrManagerAddress(address)\":{\"notice\":\"update dlsm address\"},\"updateFraudProofPeriod(uint256)\":{\"notice\":\"update fraud proof period\"},\"updateL2ConfirmedBlockNumber(uint256)\":{\"notice\":\"update l2 latest confirm block number\"},\"updateL2StoredBlockNumber(uint256)\":{\"notice\":\"update l2 latest store block number\"},\"updateSequencerAddress(address)\":{\"notice\":\"update sequencer address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/da/BVM_EigenDataLayrChain.sol\":\"BVM_EigenDataLayrChain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/da/BVM_EigenDataLayrChain.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { DataLayrDisclosureLogic } from \\\"../libraries/eigenda/DataLayrDisclosureLogic.sol\\\";\\nimport { IDataLayrServiceManager } from \\\"../libraries/eigenda/lib/contracts/interfaces/IDataLayrServiceManager.sol\\\";\\nimport { BN254 } from \\\"../libraries/eigenda/BN254.sol\\\";\\nimport { DataStoreUtils } from \\\"../libraries/eigenda/lib/contracts/libraries/DataStoreUtils.sol\\\";\\nimport { Parser } from \\\"../libraries/eigenda/Parse.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract BVM_EigenDataLayrChain is OwnableUpgradeable, ReentrancyGuardUpgradeable, Parser {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    enum RollupStoreStatus {\\n        UNCOMMITTED,\\n        COMMITTED,\\n        REVERTED\\n    }\\n\\n    struct DisclosureProofs {\\n        bytes header;\\n        uint32 firstChunkNumber;\\n        bytes[] polys;\\n        DataLayrDisclosureLogic.MultiRevealProof[] multiRevealProofs;\\n        BN254.G2Point polyEquivalenceProof;\\n    }\\n\\n    address public sequencer;\\n    address public dataManageAddress;\\n    uint256 public BLOCK_STALE_MEASURE;\\n    uint256 public l2StoredBlockNumber;\\n    uint256 public l2ConfirmedBlockNumber;\\n    uint256 public fraudProofPeriod;\\n    uint256 public rollupBatchIndex;\\n\\n    bytes public constant FRAUD_STRING = '-_(` O `)_- -_(` o `)_- -_(` Q `)_- BITDAO JUST REKT YOU |_(` O `)_| - |_(` o `)_| - |_(` Q `)_|';\\n    uint256 internal constant DATA_STORE_INITIALIZED_BUT_NOT_CONFIRMED = type(uint256).max;\\n\\n    struct RollupStore {\\n        uint32 dataStoreId;\\n        uint32 confirmAt;\\n        RollupStoreStatus status;\\n    }\\n\\n    struct BatchRollupBlock {\\n        uint256 startL2BlockNumber;\\n        uint256 endBL2BlockNumber;\\n    }\\n\\n    mapping(uint256 => RollupStore) public rollupBatchIndexRollupStores;\\n    mapping(uint32 => BatchRollupBlock) public dataStoreIdToL2RollUpBlock;\\n    mapping(uint32 => uint256) public dataStoreIdToRollupStoreNumber;\\n    mapping(address => bool) private fraudProofWhitelist;\\n\\n\\n    event RollupStoreInitialized(uint32 dataStoreId, uint256 stratL2BlockNumber, uint256 endL2BlockNumber);\\n    event RollupStoreConfirmed(uint256 rollupBatchIndex, uint32 dataStoreId, uint256 stratL2BlockNumber, uint256 endL2BlockNumber);\\n    event RollupStoreReverted(uint256 rollupBatchIndex, uint32 dataStoreId, uint256 stratL2BlockNumber, uint256 endL2BlockNumber);\\n\\n    function initialize(address _sequencer, address _dataManageAddress, uint256 _block_stale_measure, uint256 _fraudProofPeriod, uint256 _l2SubmittedBlockNumber) public initializer {\\n        __Ownable_init();\\n        sequencer = _sequencer;\\n        dataManageAddress = _dataManageAddress;\\n        BLOCK_STALE_MEASURE = _block_stale_measure;\\n        fraudProofPeriod = _fraudProofPeriod;\\n        l2StoredBlockNumber = _l2SubmittedBlockNumber;\\n        l2ConfirmedBlockNumber = _l2SubmittedBlockNumber;\\n    }\\n\\n    /**\\n     * @notice Returns the block number of the latest stored L2.\\n     * @return Latest stored L2 block number.\\n     */\\n    function getL2StoredBlockNumber() public view returns (uint256) {\\n        return l2StoredBlockNumber;\\n    }\\n\\n    /**\\n     * @notice Returns the block number of the latest stored L2.\\n     * @return Latest stored L2 block number.\\n     */\\n    function getL2ConfirmedBlockNumber() public view returns (uint256) {\\n        return l2ConfirmedBlockNumber;\\n    }\\n\\n    /**\\n     * @notice Returns the rollup store by l2 block number\\n     * @return RollupStore.\\n     */\\n    function getRollupStoreByRollupBatchIndex(uint256 _rollupBatchIndex) public view returns (RollupStore memory) {\\n        return rollupBatchIndexRollupStores[_rollupBatchIndex];\\n    }\\n\\n    /**\\n    * @notice Returns the l2 block number by store id\\n     * @return BatchRollupBlock.\\n     */\\n    function getL2RollUpBlockByDataStoreId(uint32 _dataStoreId) public view returns (BatchRollupBlock memory) {\\n        return dataStoreIdToL2RollUpBlock[_dataStoreId];\\n    }\\n\\n    /**\\n    * @notice set fraud proof address\\n    * @param _address for fraud proof\\n    */\\n    function setFraudProofAddress(address _address) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can set fraud proof address unavailable\\\");\\n        fraudProofWhitelist[_address] = true;\\n    }\\n\\n    /**\\n    * @notice unavailable fraud proof address\\n    * @param _address for fraud proof\\n    */\\n    function unavailableFraudProofAddress(address _address) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can remove fraud proof address\\\");\\n        fraudProofWhitelist[_address] = false;\\n    }\\n\\n    /**\\n    * @notice remove fraud proof address\\n    * @param _address for fraud proof\\n    */\\n    function removeFraudProofAddress(address _address) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can remove fraud proof address\\\");\\n        delete fraudProofWhitelist[_address];\\n    }\\n\\n    /**\\n    * @notice update fraud proof period\\n    * @param _fraudProofPeriod fraud proof period\\n    */\\n    function updateFraudProofPeriod(uint256 _fraudProofPeriod) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can update fraud proof period\\\");\\n        fraudProofPeriod = _fraudProofPeriod;\\n    }\\n\\n    /**\\n    * @notice update dlsm address\\n    * @param _dataManageAddress dlsm address\\n    */\\n    function updateDataLayrManagerAddress(address _dataManageAddress) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can update dlsm address\\\");\\n        dataManageAddress = _dataManageAddress;\\n    }\\n\\n    /**\\n    * @notice update l2 latest store block number\\n    * @param _l2StoredBlockNumber l2 latest block number\\n    */\\n    function updateL2StoredBlockNumber(uint256 _l2StoredBlockNumber) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can set latest l2 block number\\\");\\n        l2StoredBlockNumber = _l2StoredBlockNumber;\\n    }\\n\\n    /**\\n    * @notice update l2 latest confirm block number\\n    * @param _l2ConfirmedBlockNumber l2 latest block number\\n    */\\n    function updateL2ConfirmedBlockNumber(uint256 _l2ConfirmedBlockNumber) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can set latest l2 block number\\\");\\n        l2ConfirmedBlockNumber = _l2ConfirmedBlockNumber;\\n    }\\n\\n    /**\\n    * @notice update sequencer address\\n    * @param _sequencer update sequencer address\\n    */\\n    function updateSequencerAddress(address _sequencer) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can update sequencer address\\\");\\n        sequencer = _sequencer;\\n    }\\n\\n    /**\\n     * @notice Called by the (staked) sequencer to pay for a datastore and post some metadata (in the `header` parameter) about it on chain.\\n     * Since the sequencer must encode the data before they post the header on chain, they must use a *snapshot* of the number and stakes of DataLayr operators\\n     * from a previous block number, specified by the `blockNumber` input.\\n     * @param header of data to be stored\\n     * @param duration is the duration to store the datastore for\\n     * @param blockNumber is the previous block number which was used to encode the data for storage\\n     * @param totalOperatorsIndex is index in the totalOperators array of DataLayr referring to what the total number of operators was at `blockNumber`\\n     * @dev The specified `blockNumber `must be less than `BLOCK_STALE_MEASURE` blocks in the past.\\n     */\\n    function storeData(\\n        bytes calldata header,\\n        uint8 duration,\\n        uint32 blockNumber,\\n        uint256 startL2Block,\\n        uint256 endL2Block,\\n        uint32 totalOperatorsIndex\\n    ) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can store data\\\");\\n        require(block.number - blockNumber < BLOCK_STALE_MEASURE, \\\"stakes taken from too long ago\\\");\\n        uint32 dataStoreId = IDataLayrServiceManager(dataManageAddress).taskNumber();\\n        IDataLayrServiceManager(dataManageAddress).initDataStore(\\n            msg.sender,\\n            address(this),\\n            duration,\\n            blockNumber,\\n            totalOperatorsIndex,\\n            header\\n        );\\n        dataStoreIdToL2RollUpBlock[dataStoreId] = BatchRollupBlock({\\n            startL2BlockNumber: startL2Block,\\n            endBL2BlockNumber: endL2Block\\n        });\\n        dataStoreIdToRollupStoreNumber[dataStoreId] = DATA_STORE_INITIALIZED_BUT_NOT_CONFIRMED;\\n        l2StoredBlockNumber = endL2Block;\\n        emit RollupStoreInitialized(dataStoreId, startL2Block, endL2Block);\\n    }\\n\\n    /**\\n     * @notice After the `storeData `transaction is included in a block and doesn\\u2019t revert, the sequencer will disperse the data to the DataLayr nodes off chain\\n     * and get their signatures that they have stored the data. Now, the sequencer has to post the signature on chain and get it verified.\\n     * @param data Input of the header information for a dataStore and signatures for confirming the dataStore -- used as input to the `confirmDataStore` function\\n     * of the DataLayrServiceManager -- see the DataLayr docs for more info on this.\\n     * @param searchData Data used to specify the dataStore being confirmed. Must be provided so other contracts can properly look up the dataStore.\\n     * @dev Only dataStores created through this contract can be confirmed by calling this function.\\n     */\\n    function confirmData(\\n        bytes calldata data,\\n        IDataLayrServiceManager.DataStoreSearchData memory searchData,\\n        uint256 startL2Block,\\n        uint256 endL2Block\\n    ) external {\\n        require(msg.sender == sequencer, \\\"Only the sequencer can store data\\\");\\n        require(dataStoreIdToL2RollUpBlock[searchData.metadata.globalDataStoreId].startL2BlockNumber == startL2Block &&\\n            dataStoreIdToL2RollUpBlock[searchData.metadata.globalDataStoreId].endBL2BlockNumber == endL2Block,\\n            \\\"Data store either was not initialized by the rollup contract, or is already confirmed\\\"\\n        );\\n        require(\\n            dataStoreIdToRollupStoreNumber[searchData.metadata.globalDataStoreId] == DATA_STORE_INITIALIZED_BUT_NOT_CONFIRMED,\\n            \\\"Data store either was not initialized by the rollup contract, or is already confirmed\\\"\\n        );\\n        IDataLayrServiceManager(dataManageAddress).confirmDataStore(data, searchData);\\n        rollupBatchIndexRollupStores[rollupBatchIndex] = RollupStore({\\n            dataStoreId: searchData.metadata.globalDataStoreId,\\n            confirmAt: uint32(block.timestamp + fraudProofPeriod),\\n            status: RollupStoreStatus.COMMITTED\\n        });\\n        l2ConfirmedBlockNumber = endL2Block;\\n        dataStoreIdToRollupStoreNumber[searchData.metadata.globalDataStoreId] = rollupBatchIndex;\\n        emit RollupStoreConfirmed(uint32(rollupBatchIndex++), searchData.metadata.globalDataStoreId, startL2Block, endL2Block);\\n    }\\n\\n    /**\\n  * @notice Called by a challenger (this could be anyone -- \\\"challenger\\\" is not a permissioned role) to prove that fraud has occurred.\\n     * First, a subset of data included in a dataStore that was initiated by the sequencer is proven, and then the presence of fraud in the data is checked.\\n     * For the sake of this example, \\\"fraud occurring\\\" means that the sequencer included the forbidden `FRAUD_STRING` in a dataStore that they initiated.\\n     * In pratical use, \\\"fraud occurring\\\" might mean including data that specifies an invalid transaction or invalid state transition.\\n     * @param fraudulentStoreNumber The rollup l2Block to prove fraud on\\n     * @param startIndex The index to begin reading the proven data from\\n     * @param searchData Data used to specify the dataStore being fraud-proven. Must be provided so other contracts can properly look up the dataStore.\\n     * @param disclosureProofs Non-interactive polynomial proofs that prove that the specific data of interest was part of the dataStore in question.\\n     * @dev This function is only callable if:\\n     * -the sequencer is staked,\\n     * -the dataStore in question has been confirmed, and\\n     * -the fraudproof period for the dataStore has not yet passed.\\n     */\\n    function proveFraud(\\n        uint256 fraudulentStoreNumber,\\n        uint256 startIndex,\\n        IDataLayrServiceManager.DataStoreSearchData memory searchData,\\n        DisclosureProofs calldata disclosureProofs\\n    ) external {\\n        require(fraudProofWhitelist[msg.sender] == true, \\\"Only fraud proof white list can challenge data\\\");\\n        RollupStore memory rollupStore = rollupBatchIndexRollupStores[fraudulentStoreNumber];\\n        require(rollupStore.status == RollupStoreStatus.COMMITTED && rollupStore.confirmAt > block.timestamp, \\\"RollupStore must be committed and unconfirmed\\\");\\n        require(\\n            IDataLayrServiceManager(dataManageAddress).getDataStoreHashesForDurationAtTimestamp(\\n                searchData.duration,\\n                searchData.timestamp,\\n                searchData.index\\n            ) == DataStoreUtils.computeDataStoreHash(searchData.metadata),\\n            \\\"metadata preimage is incorrect\\\"\\n        );\\n        require(searchData.metadata.globalDataStoreId == rollupStore.dataStoreId, \\\"seachData's datastore id is not consistent with given rollup store\\\");\\n        require(searchData.metadata.headerHash == keccak256(disclosureProofs.header), \\\"disclosure proofs headerhash preimage is incorrect\\\");\\n        require(DataLayrDisclosureLogic.batchNonInteractivePolynomialProofs(\\n            disclosureProofs.header,\\n            disclosureProofs.firstChunkNumber,\\n            disclosureProofs.polys,\\n            disclosureProofs.multiRevealProofs,\\n            disclosureProofs.polyEquivalenceProof\\n        ), \\\"disclosure proofs are invalid\\\");\\n        uint32 numSys = DataLayrDisclosureLogic.getNumSysFromHeader(disclosureProofs.header);\\n        require(disclosureProofs.firstChunkNumber + disclosureProofs.polys.length <= numSys, \\\"Can only prove data from the systematic chunks\\\");\\n        bytes memory provenString = parse(disclosureProofs.polys, startIndex, FRAUD_STRING.length);\\n        require(provenString.length == FRAUD_STRING.length, \\\"Parsing error, proven string is different length than fraud string\\\");\\n        require(keccak256(provenString) == keccak256(FRAUD_STRING), \\\"proven string != fraud string\\\");\\n        rollupBatchIndexRollupStores[fraudulentStoreNumber].status = RollupStoreStatus.REVERTED;\\n        emit RollupStoreReverted(\\n            fraudulentStoreNumber,\\n            searchData.metadata.globalDataStoreId,\\n            dataStoreIdToL2RollUpBlock[searchData.metadata.globalDataStoreId].startL2BlockNumber,\\n            dataStoreIdToL2RollUpBlock[searchData.metadata.globalDataStoreId].endBL2BlockNumber\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2bffacaa04e0dbbf63f6cdf04a5b14ff463cc3e3f1863fec35402f8a77aea268\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/BN254.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.9;\\n\\nlibrary BN254 {\\n  uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 X;\\n    uint256 Y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] X;\\n    uint256[2] Y;\\n  }\\n\\n  /*\\n   * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n   */\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.X == 0 && p.Y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n    }\\n  }\\n\\n  /*\\n   * @return r the sum of two points of G1\\n   */\\n  function plus(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0x80, r, 0x40)\\n    }\\n\\n    require(success, \\\"bn254-add-failed\\\");\\n  }\\n\\n  /*\\n   * @return r the product of a point on G1 and a scalar, i.e.\\n   *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n   *         points p.\\n   */\\n  function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      // @dev using precompiled contract at 0x07 to do G1 scalar multiplication on elliptic curve alt_bn128\\n      success := staticcall(not(0), 0x07, input, 0x60, r, 0x40)\\n    }\\n    require(success, \\\"bn254-mul-failed\\\");\\n  }\\n\\n  /* @return The result of computing the pairing check\\n   *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n   *         For example,\\n   *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n   */\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[2] memory p1 = [a1, b1];\\n    G2Point[2] memory p2 = [a2, b2];\\n\\n    uint256[12] memory input;\\n\\n    for (uint256 i = 0; i < 2; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].X;\\n      input[j + 1] = p1[i].Y;\\n      input[j + 2] = p2[i].X[0];\\n      input[j + 3] = p2[i].X[1];\\n      input[j + 4] = p2[i].Y[0];\\n      input[j + 5] = p2[i].Y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, input, 0x180, out, 0x20)\\n    }\\n\\n    require(success, \\\"bn254-pairing-failed\\\");\\n\\n    return out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0xde5fed700088362d70190a779378ebba862a753bbb9c63eec58ef23aa7da537a\",\"license\":\"MIT\"},\"contracts/libraries/eigenda/DataLayrDisclosureLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./lib/contracts/interfaces/IDataLayrServiceManager.sol\\\";\\nimport \\\"./lib/contracts/libraries/Merkle.sol\\\";\\nimport \\\"./lib/contracts/libraries/BLS.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary DataLayrDisclosureLogic {\\n    uint256 constant MODULUS =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    struct MultiRevealProof {\\n        BN254.G1Point interpolationPoly;\\n        BN254.G1Point revealProof;\\n        BN254.G2Point zeroPoly;\\n        bytes zeroPolyProof;\\n    }\\n\\n    struct DataStoreKZGMetadata {\\n        BN254.G1Point c;\\n        uint48 degree;\\n        uint32 numSys;\\n        uint32 numPar;\\n    }\\n\\n    function getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader(\\n        // bytes calldata header\\n        bytes calldata header\\n    ) public pure returns (DataStoreKZGMetadata memory) {\\n        // return x, y coordinate of overall data poly commitment\\n        // then return degree of multireveal polynomial\\n        BN254.G1Point memory point;\\n        uint48 degree;\\n        uint32 numSys;\\n        uint32 numPar;\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := header.offset\\n            mstore(point, calldataload(pointer))\\n            mstore(add(point, 0x20), calldataload(add(pointer, 32)))\\n            //TODO: PUT THE LOW DEGREENESS PROOF HERE\\n            degree := shr(224, calldataload(add(pointer, 64)))\\n\\n            numSys := shr(224, calldataload(add(pointer, 68)))\\n            numPar := shr(224, calldataload(add(pointer, 72)))\\n        }\\n\\n        return\\n            DataStoreKZGMetadata({\\n                c: point,\\n                degree: degree,\\n                numSys: numSys,\\n                numPar: numPar\\n            });\\n    }\\n\\n    function getNumSysFromHeader(\\n        // bytes calldata header\\n        bytes calldata header\\n    ) internal pure returns (uint32) {\\n        uint32 numSys;\\n\\n        assembly {\\n            numSys := shr(224, calldataload(add(header.offset, 68)))\\n        }\\n\\n        return numSys;\\n    }\\n\\n    function getLeadingCosetIndexFromHighestRootOfUnity(\\n        uint32 i,\\n        uint32 numSys,\\n        uint32 numPar\\n    ) public pure returns (uint32) {\\n        uint32 numNode = numSys + numPar;\\n        uint32 numSysE = uint32(nextPowerOf2(numSys));\\n        uint32 ratio = numNode / numSys + (numNode % numSys == 0 ? 0 : 1);\\n        uint32 numNodeE = uint32(nextPowerOf2(numSysE * ratio));\\n\\n        if (i < numSys) {\\n            return\\n                (reverseBitsLimited(uint32(numNodeE), uint32(i)) * 256) /\\n                numNodeE;\\n        } else if (i < numNodeE - (numSysE - numSys)) {\\n            return\\n                (reverseBitsLimited(\\n                    uint32(numNodeE),\\n                    uint32((i - numSys) + numSysE)\\n                ) * 256) / numNodeE;\\n        } else {\\n            revert(\\\"Cannot create number of frame higher than possible\\\");\\n        }\\n    }\\n\\n    function reverseBitsLimited(uint32 length, uint32 value)\\n        public\\n        pure\\n        returns (uint32)\\n    {\\n        uint32 unusedBitLen = 32 - uint32(log2(length));\\n        return reverseBits(value) >> unusedBitLen;\\n    }\\n\\n    function reverseBits(uint32 value) public pure returns (uint32) {\\n        uint256 reversed = 0;\\n        for (uint i = 0; i < 32; i++) {\\n            uint256 mask = 1 << i;\\n            if (value & mask != 0) {\\n                reversed |= (1 << (31 - i));\\n            }\\n        }\\n        return uint32(reversed);\\n    }\\n\\n    //takes the log base 2 of n and returns it\\n    function log2(uint256 n) internal pure returns (uint256) {\\n        require(n > 0, \\\"Log must be defined\\\");\\n        uint256 log = 0;\\n        while (n >> log != 1) {\\n            log++;\\n        }\\n        return log;\\n    }\\n\\n    //finds the next power of 2 greater than n and returns it\\n    function nextPowerOf2(uint256 n) public pure returns (uint256) {\\n        uint256 res = 1;\\n        while (1 << res < n) {\\n            res++;\\n        }\\n        res = 1 << res;\\n        return res;\\n    }\\n\\n    // gets the merkle root of a tree where all the leaves are the hashes of the zero/vanishing polynomials of the given multireveal\\n    // degree at different roots of unity. We are assuming a max of 512 datalayr nodes  right now, so, for merkle root for \\\"degree\\\"\\n    // will be of the tree where the leaves are the hashes of the G2 kzg commitments to the following polynomials:\\n    // l = degree (for brevity)\\n    // w^(512*l) = 1\\n    // (s^l - 1), (s^l - w^l), (s^l - w^2l), (s^l - w^3l), (s^l - w^4l), ...\\n    // we have precomputed these values and return them directly because it's cheap. currently we\\n    // tolerate up to degree 2^10, which means up to (31 bytes/point)(1024 points/dln)(256 dln) = 8 MB in a datastore\\n    function getZeroPolyMerkleRoot(uint256 degree)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 log = log2(degree);\\n\\n        if (log == 0) {\\n            return\\n                0xe82cea94884b1b895ea0742840a3b19249a723810fd1b04d8564d675b0a416f1;\\n        } else if (log == 1) {\\n            return\\n                0x4843774a80fc8385b31024f5bd18b42e62de439206ab9468d42d826796d41f67;\\n        } else if (log == 2) {\\n            return\\n                0x092d3e5f87f5293e7ab0cc2ca6b0b5e4adb5e0011656544915f7cea34e69e5ab;\\n        } else if (log == 3) {\\n            return\\n                0x494b208540ec8624fbbb3f2c64ffccdaf6253f8f4e50c0d93922d88195b07755;\\n        } else if (log == 4) {\\n            return\\n                0xfdb44b84a82893cfa0e37a97f09ffc4298ad5e62be1bea1d03320ae836213d22;\\n        } else if (log == 5) {\\n            return\\n                0x3f50cb08231d2a76853ba9dbb20dad45a1b75c57cdaff6223bfe069752cff3d4;\\n        } else if (log == 6) {\\n            return\\n                0xbb39eebd8138eefd5802a49d571e65b3e0d4e32277c28fbf5fbca66e7fb04310;\\n        } else if (log == 7) {\\n            return\\n                0xf0a39b513e11fa80cbecbf352f69310eddd5cd03148768e0e9542bd600b133ec;\\n        } else if (log == 8) {\\n            return\\n                0x038cca2238865414efb752cc004fffec9e6069b709f495249cdf36efbd5952f6;\\n        } else if (log == 9) {\\n            return\\n                0x2a26b054ed559dd255d8ac9060ebf6b95b768d87de767f8174ad2f9a4e48dd01;\\n        } else if (log == 10) {\\n            return\\n                0x1fe180d0bc4ff7c69fefa595b3b5f3c284535a280f6fdcf69b20770d1e20e1fc;\\n        } else if (log == 11) {\\n            return\\n                0x60e34ad57c61cd6fdd8177437c30e4a30334e63d7683989570cf27020efc8201;\\n        } else if (log == 12) {\\n            return\\n                0xeda2417e770ddbe88f083acf06b6794dfb76301314a32bd0697440d76f6cd9cc;\\n        } else if (log == 13) {\\n            return\\n                0x8cbe9b8cf92ce70e3bec8e1e72a0f85569017a7e43c3db50e4a5badb8dea7ce8;\\n        } else {\\n            revert(\\\"Log not in valid range\\\");\\n        }\\n    }\\n\\n    // opens up kzg commitment c(x) at r and makes sure c(r) = s. proof (pi) is in G2 to allow for calculation of Z in G1\\n    function openPolynomialAtPoint(\\n        BN254.G1Point memory c,\\n        BN254.G2Point calldata pi,\\n        uint256 r,\\n        uint256 s\\n    ) public view returns (bool) {\\n        //we use and overwrite z as temporary storage\\n        //g1 = (1, 2)\\n        BN254.G1Point memory g1Gen = BN254.G1Point({X: 1, Y: 2});\\n        //calculate -g1*r = -[r]_1\\n        BN254.G1Point memory z = BN254.scalar_mul(BN254.negate(g1Gen), r);\\n\\n        //add [x]_1 - [r]_1 = Z and store in first 2 slots of input\\n        //CRITIC TODO: SWITCH THESE TO [x]_1 of Powers of Tau!\\n        BN254.G1Point memory firstPowerOfTau = BN254.G1Point({\\n            X: 15397661830938158195220872607788450164522003659458108417904919983213308643927,\\n            Y: 4051901473739185471504766068400292374549287637553596337727654132125147894034\\n        });\\n        z = BN254.plus(firstPowerOfTau, z);\\n        //calculate -g1*s = -[s]_1\\n        BN254.G1Point memory negativeS = BN254.scalar_mul(\\n            BN254.negate(g1Gen),\\n            s\\n        );\\n        //calculate C-[s]_1\\n        BN254.G1Point memory cMinusS = BN254.plus(c, negativeS);\\n        //-g2\\n        BN254.G2Point memory negativeG2 = BN254.G2Point({\\n            X: [BLS.nG2x1, BLS.nG2x0],\\n            Y: [BLS.nG2y1, BLS.nG2y0]\\n        });\\n\\n        //check e(z, pi)e(C-[s]_1, -g2) = 1\\n        return BN254.pairing(z, pi, cMinusS, negativeG2);\\n    }\\n\\n    function validateDisclosureResponse(\\n        DataStoreKZGMetadata memory dskzgMetadata,\\n        uint32 chunkNumber,\\n        BN254.G1Point calldata interpolationPoly,\\n        BN254.G1Point calldata revealProof,\\n        BN254.G2Point memory zeroPoly,\\n        bytes calldata zeroPolyProof\\n    ) public view returns (bool) {\\n        // check that [zeroPoly.x0, zeroPoly.x1, zeroPoly.y0, zeroPoly.y1] is actually the \\\"chunkNumber\\\" leaf\\n        // of the zero polynomial Merkle tree\\n\\n        {\\n            //deterministic assignment of \\\"y\\\" here\\n            // @todo\\n            require(\\n                Merkle.checkMembership(\\n                    // leaf\\n                    keccak256(\\n                        abi.encodePacked(\\n                            zeroPoly.X[1],\\n                            zeroPoly.X[0],\\n                            zeroPoly.Y[1],\\n                            zeroPoly.Y[0]\\n                        )\\n                    ),\\n                    // index in the Merkle tree\\n                    getLeadingCosetIndexFromHighestRootOfUnity(\\n                        chunkNumber,\\n                        dskzgMetadata.numSys,\\n                        dskzgMetadata.numPar\\n                    ),\\n                    // Merkle root hash\\n                    getZeroPolyMerkleRoot(dskzgMetadata.degree),\\n                    // Merkle proof\\n                    zeroPolyProof\\n                ),\\n                \\\"Incorrect zero poly merkle proof\\\"\\n            );\\n        }\\n\\n        /**\\n         Doing pairing verification  e(Pi(s), Z_k(s)).e(C - I, -g2) == 1\\n         */\\n        //get the commitment to the zero polynomial of multireveal degree\\n\\n        // calculate [C]_1 - [I]_1\\n        BN254.G1Point memory cMinusI = BN254.plus(\\n            dskzgMetadata.c,\\n            BN254.negate(interpolationPoly)\\n        );\\n        //-g2\\n        BN254.G2Point memory negativeG2 = BN254.G2Point({\\n            X: [BLS.nG2x1, BLS.nG2x0],\\n            Y: [BLS.nG2y1, BLS.nG2y0]\\n        });\\n\\n        //check e(z, pi)e(C-[s]_1, -g2) = 1\\n        return BN254.pairing(revealProof, zeroPoly, cMinusI, negativeG2);\\n    }\\n\\n    function nonInteractivePolynomialProof(\\n        bytes calldata header,\\n        uint32 chunkNumber,\\n        bytes calldata poly,\\n        MultiRevealProof calldata multiRevealProof,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) public view returns (bool) {\\n        DataStoreKZGMetadata\\n            memory dskzgMetadata = getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader(\\n                header\\n            );\\n\\n        //verify pairing for the commitment to interpolating polynomial\\n        require(\\n            validateDisclosureResponse(\\n                dskzgMetadata,\\n                chunkNumber,\\n                multiRevealProof.interpolationPoly,\\n                multiRevealProof.revealProof,\\n                multiRevealProof.zeroPoly,\\n                multiRevealProof.zeroPolyProof\\n            ),\\n            \\\"Reveal failed due to non 1 pairing\\\"\\n        );\\n\\n        // TODO: verify that this check is correct!\\n        // check that degree of polynomial in the header matches the length of the submitted polynomial\\n        // i.e. make sure submitted polynomial doesn't contain extra points\\n        require(\\n            (dskzgMetadata.degree + 1) * 32 == poly.length,\\n            \\\"Polynomial must have a 256 bit coefficient for each term\\\"\\n        );\\n\\n        //Calculating r, the point at which to evaluate the interpolating polynomial\\n        uint256 r = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    keccak256(poly),\\n                    multiRevealProof.interpolationPoly.X,\\n                    multiRevealProof.interpolationPoly.Y\\n                )\\n            )\\n        ) % MODULUS;\\n        uint256 s = linearPolynomialEvaluation(poly, r);\\n        return\\n            openPolynomialAtPoint(\\n                multiRevealProof.interpolationPoly,\\n                polyEquivalenceProof,\\n                r,\\n                s\\n            );\\n    }\\n\\n    function verifyPolyEquivalenceProof(\\n        bytes calldata poly,\\n        BN254.G1Point calldata interpolationPoly,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) public view returns (bool) {\\n        //Calculating r, the point at which to evaluate the interpolating polynomial\\n        uint256 r = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    keccak256(poly),\\n                    interpolationPoly.X,\\n                    interpolationPoly.Y\\n                )\\n            )\\n        ) % MODULUS;\\n        uint256 s = linearPolynomialEvaluation(poly, r);\\n        bool ok = openPolynomialAtPoint(\\n            interpolationPoly,\\n            polyEquivalenceProof,\\n            r,\\n            s\\n        );\\n        return ok;\\n    }\\n\\n    function verifyBatchPolyEquivalenceProof(\\n        bytes[] calldata polys,\\n        BN254.G1Point[] calldata interpolationPolys,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) public view returns (bool) {\\n        bytes32[] memory rs = new bytes32[](polys.length);\\n        //Calculating r, the point at which to evaluate the interpolating polynomial\\n        for (uint i = 0; i < polys.length; i++) {\\n            rs[i] = keccak256(\\n                abi.encodePacked(\\n                    keccak256(polys[i]),\\n                    interpolationPolys[i].X,\\n                    interpolationPolys[i].Y\\n                )\\n            );\\n        }\\n        //this is the point to open each polynomial at\\n        uint256 r = uint256(keccak256(abi.encodePacked(rs))) % MODULUS;\\n        //this is the offset we add to each polynomial to prevent collision\\n        //we use array to help with stack\\n        uint256[2] memory gammaAndGammaPower;\\n        gammaAndGammaPower[0] =\\n            uint256(keccak256(abi.encodePacked(rs, uint256(0)))) %\\n            MODULUS;\\n        gammaAndGammaPower[1] = gammaAndGammaPower[0];\\n        //store I1\\n        BN254.G1Point memory gammaShiftedCommitmentSum = interpolationPolys[0];\\n        //store I1(r)\\n        uint256 gammaShiftedEvaluationSum = linearPolynomialEvaluation(\\n            polys[0],\\n            r\\n        );\\n        for (uint i = 1; i < interpolationPolys.length; i++) {\\n            //gammaShiftedCommitmentSum += gamma^i * Ii\\n            gammaShiftedCommitmentSum = BN254.plus(\\n                gammaShiftedCommitmentSum,\\n                BN254.scalar_mul(interpolationPolys[i], gammaAndGammaPower[1])\\n            );\\n            //gammaShiftedEvaluationSum += gamma^i * Ii(r)\\n            uint256 eval = linearPolynomialEvaluation(polys[i], r);\\n            gammaShiftedEvaluationSum = addmod(\\n                gammaShiftedEvaluationSum,\\n                mulmod(gammaAndGammaPower[1], eval, MODULUS),\\n                MODULUS\\n            );\\n            // gammaPower = gamma^(i+1)\\n            gammaAndGammaPower[1] = mulmod(\\n                gammaAndGammaPower[0],\\n                gammaAndGammaPower[1],\\n                MODULUS\\n            );\\n        }\\n\\n        return\\n            openPolynomialAtPoint(\\n                gammaShiftedCommitmentSum,\\n                polyEquivalenceProof,\\n                r,\\n                gammaShiftedEvaluationSum\\n            );\\n    }\\n\\n    function batchNonInteractivePolynomialProofs(\\n        bytes calldata header,\\n        uint32 firstChunkNumber,\\n        bytes[] calldata polys,\\n        MultiRevealProof[] calldata multiRevealProofs,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) internal view returns (bool) {\\n        //randomness from each polynomial\\n        bytes32[] memory rs = new bytes32[](polys.length);\\n        DataStoreKZGMetadata\\n            memory dskzgMetadata = getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader(\\n                header\\n            );\\n        uint256 numProofs = multiRevealProofs.length;\\n        for (uint256 i = 0; i < numProofs; ) {\\n            //verify pairing for the commitment to interpolating polynomial\\n            require(\\n                validateDisclosureResponse(\\n                    dskzgMetadata,\\n                    firstChunkNumber + uint32(i),\\n                    multiRevealProofs[i].interpolationPoly,\\n                    multiRevealProofs[i].revealProof,\\n                    multiRevealProofs[i].zeroPoly,\\n                    multiRevealProofs[i].zeroPolyProof\\n                ),\\n                \\\"Reveal failed due to non 1 pairing\\\"\\n            );\\n\\n            // TODO: verify that this check is correct!\\n            // check that degree of polynomial in the header matches the length of the submitted polynomial\\n            // i.e. make sure submitted polynomial doesn't contain extra points\\n            require(\\n                dskzgMetadata.degree * 32 == polys[i].length,\\n                \\\"Polynomial must have a 256 bit coefficient for each term\\\"\\n            );\\n\\n            //Calculating r, the point at which to evaluate the interpolating polynomial\\n            rs[i] = keccak256(\\n                abi.encodePacked(\\n                    keccak256(polys[i]),\\n                    multiRevealProofs[i].interpolationPoly.X,\\n                    multiRevealProofs[i].interpolationPoly.Y\\n                )\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        //this is the point to open each polynomial at\\n        uint256 r = uint256(keccak256(abi.encodePacked(rs))) % MODULUS;\\n        //this is the offset we add to each polynomial to prevent collision\\n        //we use array to help with stack\\n        uint256[2] memory gammaAndGammaPower;\\n        gammaAndGammaPower[0] =\\n            uint256(keccak256(abi.encodePacked(rs, uint256(0)))) %\\n            MODULUS;\\n        gammaAndGammaPower[1] = gammaAndGammaPower[0];\\n        //store I1\\n        BN254.G1Point memory gammaShiftedCommitmentSum = multiRevealProofs[0]\\n            .interpolationPoly;\\n        //store I1(r)\\n        uint256 gammaShiftedEvaluationSum = linearPolynomialEvaluation(\\n            polys[0],\\n            r\\n        );\\n        for (uint i = 1; i < multiRevealProofs.length; i++) {\\n            //gammaShiftedCommitmentSum += gamma^i * Ii\\n            gammaShiftedCommitmentSum = BN254.plus(\\n                gammaShiftedCommitmentSum,\\n                BN254.scalar_mul(\\n                    multiRevealProofs[i].interpolationPoly,\\n                    gammaAndGammaPower[1]\\n                )\\n            );\\n            //gammaShiftedEvaluationSum += gamma^i * Ii(r)\\n            uint256 eval = linearPolynomialEvaluation(polys[i], r);\\n            gammaShiftedEvaluationSum = gammaShiftedEvaluationSum = addmod(\\n                gammaShiftedEvaluationSum,\\n                mulmod(gammaAndGammaPower[1], eval, MODULUS),\\n                MODULUS\\n            );\\n            // gammaPower = gamma^(i+1)\\n            gammaAndGammaPower[1] = mulmod(\\n                gammaAndGammaPower[0],\\n                gammaAndGammaPower[1],\\n                MODULUS\\n            );\\n        }\\n\\n        return\\n            openPolynomialAtPoint(\\n                gammaShiftedCommitmentSum,\\n                polyEquivalenceProof,\\n                r,\\n                gammaShiftedEvaluationSum\\n            );\\n    }\\n\\n    //evaluates the given polynomial \\\"poly\\\" at value \\\"r\\\" and returns the result\\n    function linearPolynomialEvaluation(bytes calldata poly, uint256 r)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 sum;\\n        uint256 length = poly.length;\\n        uint256 rPower = 1;\\n        for (uint i = 0; i < length; ) {\\n            uint256 coefficient = uint256(bytes32(poly[i:i + 32]));\\n            sum = addmod(sum, mulmod(coefficient, rPower, MODULUS), MODULUS);\\n            rPower = mulmod(rPower, r, MODULUS);\\n            i += 32;\\n        }\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x2c14be2328d90b975e49f5d4c7465c51732ef4c5576c5299fe122749ae20f9ee\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/Parse.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n\\ncontract Parser  {\\n    function parse(bytes[] calldata polys, uint256 startIndex, uint256 length) public returns(bytes memory) {\\n        bytes memory provenString;\\n        uint256 polyIndex = 0;\\n        uint256 index = startIndex;\\n        while(provenString.length < length) {\\n            //read till the beginning of the next 32 byte segment\\n            //or however many more bytes there are left in the fraud string\\n            //or till the end of the polynomial\\n            uint256 bytesToRead = min(\\n                32*(index/32 + 1) - index,\\n                length - provenString.length,\\n                polys[polyIndex].length - index\\n            );\\n            //append read bytes to the end of the proven string\\n            provenString = abi.encodePacked(provenString, polys[polyIndex][index:index+bytesToRead]);\\n            if(length <= provenString.length) {\\n                //if we have read same number of bytes in the fraud string, break\\n                break;\\n            } else if (index+bytesToRead == polys[polyIndex].length) {\\n                //if we finished reading the current polynomial so we move onto the next\\n                polyIndex++;\\n                index = 1;\\n            } else {\\n                //we have read readUntil bytes and add 1 more to skip the zero byte at the beginning of every 32 bytes\\n                index += bytesToRead + 1;\\n            }\\n        }\\n        return provenString;\\n    }\\n\\n    function min(uint256 a, uint256 b, uint256 c) internal pure returns(uint256) {\\n        return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);\\n    }\\n}\\n\",\"keccak256\":\"0x46c8f3cbf2fbc096179e8d62080df44b2796778742a48125a12afd2e17c08368\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IDataLayrPaymentManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IPaymentManager.sol\\\";\\nimport \\\"./IDataLayrServiceManager.sol\\\";\\n\\n/**\\n * @title Minimal interface extension to `IPaymentManager`.\\n * @author Layr Labs, Inc.\\n * @notice Adds a single DataLayr-specific function to the base interface.\\n */\\ninterface IDataLayrPaymentManager is IPaymentManager {\\n    /**\\n     * @notice Used to perform the final step in a payment challenge, in which the 'trueAmount' is determined and the winner of the challenge is decided.\\n     * This function is called by a party after the other party has bisected the challenged payments to a difference of one, i.e., further bisection\\n     * is not possible. Once the payments can no longer be bisected, the function resolves the challenge by determining who is wrong.\\n     */\\n    function respondToPaymentChallengeFinal(\\n        address operator,\\n        uint256 stakeIndex,\\n        uint48 nonSignerIndex,\\n        bytes32[] memory nonSignerPubkeyHashes,\\n        TotalStakes calldata totalStakes,\\n        IDataLayrServiceManager.DataStoreSearchData calldata searchData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfeec6908770cbd28763084b44c316c0e401605d30b7079f2d1db3a8499783957\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IDataLayrServiceManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IServiceManager.sol\\\";\\nimport \\\"./IEigenLayrDelegation.sol\\\";\\nimport \\\"./IDataLayrPaymentManager.sol\\\";\\n\\ninterface IDataLayrServiceManager is IServiceManager {\\n    //Relevant metadata for a given datastore\\n    struct DataStoreMetadata {\\n        bytes32 headerHash;\\n        uint32 durationDataStoreId;\\n        uint32 globalDataStoreId;\\n        uint32 blockNumber;\\n        uint96 fee;\\n        address confirmer;\\n        bytes32 signatoryRecordHash;\\n    }\\n\\n    //Stores the data required to index a given datastore's metadata\\n    struct DataStoreSearchData {\\n        DataStoreMetadata metadata;\\n        uint8 duration;\\n        uint256 timestamp;\\n        uint32 index;\\n    }\\n\\n    struct SignatoryRecordMinusDataStoreId {\\n        bytes32[] nonSignerPubkeyHashes;\\n        uint256 signedStakeFirstQuorum;\\n        uint256 signedStakeSecondQuorum;\\n    }\\n\\n    struct DataStoresForDuration {\\n        uint32 one_duration;\\n        uint32 two_duration;\\n        uint32 three_duration;\\n        uint32 four_duration;\\n        uint32 five_duration;\\n        uint32 six_duration;\\n        uint32 seven_duration;\\n        uint32 dataStoreId;\\n        uint32 latestTime;\\n    }\\n\\n    struct DataStoreHashInputs {\\n        bytes32 headerHash;\\n        uint32 dataStoreId;\\n        uint32 blockNumber;\\n        uint256 fee;\\n    }\\n\\n    /**\\n     * @notice This function is used for\\n     * - notifying via Ethereum that the disperser has asserted the data blob\\n     * into DataLayr and is waiting to obtain quorum of DataLayr operators to sign,\\n     * - asserting the metadata corresponding to the data asserted into DataLayr\\n     * - escrow the service fees that DataLayr operators will receive from the disperser\\n     * on account of their service.\\n     *\\n     * This function returns the index of the data blob in dataStoreIdsForDuration[duration][block.timestamp]\\n     */\\n    /**\\n     * @param feePayer is the address that will be paying the fees for this datastore. check DataLayrPaymentManager for further details\\n     * @param confirmer is the address that must confirm the datastore\\n     * @param header is the summary of the data that is being asserted into DataLayr,\\n     *  type DataStoreHeader struct {\\n     *   KzgCommit      [64]byte\\n     *   Degree         uint32 \\n     *   NumSys         uint32\\n     *   NumPar         uint32\\n     *   OrigDataSize   uint32 \\n     *   Disperser      [20]byte\\n     *   LowDegreeProof [64]byte \\n     *  }\\n     * @param duration for which the data has to be stored by the DataLayr operators.\\n     * This is a quantized parameter that describes how many factors of DURATION_SCALE\\n     * does this data blob needs to be stored. The quantization process comes from ease of\\n     * implementation in DataLayrBombVerifier.sol.\\n     * @param blockNumber is the block number in Ethereum for which the confirmation will\\n     * consult total + operator stake amounts.\\n     * -- must not be more than 'BLOCK_STALE_MEASURE' (defined in DataLayr) blocks in past\\n     * @return index The index in the array `dataStoreHashesForDurationAtTimestamp[duration][block.timestamp]` at which the DataStore's hash was stored.\\n     */\\n    function initDataStore(\\n        address feePayer,\\n        address confirmer,\\n        uint8 duration,\\n        uint32 blockNumber,\\n        uint32 totalOperatorsIndex,\\n        bytes calldata header\\n    )\\n        external\\n        returns (uint32);\\n\\n    /**\\n     * @notice This function is used for\\n     * - disperser to notify that signatures on the message, comprising of hash( headerHash ),\\n     * from quorum of DataLayr nodes have been obtained,\\n     * - check that the aggregate signature is valid,\\n     * - and check whether quorum has been achieved or not.\\n     */\\n    /**\\n     * @param data Input to the `checkSignatures` function, which is of the format:\\n     * <\\n     * bytes32 msgHash,\\n     * uint48 index of the totalStake corresponding to the dataStoreId in the 'totalStakeHistory' array of the BLSRegistryWithBomb\\n     * uint32 numberOfNonSigners,\\n     * uint256[numberOfSigners][4] pubkeys of nonsigners,\\n     * uint32 apkIndex,\\n     * uint256[4] apk,\\n     * uint256[2] sigma\\n     * >\\n     */\\n    function confirmDataStore(bytes calldata data, DataStoreSearchData memory searchData) external;\\n\\n    /// @notice number of leaves in the root tree\\n    function numPowersOfTau() external view returns (uint48);\\n\\n    /// @notice number of layers in the root tree\\n    function log2NumPowersOfTau() external view returns (uint48);\\n\\n    /// @notice Unit of measure (in time) for the duration of DataStores\\n    function DURATION_SCALE() external view returns (uint256);\\n\\n    /// @notice The longest allowed duation of a DataStore, measured in `DURATION_SCALE`\\n    function MAX_DATASTORE_DURATION() external view returns (uint8);\\n\\n    /// @notice Returns the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp`.\\n    function getDataStoreHashesForDurationAtTimestamp(uint8 duration, uint256 timestamp, uint32 index)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice returns the number of data stores for the @param duration\\n     */\\n    function getNumDataStoresForDuration(uint8 duration) external view returns (uint32);\\n\\n    /// @notice Collateral token used for placing collateral on challenges & payment commits\\n    function collateralToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice contract used for handling payment challenges\\n     */\\n    function dataLayrPaymentManager() external view returns (IDataLayrPaymentManager);\\n\\n    /**\\n     * @notice Checks that the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp` matches the supplied `metadata`.\\n     * Returns 'true' if the metadata matches the hash, and 'false' otherwise.\\n     */\\n   function verifyDataStoreMetadata(uint8 duration, uint256 timestamp, uint32 index, DataStoreMetadata memory metadata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6e9c5a450a2425534ac5863eca54326ae846ce53388d0e4633dd64a1d1bb8108\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IDelegationTerms.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IInvestmentStrategy.sol\\\";\\n\\n/**\\n * @title Abstract interface for a contract that helps structure the delegation relationship.\\n * @author Layr Labs, Inc.\\n * @notice The gas budget provided to this contract in calls from EigenLayr contracts is limited.\\n */\\n//TODO: discuss if we can structure the inputs of these functions better\\ninterface IDelegationTerms {\\n    function payForService(IERC20 token, uint256 amount) external payable;\\n\\n    function onDelegationWithdrawn(\\n        address delegator,\\n        IInvestmentStrategy[] memory investorStrats,\\n        uint256[] memory investorShares\\n    ) external;\\n\\n    // function onDelegationReceived(\\n    //     address delegator,\\n    //     uint256[] memory investorShares\\n    // ) external;\\n\\n    function onDelegationReceived(\\n        address delegator,\\n        IInvestmentStrategy[] memory investorStrats,\\n        uint256[] memory investorShares\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5e7db2c8e3cb2cf7d7a19f8f7be16efacfd1b709dfcd2f5bd2b32174812acc37\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IEigenLayrDelegation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationTerms.sol\\\";\\n\\n/**\\n * @title Interface for the primary delegation contract for EigenLayr.\\n * @author Layr Labs, Inc.\\n * @notice See the `EigenLayrDelegation` contract itself for implementation details.\\n */\\ninterface IEigenLayrDelegation {\\n    enum DelegationStatus {\\n        UNDELEGATED,\\n        DELEGATED\\n    }\\n\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param dt is the `DelegationTerms` contract that the operator has for those who delegate to them.\\n     * @dev An operator can set `dt` equal to their own address (or another EOA address), in the event that they want to split payments\\n     * in a more 'trustful' manner.\\n     * @dev In the present design, once set, there is no way for an operator to ever modify the address of their DelegationTerms contract.\\n     */\\n    function registerAsOperator(IDelegationTerms dt) external;\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external;\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that r, vs are a valid ECSDA signature from `staker` indicating their intention for this action\\n     */\\n    function delegateToBySignature(address staker, address operator, uint256 expiry, bytes32 r, bytes32 vs) external;\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the InvestmentManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits in EigenLayer.\\n     */\\n    function undelegate(address staker) external;\\n\\n    /// @notice returns the address of the operator that `staker` is delegated to.\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /// @notice returns the DelegationTerms of the `operator`, which may mediate their interactions with stakers who delegate to them.\\n    function delegationTerms(address operator) external view returns (IDelegationTerms);\\n\\n    /// @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n    function operatorShares(address operator, IInvestmentStrategy strategy) external view returns (uint256);\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) external returns (bool);\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker has further deposits into EigenLayr\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function increaseDelegatedShares(address staker, IInvestmentStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker withdraws from EigenLayr\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function decreaseDelegatedShares(address staker, IInvestmentStrategy strategy, uint256 shares) external;\\n\\n    /// @notice Version of `decreaseDelegatedShares` that accepts an array of inputs.\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IInvestmentStrategy[] calldata strategies,\\n        uint256[] calldata shares\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd155bcd62c3c7a2a01eb57a729ef62fd817f968a8bc322e7e5b47a3008bf84ad\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IInvestmentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `InvestmentStrategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Custom `InvestmentStrategy` implementations may expand extensively on this interface.\\n */\\ninterface IInvestmentStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this InvestmentStrategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the investmentManager contract. It is invoked inside of the investmentManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the investmentManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this InvestmentStrategy, to the `depositor`'s address\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the investmentManager contract. It is invoked inside of the investmentManager's\\n     * other functions, and individual share balances are recorded in the investmentManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n     /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underyling token for shares in this InvestmentStrategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in thie InvestmentStrategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x69eb667cc856ee1fe783243b6db21a43a9dadd29bf6761727b334fca4366bceb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IPaymentManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRepositoryAccess.sol\\\";\\n\\n/**\\n * @title Interface for a `PaymentManager` contract.\\n * @author Layr Labs, Inc.\\n */\\ninterface IPaymentManager is IRepositoryAccess {\\n    enum DissectionType {\\n        INVALID,\\n        FIRST_HALF,\\n        SECOND_HALF\\n    }\\n    enum PaymentStatus {\\n        REDEEMED,\\n        COMMITTED,\\n        CHALLENGED\\n    }\\n    enum ChallengeStatus {\\n        RESOLVED,\\n        OPERATOR_TURN,\\n        CHALLENGER_TURN,\\n        OPERATOR_TURN_ONE_STEP,\\n        CHALLENGER_TURN_ONE_STEP\\n    }\\n\\n    /**\\n     * @notice used for storing information on the most recent payment made to the operator\\n     */\\n    struct Payment {\\n        // taskNumber starting from which payment is being claimed\\n        uint32 fromTaskNumber;\\n        // taskNumber until which payment is being claimed (exclusive)\\n        uint32 toTaskNumber;\\n        // recording when the payment will optimistically be confirmed; used for fraudproof period\\n        uint32 confirmAt;\\n        // payment for range [fromTaskNumber, toTaskNumber)\\n        /// @dev max 1.3e36, keep in mind for token decimals\\n        uint96 amount;\\n        /**\\n         * @notice The possible statuses are:\\n         * - 0: REDEEMED,\\n         * - 1: COMMITTED,\\n         * - 2: CHALLENGED\\n         */\\n        PaymentStatus status;\\n        uint256 collateral; //account for if collateral changed\\n    }\\n\\n    /**\\n     * @notice used for storing information on the payment challenge as part of the interactive process\\n     */\\n    struct PaymentChallenge {\\n        // operator whose payment claim is being challenged,\\n        address operator;\\n        // the entity challenging with the fraudproof\\n        address challenger;\\n        // address of the service manager contract\\n        address serviceManager;\\n        // the TaskNumber from which payment has been computed\\n        uint32 fromTaskNumber;\\n        // the TaskNumber until which payment has been computed to\\n        uint32 toTaskNumber;\\n        // reward amount the challenger claims is for the first half of tasks\\n        uint96 amount1;\\n        // reward amount the challenger claims is for the second half of tasks\\n        uint96 amount2;\\n        // used for recording the time when challenge was created\\n        uint32 settleAt; // when committed, used for fraudproof period\\n        // indicates the status of the challenge\\n        /**\\n         * @notice The possible statuses are:\\n         * - 0: RESOLVED,\\n         * - 1: operator turn (dissection),\\n         * - 2: challenger turn (dissection),\\n         * - 3: operator turn (one step),\\n         * - 4: challenger turn (one step)\\n         */\\n        ChallengeStatus status;\\n    }\\n\\n    struct TotalStakes {\\n        uint256 signedStakeFirstQuorum;\\n        uint256 signedStakeSecondQuorum;\\n    }\\n\\n    /**\\n     * @notice deposit one-time fees by the `msg.sender` with this contract to pay for future tasks of this middleware\\n     * @param onBehalfOf could be the `msg.sender` themselves, or a different address for whom `msg.sender` is depositing these future fees\\n     * @param amount is amount of futures fees being deposited\\n     */\\n    function depositFutureFees(address onBehalfOf, uint256 amount) external;\\n\\n    /// @notice Allows the `allowed` address to spend up to `amount` of the `msg.sender`'s funds that have been deposited in this contract\\n    function setAllowance(address allowed, uint256 amount) external;\\n\\n    /// @notice Used for deducting the fees from the payer to the middleware\\n    function payFee(address initiator, address payer, uint256 feeAmount) external;\\n\\n    /**\\n     * @notice Modifies the `paymentFraudproofCollateral` amount.\\n     * @param _paymentFraudproofCollateral The new value for `paymentFraudproofCollateral` to take.\\n     */\\n    function setPaymentFraudproofCollateral(uint256 _paymentFraudproofCollateral) external;\\n\\n    /**\\n     * @notice This is used by an operator to make a claim on the amount that they deserve for their service from their last payment until `toTaskNumber`\\n     * @dev Once this payment is recorded, a fraud proof period commences during which a challenger can dispute the proposed payment.\\n     */\\n    function commitPayment(uint32 toTaskNumber, uint96 amount) external;\\n\\n    /**\\n     * @notice Called by an operator to redeem a payment that they previously 'committed' to by calling `commitPayment`.\\n     * @dev This function can only be called after the challenge window for the payment claim has completed.\\n     */\\n    function redeemPayment() external;\\n\\n    /**\\n     * @notice This function is called by a fraud prover to challenge a payment, initiating an interactive-type fraudproof.\\n     * @param operator is the operator against whose payment claim the fraudproof is being made\\n     * @param amount1 is the reward amount the challenger in that round claims is for the first half of tasks\\n     * @param amount2 is the reward amount the challenger in that round claims is for the second half of tasks\\n     *\\n     */\\n    function initPaymentChallenge(address operator, uint96 amount1, uint96 amount2) external;\\n\\n    /**\\n     * @notice Perform a single bisection step in an existing interactive payment challenge.\\n     * @param operator The middleware operator who was challenged (used to look up challenge details)\\n     * @param secondHalf If true, then the caller wishes to challenge the amount claimed as payment in the *second half* of the\\n     * previous bisection step. If false then the *first half* is indicated instead.\\n     * @param amount1 The amount that the caller asserts the operator is entitled to, for the first half *of the challenged half* of the previous bisection.\\n     * @param amount2 The amount that the caller asserts the operator is entitled to, for the second half *of the challenged half* of the previous bisection.\\n     */\\n    function performChallengeBisectionStep(address operator, bool secondHalf, uint96 amount1, uint96 amount2)\\n        external;\\n\\n    /// @notice resolve an existing PaymentChallenge for an operator\\n    function resolveChallenge(address operator) external;\\n\\n    /**\\n     * @notice Challenge window for submitting fraudproof in the case of an incorrect payment claim by a registered operator.\\n     */\\n    function paymentFraudproofInterval() external view returns (uint256);\\n\\n    /**\\n     * @notice Specifies the payment that has to be made as a collateral for fraudproof during payment challenges.\\n     */\\n    function paymentFraudproofCollateral() external view returns (uint256);\\n\\n    /// @notice the ERC20 token that will be used by the disperser to pay the service fees to middleware nodes.\\n    function paymentToken() external view returns (IERC20);\\n\\n    /// @notice Collateral token used for placing collateral on challenges & payment commits\\n    function collateralToken() external view returns (IERC20);\\n\\n    /// @notice Returns the ChallengeStatus for the `operator`'s payment claim.\\n    function getChallengeStatus(address operator) external view returns (ChallengeStatus);\\n\\n    /// @notice Returns the 'amount1' for the `operator`'s payment claim.\\n    function getAmount1(address operator) external view returns (uint96);\\n\\n    /// @notice Returns the 'amount2' for the `operator`'s payment claim.\\n    function getAmount2(address operator) external view returns (uint96);\\n\\n    /// @notice Returns the 'toTaskNumber' for the `operator`'s payment claim.\\n    function getToTaskNumber(address operator) external view returns (uint48);\\n\\n    /// @notice Returns the 'fromTaskNumber' for the `operator`'s payment claim.\\n    function getFromTaskNumber(address operator) external view returns (uint48);\\n\\n    /// @notice Returns the task number difference for the `operator`'s payment claim.\\n    function getDiff(address operator) external view returns (uint48);\\n\\n    /// @notice Returns the active collateral of the `operator` placed on their payment claim.\\n    function getPaymentCollateral(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcfc3e77f3fee87f0563f2b9d510b7bd86d40bd79b0c03cb3ff2a0de95ab3edca\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Minimal interface for a `Registry`-type contract.\\n * @author Layr Labs, Inc.\\n * @notice Functions related to the registration process itself have been intentionally excluded\\n * because their function signatures may vary significantly.\\n */\\ninterface IRegistry {\\n    /// @notice Returns 'true' if `operator` is registered as an active operator, and 'false' otherwise.\\n    function isActiveOperator(address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bd8be0f70b0e69f94e069c52417079ba2b9e73acd5f659c09b22142dc6c59f5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IServiceManager.sol\\\";\\nimport \\\"./IVoteWeigher.sol\\\";\\nimport \\\"./IRegistry.sol\\\";\\n\\n/**\\n * @title This is the interface for the `Repository` contract.\\n * @author Layr Labs, Inc.\\n */\\ninterface IRepository {\\n    /// @notice returns voteWeigher contract for the middleware\\n    function voteWeigher() external view returns (IVoteWeigher);\\n\\n    /// @notice returns serviceManager contract for the middleware\\n    function serviceManager() external view returns (IServiceManager);\\n\\n    /// @notice returns registry contract for the middleware\\n    function registry() external view returns (IRegistry);\\n\\n    /// @notice returns owner of the middleware\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9c1f6f909a88a8d580617e260c3d7dc7aa4a8e98b7c6ca9ea0e662f9cf7b2f6b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IRepositoryAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRepository.sol\\\";\\n\\n/**\\n * @title This is the interface for the `RepositoryAccess` contract.\\n * @author Layr Labs, Inc.\\n */\\ninterface IRepositoryAccess {\\n    function repository() external view returns (IRepository);\\n}\\n\",\"keccak256\":\"0x9d514d7faa77ef3ffba1c446db5542d4fad0287575e7f7bcf9337b1fc268fc6d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IServiceManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEigenLayrDelegation.sol\\\";\\n\\n/**\\n * @title Interface for a `ServiceManager`-type contract.\\n * @author Layr Labs, Inc.\\n */\\n// TODO: provide more functions for this spec\\ninterface IServiceManager {\\n    /// @notice Returns the current 'taskNumber' for the middleware\\n    function taskNumber() external view returns (uint32);\\n\\n    /// @notice Permissioned function that causes the ServiceManager to freeze the operator on EigenLayer, through a call to the Slasher contreact\\n    function freezeOperator(address operator) external;\\n\\n    /// @notice Permissioned function that causes the ServiceManager to revoke its ability to slash the operator on EigenLayer, through a call to the Slasher contreact\\n    function revokeSlashingAbility(address operator, uint32 unbondedAfter) external;\\n\\n    /// @notice Collateral token used for placing collateral on challenges & payment commits\\n    function collateralToken() external view returns (IERC20);\\n\\n    /// @notice The Delegation contract of EigenLayer.\\n    function eigenLayrDelegation() external view returns (IEigenLayrDelegation);\\n\\n    /**\\n     * @notice Verifies that a task for this middleware exists which was created *at or before* `initTimestamp` *AND* that expires *strictly prior to* the\\n     * specified `unlockTime`.\\n     * @dev Function reverts if the verification fails.\\n     */\\n    function stakeWithdrawalVerification(bytes calldata data, uint256 initTimestamp, uint256 unlockTime)\\n        external\\n        view;\\n\\n    /// @notice Returns the `latestTime` until which operators must serve.\\n    function latestTime() external view returns (uint32);\\n}\",\"keccak256\":\"0x341ebf04eb799f695ce411087538ea8678268d58819b2640c73d01a0f245258f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/interfaces/IVoteWeigher.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for a `VoteWeigher`-type contract.\\n * @author Layr Labs, Inc.\\n * @notice Note that `NUMBER_OF_QUORUMS` is expected to remain constant, as suggested by its uppercase formatting.\\n */\\ninterface IVoteWeigher {\\n    /**\\n     * @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\\n     * @dev returns zero in the case that `quorumNumber` is greater than or equal to `NUMBER_OF_QUORUMS`\\n     */\\n    function weightOfOperator(address operator, uint256 quorumNumber) external returns (uint96);\\n\\n    /// @notice Number of quorums that are being used by the middleware.\\n    function NUMBER_OF_QUORUMS() external view returns (uint256);\\n\\n    /**\\n     * @notice This defines the earnings split between different quorums. Mapping is quorumNumber => BIPS which the quorum earns, out of the total earnings.\\n     * @dev The sum of all entries, i.e. sum(quorumBips[0] through quorumBips[NUMBER_OF_QUORUMS - 1]) should *always* be 10,000!\\n     */\\n    function quorumBips(uint256 quorumNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d8068106dc1bc924e15cb4f8ae1c2f1b86bd3c6de1ce947081774225da63ad0\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/libraries/BLS.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED AND MIT\\n// several functions are from https://github.com/ChihChengLiang/bls_solidity_python/blob/master/contracts/BLS.sol (MIT license)\\n// remainder is UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Library for operations related to BLS Signatures used in EigenLayer middleware.\\n * @author Layr Labs, Inc. with credit to Chih Cheng Liang\\n * @notice Uses the BN254 curve.\\n */\\nlibrary BLS {\\n    // BN 254 CONSTANTS\\n    // modulus for the underlying field F_q of the elliptic curve\\n    uint256 internal constant MODULUS = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // negation of the generator of group G2\\n    /**\\n     * @dev Generator point lies in F_q2 is of the form: (x0 + ix1, y0 + iy1).\\n     */\\n    uint256 internal constant nG2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 internal constant nG2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 internal constant nG2y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\\n    uint256 internal constant nG2y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\\n\\n    // generator of group G2\\n    /**\\n     * @dev Generator point lies in F_q2 is of the form: (x0 + ix1, y0 + iy1).\\n     */\\n    uint256 internal constant G2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 internal constant G2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 internal constant G2y1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 internal constant G2y0 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    bytes32 internal constant powersOfTauMerkleRoot = 0x22c998e49752bbb1918ba87d6d59dd0e83620a311ba91dd4b2cc84990b31b56f;\\n\\n    function hashPubkey(uint256[4] memory pk) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(pk[0], pk[1], pk[2], pk[3]));\\n    }\\n\\n    function hashPubkey(uint256[6] memory pk) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(pk[0], pk[1], pk[2], pk[3]));\\n    }\\n\\n    /**\\n     * @notice verification of BLS signature with the message being pubkey hash\\n     */\\n    /**\\n     * @dev first paramater, data, is the calldata that contains the coordinates for pubkey on G2 and signature on G1\\n     * @return pubkey is the pubkey and is of the format [x1, x0, y1, y0]\\n     */\\n    function verifyBLSSigOfPubKeyHash(bytes calldata data, address operator)\\n        internal\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        // uint256 offset = 68;\\n        // e(H(m), pk)e(sigma, -g2) = e(H(m), pk)(e(sigma, g2)^-1) == 1?\\n        // is the same as\\n        // e(H(m), pk) == e(sigma, g2)?\\n        uint256[12] memory input;\\n\\n        assembly {\\n            //store pk in indexes 2-5, it is a G2 point\\n            mstore(add(input, 0x40), calldataload(data.offset))\\n            mstore(add(input, 0x60), calldataload(add(data.offset, 32)))\\n            mstore(add(input, 0x80), calldataload(add(data.offset, 64)))\\n            mstore(add(input, 0xA0), calldataload(add(data.offset, 96)))\\n            //store sigma (signature) in indexes 6-7, it is a G1 point\\n            mstore(add(input, 0xC0), calldataload(add(data.offset, 128)))\\n            mstore(add(input, 0xE0), calldataload(add(data.offset, 160)))\\n            //store the negated G2 generator in indexes 8-11\\n            mstore(add(input, 0x100), nG2x1)\\n            mstore(add(input, 0x120), nG2x0)\\n            mstore(add(input, 0x140), nG2y1)\\n            mstore(add(input, 0x160), nG2y0)\\n        }\\n\\n        // calculate H(m) = H(pk)\\n        (input[0], input[1]) = hashToG1(keccak256(abi.encodePacked(input[2], input[3], input[4], input[5], operator)));\\n\\n        assembly {\\n            // check the pairing\\n            if iszero(\\n                // call ecPairing precompile with 384 bytes of data,\\n                // i.e. input[0] through (including) input[11], and get 32 bytes of return data\\n                staticcall(not(0), 0x08, input, 0x180, add(input, 0x20), 0x20)\\n            ) { revert(0, 0) }\\n        }\\n\\n        require(input[1] == 1, \\\"Pairing was unsuccessful\\\");\\n\\n        // return pubkey, the format being [x1, x0, y1, y0]\\n        return (input[3], input[2], input[5], input[4]);\\n    }\\n\\n    /**\\n     * @notice same function as AddAssign in https://github.com/ConsenSys/gnark-crypto/blob/master/ecc/bn254/g2.go\\n     */\\n    function addJac(uint256[6] memory jac1, uint256[6] memory jac2) internal pure returns (uint256[6] memory) {\\n        //NOTE: JAC IS REFERRED TO AS X, Y, Z\\n        //ALL 2 ELEMENTS EACH\\n        // var XX, YY, YYYY, ZZ, S, M, T fptower.E2\\n\\n        if (jac1[4] == 0 && jac1[5] == 0) {\\n            // on point 1 being a point at infinity\\n            return jac2;\\n        } else if (jac2[4] == 0 && jac2[5] == 0) {\\n            // on point 2 being a point at infinity\\n            return jac1;\\n        }\\n\\n        // var Z1Z1, Z2Z2, U1, U2, S1, S2, H, I, J, r, V fptower.E2\\n        //z1z1 = a.z^2\\n        uint256[4] memory z1z1z2z2;\\n        (z1z1z2z2[0], z1z1z2z2[1]) = square(jac2[4], jac2[5]);\\n        //z2z2 = p.z^2\\n        // uint256[2] memory z2z2;\\n        (z1z1z2z2[2], z1z1z2z2[3]) = square(jac1[4], jac1[5]);\\n        //u1 = a.x*z2z2\\n        uint256[4] memory u1u2;\\n        (u1u2[0], u1u2[1]) = mul(jac2[0], jac2[1], z1z1z2z2[2], z1z1z2z2[3]);\\n        //u2 = p.x*z1z1\\n        // uint256[2] memory u2;\\n        (u1u2[2], u1u2[3]) = mul(jac1[0], jac1[1], z1z1z2z2[0], z1z1z2z2[1]);\\n        //s1 = a.y*p.z*z2z2\\n        uint256[2] memory s1;\\n        (s1[0], s1[1]) = mul(jac2[2], jac2[3], jac1[4], jac1[5]);\\n        (s1[0], s1[1]) = mul(s1[0], s1[1], z1z1z2z2[2], z1z1z2z2[3]);\\n\\n        //s2 = p.y*a.z*z1z1\\n        uint256[2] memory s2;\\n        (s2[0], s2[1]) = mul(jac1[2], jac1[3], jac2[4], jac2[5]);\\n        (s2[0], s2[1]) = mul(s2[0], s2[1], z1z1z2z2[0], z1z1z2z2[1]);\\n\\n        // // if p == a, we double instead, is this too inefficient?\\n        // // if (u1[0] == 0 && u1[1] == 0 && u2[0] == 0 && u2[1] == 0) {\\n        // //     return p.DoubleAssign()\\n        // // } else {\\n\\n        // // }\\n\\n        uint256[2] memory h;\\n        uint256[2] memory i;\\n\\n        assembly {\\n            //h = u2 - u1\\n            mstore(h, addmod(mload(add(u1u2, 0x040)), sub(MODULUS, mload(u1u2)), MODULUS))\\n            mstore(add(h, 0x20), addmod(mload(add(u1u2, 0x60)), sub(MODULUS, mload(add(u1u2, 0x20))), MODULUS))\\n\\n            //i = 2h\\n            mstore(i, mulmod(mload(h), 2, MODULUS))\\n            mstore(add(i, 0x20), mulmod(mload(add(h, 0x20)), 2, MODULUS))\\n        }\\n\\n        (i[0], i[1]) = square(i[0], i[1]);\\n\\n        uint256[2] memory j;\\n        (j[0], j[1]) = mul(h[0], h[1], i[0], i[1]);\\n\\n        uint256[2] memory r;\\n        assembly {\\n            //r = s2 - s1\\n            mstore(r, addmod(mload(s2), sub(MODULUS, mload(s1)), MODULUS))\\n            mstore(add(r, 0x20), addmod(mload(add(s2, 0x20)), sub(MODULUS, mload(add(s1, 0x20))), MODULUS))\\n\\n            //r *= 2\\n            mstore(r, mulmod(mload(r), 2, MODULUS))\\n            mstore(add(r, 0x20), mulmod(mload(add(r, 0x20)), 2, MODULUS))\\n        }\\n\\n        uint256[2] memory v;\\n        (v[0], v[1]) = mul(u1u2[0], u1u2[1], i[0], i[1]);\\n\\n        (jac1[0], jac1[1]) = square(r[0], r[1]);\\n\\n        assembly {\\n            //x -= j\\n            mstore(jac1, addmod(mload(jac1), sub(MODULUS, mload(j)), MODULUS))\\n            mstore(add(jac1, 0x20), addmod(mload(add(jac1, 0x20)), sub(MODULUS, mload(add(j, 0x20))), MODULUS))\\n            //x -= v\\n            mstore(jac1, addmod(mload(jac1), sub(MODULUS, mload(v)), MODULUS))\\n            mstore(add(jac1, 0x20), addmod(mload(add(jac1, 0x20)), sub(MODULUS, mload(add(v, 0x20))), MODULUS))\\n            //x -= v\\n            mstore(jac1, addmod(mload(jac1), sub(MODULUS, mload(v)), MODULUS))\\n            mstore(add(jac1, 0x20), addmod(mload(add(jac1, 0x20)), sub(MODULUS, mload(add(v, 0x20))), MODULUS))\\n            //y = v - x\\n            mstore(add(jac1, 0x40), addmod(mload(v), sub(MODULUS, mload(jac1)), MODULUS))\\n            mstore(add(jac1, 0x60), addmod(mload(add(v, 0x20)), sub(MODULUS, mload(add(jac1, 0x20))), MODULUS))\\n        }\\n\\n        (jac1[2], jac1[3]) = mul(jac1[2], jac1[3], r[0], r[1]);\\n        (s1[0], s1[1]) = mul(s1[0], s1[1], j[0], j[1]);\\n\\n        assembly {\\n            //s1 *= 2\\n            mstore(s1, mulmod(mload(s1), 2, MODULUS))\\n            mstore(add(s1, 0x20), mulmod(mload(add(s1, 0x20)), 2, MODULUS))\\n            //y -= s1\\n            mstore(add(jac1, 0x40), addmod(mload(add(jac1, 0x40)), sub(MODULUS, mload(s1)), MODULUS))\\n            mstore(add(jac1, 0x60), addmod(mload(add(jac1, 0x60)), sub(MODULUS, mload(add(s1, 0x20))), MODULUS))\\n            //z = a.z + p.z\\n            mstore(add(jac1, 0x80), addmod(mload(add(jac1, 0x80)), mload(add(jac2, 0x80)), MODULUS))\\n            mstore(add(jac1, 0xA0), addmod(mload(add(jac1, 0xA0)), mload(add(jac2, 0xA0)), MODULUS))\\n        }\\n\\n        (jac1[4], jac1[5]) = square(jac1[4], jac1[5]);\\n\\n        assembly {\\n            //z -= z1z1\\n            mstore(add(jac1, 0x80), addmod(mload(add(jac1, 0x80)), sub(MODULUS, mload(z1z1z2z2)), MODULUS))\\n            mstore(add(jac1, 0xA0), addmod(mload(add(jac1, 0xA0)), sub(MODULUS, mload(add(z1z1z2z2, 0x20))), MODULUS))\\n            //z -= z2z2\\n            mstore(add(jac1, 0x80), addmod(mload(add(jac1, 0x80)), sub(MODULUS, mload(add(z1z1z2z2, 0x40))), MODULUS))\\n            mstore(add(jac1, 0xA0), addmod(mload(add(jac1, 0xA0)), sub(MODULUS, mload(add(z1z1z2z2, 0x60))), MODULUS))\\n        }\\n\\n        (jac1[4], jac1[5]) = mul(jac1[4], jac1[5], h[0], h[1]);\\n\\n        return jac1;\\n    }\\n\\n    /**\\n     * @notice used for squaring a Fq2 element - (x0 + ix1)\\n     */\\n    function square(uint256 x0, uint256 x1) internal pure returns (uint256, uint256) {\\n        uint256[4] memory z;\\n        assembly {\\n            //a = x0 + x1\\n            mstore(z, addmod(x0, x1, MODULUS))\\n            //b = x0 - x1\\n            mstore(add(z, 0x20), addmod(x0, sub(MODULUS, x1), MODULUS))\\n            //a = (x0 + x1)(x0 - x1)\\n            mstore(add(z, 0x40), mulmod(mload(z), mload(add(z, 0x20)), MODULUS))\\n            //b = 2x0y0\\n            mstore(add(z, 0x60), mulmod(2, mulmod(x0, x1, MODULUS), MODULUS))\\n        }\\n        return (z[2], z[3]);\\n    }\\n\\n    function jacToAff(uint256[6] memory jac) internal view returns (uint256, uint256, uint256, uint256) {\\n        if (jac[4] == 0 && jac[5] == 0) {\\n            return (uint256(0), uint256(0), uint256(0), uint256(0));\\n        }\\n\\n        (jac[4], jac[5]) = inverse(jac[4], jac[5]);\\n        (uint256 b0, uint256 b1) = square(jac[4], jac[5]);\\n        (jac[0], jac[1]) = mul(jac[0], jac[1], b0, b1);\\n        (jac[2], jac[3]) = mul(jac[2], jac[3], b0, b1);\\n        (jac[2], jac[3]) = mul(jac[2], jac[3], jac[4], jac[5]);\\n\\n        return (jac[0], jac[1], jac[2], jac[3]);\\n    }\\n\\n    /**\\n     * @notice same function as Inverse in https://github.com/ConsenSys/gnark-crypto/blob/528300a94e8717cb98d124ebf7de96dddca373ea/ecc/bn254/internal/fptower/e2_bn254.go#L73\\n     */\\n    function inverse(uint256 x0, uint256 x1) internal view returns (uint256, uint256) {\\n        uint256[2] memory t;\\n        assembly {\\n            mstore(t, mulmod(x0, x0, MODULUS))\\n            mstore(add(t, 0x20), mulmod(x1, x1, MODULUS))\\n            mstore(t, addmod(mload(t), mload(add(t, 0x20)), MODULUS))\\n\\n            let freemem := mload(0x40)\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n            mstore(add(freemem, 0x60), mload(t))\\n            // x^(n-2) = x^-1 mod q\\n            mstore(add(freemem, 0x80), sub(MODULUS, 2))\\n            // N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\\n            mstore(add(freemem, 0xA0), MODULUS)\\n            if iszero(staticcall(sub(gas(), 2000), 5, freemem, 0xC0, add(t, 0x20), 0x20)) { revert(0, 0) }\\n            mstore(t, mulmod(x0, mload(add(t, 0x20)), MODULUS))\\n            mstore(add(t, 0x20), mulmod(x1, mload(add(t, 0x20)), MODULUS))\\n        }\\n\\n        return (t[0], (MODULUS - t[1]) % MODULUS);\\n    }\\n\\n    /**\\n     * @notice used for multiplying two Fq2 elements - (x0 + ix1) and (y0 + iy1).\\n     */\\n    function mul(uint256 x0, uint256 x1, uint256 y0, uint256 y1) internal pure returns (uint256, uint256) {\\n        uint256[5] memory z;\\n        assembly {\\n            //a = x0 + x1\\n            mstore(z, addmod(x0, x1, MODULUS))\\n            //b = y0 + y1\\n            mstore(add(z, 0x20), addmod(y0, y1, MODULUS))\\n            //a = (x0 + x1)(y0 + y1)\\n            mstore(z, mulmod(mload(z), mload(add(z, 0x20)), MODULUS))\\n            //b = x0y0\\n            mstore(add(z, 0x20), mulmod(x0, y0, MODULUS))\\n            //c = x1y1\\n            mstore(add(z, 0x40), mulmod(x1, y1, MODULUS))\\n            //c = -x1y1\\n            mstore(add(z, 0x40), sub(MODULUS, mload(add(z, 0x40))))\\n            //z0 = x0y0 - x1y1\\n            mstore(add(z, 0x60), addmod(mload(add(z, 0x20)), mload(add(z, 0x40)), MODULUS))\\n            //b = -x0y0\\n            mstore(add(z, 0x20), sub(MODULUS, mload(add(z, 0x20))))\\n            //z1 = x0y1 + x1y0\\n            mstore(add(z, 0x80), addmod(addmod(mload(z), mload(add(z, 0x20)), MODULUS), mload(add(z, 0x40)), MODULUS))\\n        }\\n        return (z[3], z[4]);\\n    }\\n\\n    /**\\n     * @notice same as hashToPoint function in https://github.com/ChihChengLiang/bls_solidity_python/blob/master/contracts/BLS.sol\\n     */\\n    function hashToG1(bytes32 _x) internal view returns (uint256 x, uint256 y) {\\n        x = uint256(_x) % MODULUS;\\n        bool found = false;\\n        while (true) {\\n            y = mulmod(x, x, MODULUS);\\n            y = mulmod(y, x, MODULUS);\\n            y = addmod(y, 3, MODULUS);\\n            (y, found) = sqrt(y);\\n            if (found) {\\n                return (x, y);\\n            }\\n            x = addmod(x, 1, MODULUS);\\n        }\\n    }\\n\\n    function sqrt(uint256 xx) internal view returns (uint256 x, bool hasRoot) {\\n        bool callSuccess;\\n        assembly {\\n            let freemem := mload(0x40)\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n            mstore(add(freemem, 0x60), xx)\\n            // (N + 1) / 4 = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52\\n            mstore(add(freemem, 0x80), 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52)\\n            // N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\\n            mstore(add(freemem, 0xA0), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)\\n            callSuccess := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\\n            x := mload(freemem)\\n            hasRoot := eq(xx, mulmod(x, x, MODULUS))\\n        }\\n        require(callSuccess, \\\"BLS: sqrt modexp call failed\\\");\\n    }\\n\\n    /**\\n     * @notice This function is for removing a pubkey from aggregated pubkey. The thesis of this operation:\\n     * - conversion to Jacobian coordinates,\\n     * - do the subtraction of pubkey from aggregated pubkey,\\n     * - convert the updated aggregated pubkey back to affine coordinates.\\n     * @param pubkeyToRemoveAff is the pubkey that is to be removed,\\n     * @param existingAggPubkeyAff is the aggregated pubkey.\\n     * @dev Jacobian coordinates are stored in the form [x0, x1, y0, y1, z0, z1]\\n     */\\n    function removePubkeyFromAggregate(uint256[4] memory pubkeyToRemoveAff, uint256[4] memory existingAggPubkeyAff)\\n        internal\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        uint256[6] memory pubkeyToRemoveJac;\\n        uint256[6] memory existingAggPubkeyJac;\\n\\n        // get x0, x1, y0, y1 from affine coordinates\\n        for (uint256 i = 0; i < 4;) {\\n            pubkeyToRemoveJac[i] = pubkeyToRemoveAff[i];\\n            existingAggPubkeyJac[i] = existingAggPubkeyAff[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // set z0 = 1\\n        pubkeyToRemoveJac[4] = 1;\\n        existingAggPubkeyJac[4] = 1;\\n\\n        /// @notice subtract pubkeyToRemoveJac from the aggregate pubkey\\n        // negate pubkeyToRemoveJac\\n        pubkeyToRemoveJac[2] = (MODULUS - pubkeyToRemoveJac[2]) % MODULUS;\\n        pubkeyToRemoveJac[3] = (MODULUS - pubkeyToRemoveJac[3]) % MODULUS;\\n        // add the negation to existingAggPubkeyJac\\n        addJac(existingAggPubkeyJac, pubkeyToRemoveJac);\\n\\n        // 'addJac' function above modifies the first input in memory, so now we can just return it (but first transform it back to affine)\\n        return (jacToAff(existingAggPubkeyJac));\\n    }\\n}\\n\",\"keccak256\":\"0x4679dda9fb3620e263ae5149a218e8aef05267380a4d07a7fe66fa5430b6859f\",\"license\":\"UNLICENSED AND MIT\"},\"contracts/libraries/eigenda/lib/contracts/libraries/DataStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IDataLayrServiceManager.sol\\\";\\n\\n/**\\n * @title Library of functions shared across DataLayr.\\n * @author Layr Labs, Inc.\\n */\\nlibrary DataStoreUtils {\\n    uint16 public constant BIP_MULTIPLIER = 10000;\\n\\n    uint256 public constant BYTES_PER_COEFFICIENT = 31;\\n    uint256 public constant BIT_SHIFT_degree = 224;\\n    uint256 public constant BIT_SHIFT_numSys = 224;\\n    uint256 public constant HEADER_OFFSET_degree = 64;\\n    uint256 public constant HEADER_OFFSET_numSys = 68;\\n\\n\\n    function getTotalBytes(bytes calldata header, uint32 totalChunks) internal pure returns(uint256) {\\n        uint256 numCoefficients;\\n        assembly {\\n            //numCoefficients = totalChunks * (degree + 1)\\n            //NOTE: degree + 1 is the number of coefficients\\n            numCoefficients := mul(totalChunks, add(shr(BIT_SHIFT_degree, calldataload(add(header.offset, HEADER_OFFSET_degree))), 1))\\n        }\\n        return numCoefficients * BYTES_PER_COEFFICIENT;\\n    }\\n    /// @param header of the datastore that the coding ratio is being retrieved for\\n    /// @param totalChunks the total number of chunks expected in this datastore\\n    /// @return codingRatio of the datastore in basis points\\n    function getCodingRatio(bytes calldata header, uint32 totalChunks) internal pure returns(uint16) {\\n        uint32 codingRatio;\\n        assembly {\\n            //codingRatio = numSys\\n            codingRatio := shr(BIT_SHIFT_numSys, calldataload(add(header.offset, HEADER_OFFSET_numSys)))\\n            //codingRatio = numSys * BIP_MULTIPLIER / totalChunks\\n            codingRatio := div(mul(codingRatio, BIP_MULTIPLIER), totalChunks)\\n        }\\n        return uint16(codingRatio);\\n    }\\n\\n    function getDegree(bytes calldata header) internal pure returns (uint32) {\\n        uint32 degree;\\n        assembly {\\n            degree := shr(BIT_SHIFT_degree, calldataload(add(header.offset, HEADER_OFFSET_degree)))\\n        }\\n        return degree;\\n    }\\n\\n    /// @notice Finds the `signatoryRecordHash`, used for fraudproofs.\\n    function computeSignatoryRecordHash(\\n        uint32 globalDataStoreId,\\n        bytes32[] memory nonSignerPubkeyHashes,\\n        uint256 signedStakeFirstQuorum,\\n        uint256 signedStakeSecondQuorum\\n    ) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encodePacked(globalDataStoreId, nonSignerPubkeyHashes, signedStakeFirstQuorum, signedStakeSecondQuorum)\\n        );\\n    }\\n\\n    /// @notice Computes the hash of a single DataStore's metadata.\\n    function computeDataStoreHash(IDataLayrServiceManager.DataStoreMetadata memory metadata)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 dsHash = keccak256(\\n            abi.encodePacked(\\n                metadata.headerHash,\\n                metadata.durationDataStoreId,\\n                metadata.globalDataStoreId,\\n                metadata.blockNumber,\\n                metadata.fee,\\n                metadata.confirmer,\\n                metadata.signatoryRecordHash\\n            )\\n        );\\n        return dsHash;\\n    }\\n\\n    /// @notice uses `abi.encodePacked` to encode a DataStore's metadata into a compressed format\\n    function packDataStoreMetadata(IDataLayrServiceManager.DataStoreMetadata memory metadata)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return (\\n            abi.encodePacked(\\n                metadata.headerHash,\\n                metadata.durationDataStoreId,\\n                metadata.globalDataStoreId,\\n                metadata.blockNumber,\\n                metadata.fee,\\n                metadata.confirmer,\\n                metadata.signatoryRecordHash\\n            )\\n        );\\n    }\\n\\n    /// @notice uses `abi.encodePacked` to encode a DataStore's searchData into a compressed format\\n    function packDataStoreSearchData(IDataLayrServiceManager.DataStoreSearchData memory searchData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return (\\n            abi.encodePacked(\\n                packDataStoreMetadata(searchData.metadata), searchData.duration, searchData.timestamp, searchData.index\\n            )\\n        );\\n    }\\n\\n    // CONSTANTS -- commented out lines are due to inline assembly supporting *only* 'direct number constants' (for now, at least)\\n    // OBJECT BIT LENGTHS\\n    uint256 internal constant BIT_LENGTH_headerHash = 256;\\n    uint256 internal constant BIT_LENGTH_durationDataStoreId = 32;\\n    uint256 internal constant BIT_LENGTH_globalDataStoreId = 32;\\n    uint256 internal constant BIT_LENGTH_blockNumber = 32;\\n    uint256 internal constant BIT_LENGTH_fee = 96;\\n    uint256 internal constant BIT_LENGTH_confirmer = 160;\\n    uint256 internal constant BIT_LENGTH_signatoryRecordHash = 256;\\n    uint256 internal constant BIT_LENGTH_duration = 8;\\n    uint256 internal constant BIT_LENGTH_timestamp = 256;\\n    uint256 internal constant BIT_LENGTH_index = 32;\\n\\n    // OBJECT BIT SHIFTS FOR READING FROM CALLDATA -- don't bother with using 'shr' if any of these is 0\\n    // uint256 internal constant BIT_SHIFT_headerHash = 256 - BIT_LENGTH_headerHash;\\n    // uint256 internal constant BIT_SHIFT_durationDataStoreId = 256 - BIT_LENGTH_durationDataStoreId;\\n    // uint256 internal constant BIT_SHIFT_globalDataStoreId = 256 - BIT_LENGTH_globalDataStoreId;\\n    // uint256 internal constant BIT_SHIFT_blockNumber = 256 - BIT_LENGTH_blockNumber;\\n    // uint256 internal constant BIT_SHIFT_fee = 256 - BIT_LENGTH_fee;\\n    // uint256 internal constant BIT_SHIFT_confirmer = 256 - BIT_LENGTH_confirmer;\\n    // uint256 internal constant BIT_SHIFT_signatoryRecordHash = 256 - BIT_LENGTH_signatoryRecordHash;\\n    // uint256 internal constant BIT_SHIFT_duration = 256 - BIT_LENGTH_duration;\\n    // uint256 internal constant BIT_SHIFT_timestamp = 256 - BIT_LENGTH_timestamp;\\n    // uint256 internal constant BIT_SHIFT_index = 256 - BIT_LENGTH_index;\\n    uint256 internal constant BIT_SHIFT_headerHash = 0;\\n    uint256 internal constant BIT_SHIFT_durationDataStoreId = 224;\\n    uint256 internal constant BIT_SHIFT_globalDataStoreId = 224;\\n    uint256 internal constant BIT_SHIFT_blockNumber = 224;\\n    uint256 internal constant BIT_SHIFT_fee = 160;\\n    uint256 internal constant BIT_SHIFT_confirmer = 96;\\n    uint256 internal constant BIT_SHIFT_signatoryRecordHash = 0;\\n    uint256 internal constant BIT_SHIFT_duration = 248;\\n    uint256 internal constant BIT_SHIFT_timestamp = 0;\\n    uint256 internal constant BIT_SHIFT_index = 224;\\n\\n    // CALLDATA OFFSETS IN BYTES -- adding 7 and dividing by 8 here is for rounding *up* the bit amounts to bytes amounts\\n    // uint256 internal constant CALLDATA_OFFSET_headerHash = 0;\\n    // uint256 internal constant CALLDATA_OFFSET_durationDataStoreId = ((BIT_LENGTH_headerHash + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_globalDataStoreId = CALLDATA_OFFSET_durationDataStoreId + ((BIT_LENGTH_durationDataStoreId + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_blockNumber = CALLDATA_OFFSET_globalDataStoreId + ((BIT_LENGTH_globalDataStoreId + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_fee = CALLDATA_OFFSET_blockNumber + ((BIT_LENGTH_blockNumber + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_confirmer = CALLDATA_OFFSET_fee + ((BIT_LENGTH_fee + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_signatoryRecordHash = CALLDATA_OFFSET_confirmer + ((BIT_LENGTH_confirmer + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_duration = CALLDATA_OFFSET_signatoryRecordHash + ((BIT_LENGTH_signatoryRecordHash + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_timestamp = CALLDATA_OFFSET_duration + ((BIT_LENGTH_duration + 7) / 8);\\n    // uint256 internal constant CALLDATA_OFFSET_index = CALLDATA_OFFSET_timestamp + ((BIT_LENGTH_timestamp + 7) / 8);\\n    uint256 internal constant CALLDATA_OFFSET_headerHash = 0;\\n    uint256 internal constant CALLDATA_OFFSET_durationDataStoreId = 32;\\n    uint256 internal constant CALLDATA_OFFSET_globalDataStoreId = 36;\\n    uint256 internal constant CALLDATA_OFFSET_blockNumber = 40;\\n    uint256 internal constant CALLDATA_OFFSET_fee = 44;\\n    uint256 internal constant CALLDATA_OFFSET_confirmer = 56;\\n    uint256 internal constant CALLDATA_OFFSET_signatoryRecordHash = 76;\\n    uint256 internal constant CALLDATA_OFFSET_duration = 108;\\n    uint256 internal constant CALLDATA_OFFSET_timestamp = 109;\\n    uint256 internal constant CALLDATA_OFFSET_index = 141;\\n\\n    // MEMORY OFFSETS IN BYTES\\n    uint256 internal constant MEMORY_OFFSET_headerHash = 0;\\n    uint256 internal constant MEMORY_OFFSET_durationDataStoreId = 32;\\n    uint256 internal constant MEMORY_OFFSET_globalDataStoreId = 64;\\n    uint256 internal constant MEMORY_OFFSET_blockNumber = 96;\\n    uint256 internal constant MEMORY_OFFSET_fee = 128;\\n    uint256 internal constant MEMORY_OFFSET_confirmer = 160;\\n    uint256 internal constant MEMORY_OFFSET_signatoryRecordHash = 192;\\n    // I'm unsure why the memory-offsets work this way, but they do. See usage below.\\n    uint256 internal constant MEMORY_OFFSET_duration = 32;\\n    uint256 internal constant MEMORY_OFFSET_timestamp = 64;\\n    uint256 internal constant MEMORY_OFFSET_index = 96;\\n\\n    /**\\n     * @notice Unpacks the packed metadata of a DataStore into a metadata struct.\\n     * @param packedMetadata should be in the same form as the output of `packDataStoreMetadata`\\n     */\\n    function unpackDataStoreMetadata(bytes calldata packedMetadata)\\n        internal\\n        pure\\n        returns (IDataLayrServiceManager.DataStoreMetadata memory metadata)\\n    {\\n        uint256 pointer;\\n        assembly {\\n            // fetch offset of `packedMetadata` input in calldata\\n            pointer := packedMetadata.offset\\n            mstore(\\n                // store in the headerHash memory location in `metadata`\\n                metadata,\\n                // read the headerHash from its calldata position in `packedMetadata`\\n                calldataload(pointer)\\n            )\\n            mstore(\\n                // store in the durationDataStoreId memory location in `metadata`\\n                add(metadata, MEMORY_OFFSET_durationDataStoreId),\\n                // read the durationDataStoreId from its calldata position in `packedMetadata`\\n                shr(BIT_SHIFT_durationDataStoreId, calldataload(add(pointer, CALLDATA_OFFSET_durationDataStoreId)))\\n            )\\n            mstore(\\n                // store in the globalDataStoreId memory location in `metadata`\\n                add(metadata, MEMORY_OFFSET_globalDataStoreId),\\n                // read the globalDataStoreId from its calldata position in `packedMetadata`\\n                shr(BIT_SHIFT_globalDataStoreId, calldataload(add(pointer, CALLDATA_OFFSET_globalDataStoreId)))\\n            )\\n            mstore(\\n                // store in the blockNumber memory location in `metadata`\\n                add(metadata, MEMORY_OFFSET_blockNumber),\\n                // read the blockNumber from its calldata position in `packedMetadata`\\n                shr(BIT_SHIFT_blockNumber, calldataload(add(pointer, CALLDATA_OFFSET_blockNumber)))\\n            )\\n            mstore(\\n                // store in the fee memory location in `metadata`\\n                add(metadata, MEMORY_OFFSET_fee),\\n                // read the fee from its calldata position in `packedMetadata`\\n                shr(BIT_SHIFT_fee, calldataload(add(pointer, CALLDATA_OFFSET_fee)))\\n            )\\n            mstore(\\n                // store in the confirmer memory location in `metadata`\\n                add(metadata, MEMORY_OFFSET_confirmer),\\n                // read the confirmer from its calldata position in `packedMetadata`\\n                shr(BIT_SHIFT_confirmer, calldataload(add(pointer, CALLDATA_OFFSET_confirmer)))\\n            )\\n            mstore(\\n                // store in the signatoryRecordHash memory location in `metadata`\\n                add(metadata, MEMORY_OFFSET_signatoryRecordHash),\\n                // read the signatoryRecordHash from its calldata position in `packedMetadata`\\n                calldataload(add(pointer, CALLDATA_OFFSET_signatoryRecordHash))\\n            )\\n        }\\n        return metadata;\\n    }\\n\\n    /**\\n     * @notice Unpacks the packed searchData of a DataStore into a searchData struct.\\n     * @param packedSearchData should be in the same form as the output of `packDataStoreSearchData`\\n     */\\n    function unpackDataStoreSearchData(bytes calldata packedSearchData)\\n        internal\\n        pure\\n        returns (IDataLayrServiceManager.DataStoreSearchData memory searchData)\\n    {\\n        searchData.metadata = (unpackDataStoreMetadata(packedSearchData));\\n        uint256 pointer;\\n        assembly {\\n            // fetch offset of `packedSearchData` input in calldata\\n            pointer := packedSearchData.offset\\n            mstore(\\n                // store in the duration memory location of `searchData`\\n                add(searchData, MEMORY_OFFSET_duration),\\n                // read the duration from its calldata position in `packedSearchData`\\n                shr(BIT_SHIFT_duration, calldataload(add(pointer, CALLDATA_OFFSET_duration)))\\n            )\\n            mstore(\\n                // store in the timestamp memory location of `searchData`\\n                add(searchData, MEMORY_OFFSET_timestamp),\\n                // read the timestamp from its calldata position in `packedSearchData`\\n                calldataload(add(pointer, CALLDATA_OFFSET_timestamp))\\n            )\\n            mstore(\\n                // store in the index memory location of `searchData`\\n                add(searchData, MEMORY_OFFSET_index),\\n                // read the index from its calldata position in `packedSearchData`\\n                shr(BIT_SHIFT_index, calldataload(add(pointer, CALLDATA_OFFSET_index)))\\n            )\\n        }\\n        return searchData;\\n    }\\n}\\n\",\"keccak256\":\"0x6554837ea4eee20fcfdd0373240e19eef75aae5c39ae3ba470dc55cbe7c9a7ea\",\"license\":\"UNLICENSED\"},\"contracts/libraries/eigenda/lib/contracts/libraries/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Small library for checking Merkle proofs.\\n * @author Original authorship of this code is unclear. This implementation is adapted from Polygon's.\\n * See https://github.com/maticnetwork/contracts/commits/main/contracts/common/lib/Merkle.sol\\n * with added functions for sha256 support for Ethereum Consensus Layer Merkleization.\\n */\\nlibrary Merkle {\\n    /**\\n     @notice this function checks whether the given @param leaf is actually a member (leaf) of the \\n             merkle tree with @param rootHash being the Merkle root or not.   \\n     @param leaf is the element whose membership in the merkle tree is being checked,\\n     @param index is the leaf index\\n     @param rootHash is the Merkle root of the Merkle tree,\\n     @param proof is the Merkle proof associated with the @param leaf and @param rootHash.\\n     */ \\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n\\n        /**\\n         Merkle proof consists of all siblings along the path to the Merkle root, each of 32 bytes\\n         */\\n        uint256 proofHeight = proof.length / 32;\\n\\n        /**\\n          Proof of size n means, height of the tree is n+1.\\n          In a tree of height n+1, max #leafs possible is 2**n.\\n         */\\n        require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n\\n        // starting from the leaf\\n        bytes32 computedHash = leaf;\\n\\n        // going up the Merkle tree\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n\\n            // retrieve the sibling along the merkle proof\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n\\n            /**\\n             check whether the association with the parent is of the format:\\n\\n                computedHash of Parent                    computedHash of Parent        \\n                             *                                      *\\n                           *   *                or                *   *\\n                         *       *                              *       *\\n                       *           *                          *           * \\n                computedHash    proofElement            proofElement   computedHash\\n                             \\n             */\\n            // association is of first type\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n\\n            // association is of second type\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n\\n        // check whether computed root is same as the Merkle root\\n        return computedHash == rootHash;\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n\\n     @notice requires the leaves.length is a power of 2\\n     */ \\n    function merkleizeSha256(\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(abi.encodePacked(leaves[2*i], leaves[2*i+1]));\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(abi.encodePacked(layer[2*i], layer[2*i+1]));\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n\\n    function checkMembershipSha256(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = sha256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = sha256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\",\"keccak256\":\"0x196df786d91eb84566f16947c7047001eea788bc00bc81774646d21369ddc534\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061448c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063c8fff01b116100a2578063d7fbc2e211610071578063d7fbc2e2146104c0578063f2495029146104d3578063f2a8f124146104f3578063f2fde38b146104fc57600080fd5b8063c8fff01b1461041a578063c96c0d381461042d578063cb4909c81461049a578063d13f90b4146104ad57600080fd5b806392f30a45116100de57806392f30a45146103a25780639495de40146103de578063990fca66146103f1578063b537c4c7146103fa57600080fd5b8063715018a6146103615780637bd85879146103695780638bea6cae1461037c5780638da5cb5b1461038457600080fd5b8063301b39ab1161018757806359cb63911161015657806359cb6391146102b75780635c1bba381461030a5780635d42ffb71461034f5780635e8b3f2d1461035857600080fd5b8063301b39ab1461028157806332c58f7a146102935780633c762984146102a657806346b2eb9b146102af57600080fd5b80631f944c8f116101c35780631f944c8f14610212578063228a1b5b1461023b5780632e64b4c01461024e5780632e72866b1461026157600080fd5b806302d777de146101ea578063060ee9a4146101ff5780630a33202e146101ff575b600080fd5b6101fd6101f83660046136d7565b61050f565b005b6101fd61020d3660046136d7565b6105e8565b6102256102203660046136f2565b6106c1565b60405161023291906137a4565b60405180910390f35b6101fd61024936600461386c565b61082c565b6101fd61025c3660046138fb565b610b06565b61027461026f3660046138fb565b610b98565b604051610232919061397e565b609a545b604051908152602001610232565b6101fd6102a13660046136d7565b610c30565b610285609d5481565b610225610d0c565b6102fb6102c53660046138fb565b609e6020526000908152604090205463ffffffff8082169164010000000081049091169068010000000000000000900460ff1683565b604051610232939291906139b0565b60975461032a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610232565b610285609b5481565b61028560995481565b6101fd610d28565b6101fd610377366004613b57565b610d3c565b609b54610285565b60335473ffffffffffffffffffffffffffffffffffffffff1661032a565b6103c96103b0366004613bc1565b609f602052600090815260409020805460019091015482565b60408051928352602083019190915201610232565b6101fd6103ec3660046138fb565b611498565b610285609a5481565b610285610408366004613bc1565b60a06020526000908152604090205481565b6101fd6104283660046136d7565b61152a565b61047f61043b366004613bc1565b60408051808201909152600080825260208201525063ffffffff166000908152609f6020908152604091829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610232565b6101fd6104a8366004613bde565b6115fe565b6101fd6104bb366004613c48565b611a1b565b6101fd6104ce3660046138fb565b611c01565b60985461032a9073ffffffffffffffffffffffffffffffffffffffff1681565b610285609c5481565b6101fd61050a3660046136d7565b611c93565b60975473ffffffffffffffffffffffffffffffffffffffff1633146105a15760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79207468652073657175656e6365722063616e2075706461746520646c60448201527f736d20616464726573730000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60975473ffffffffffffffffffffffffffffffffffffffff1633146106755760405162461bcd60e51b815260206004820152603160248201527f4f6e6c79207468652073657175656e6365722063616e2072656d6f766520667260448201527f6175642070726f6f6620616464726573730000000000000000000000000000006064820152608401610598565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a16020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6060806000845b848351101561081e576000610743826106e2602082613cf3565b6106ed906001613d07565b6106f8906020613d1f565b6107029190613d3e565b855161070e9089613d3e565b848c8c8881811061072157610721613d55565b90506020028101906107339190613d84565b61073e929150613d3e565b611d30565b90508389898581811061075857610758613d55565b905060200281019061076a9190613d84565b84906107768583613d07565b9261078393929190613de9565b60405160200161079593929190613e13565b6040516020818303038152906040529350835186116107b4575061081e565b8888848181106107c6576107c6613d55565b90506020028101906107d89190613d84565b90506107e48284613d07565b141561080057826107f481613e3b565b93505060019150610818565b61080b816001613d07565b6108159083613d07565b91505b506106c8565b50909150505b949350505050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146108b95760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79207468652073657175656e6365722063616e2073746f72652064617460448201527f61000000000000000000000000000000000000000000000000000000000000006064820152608401610598565b6099546108cc63ffffffff861643613d3e565b106109195760405162461bcd60e51b815260206004820152601e60248201527f7374616b65732074616b656e2066726f6d20746f6f206c6f6e672061676f00006044820152606401610598565b609854604080517f72d18e8d000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916372d18e8d916004808301926020929190829003018186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190613e56565b9050609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf49ea733308989878e8e6040518863ffffffff1660e01b8152600401610a259796959493929190613ebc565b602060405180830381600087803b158015610a3f57600080fd5b505af1158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190613e56565b50604080518082018252858152602080820186815263ffffffff85166000818152609f845285812094518555915160019094019390935560a082528390206000199055609a869055825191825281018690529081018490527fa99ca06ac3461399088feac88ec48dc5a47d61c3b6839eab20146f2c4ee535849060600160405180910390a15050505050505050565b60975473ffffffffffffffffffffffffffffffffffffffff163314610b935760405162461bcd60e51b815260206004820152603160248201527f4f6e6c79207468652073657175656e6365722063616e20736574206c6174657360448201527f74206c3220626c6f636b206e756d6265720000000000000000000000000000006064820152608401610598565b609b55565b610bb960408051606081018252600080825260208201819052909182015290565b6000828152609e60209081526040918290208251606081018452815463ffffffff8082168352640100000000820416938201939093529290919083019068010000000000000000900460ff166002811115610c1657610c16613914565b6002811115610c2757610c27613914565b90525092915050565b60975473ffffffffffffffffffffffffffffffffffffffff163314610cbd5760405162461bcd60e51b815260206004820152603a60248201527f4f6e6c79207468652073657175656e6365722063616e2073657420667261756460448201527f2070726f6f66206164647265737320756e617661696c61626c650000000000006064820152608401610598565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a16020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6040518060800160405280606081526020016143f76060913981565b610d30611d65565b610d3a6000611dcc565b565b33600090815260a1602052604090205460ff161515600114610dc65760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c792066726175642070726f6f66207768697465206c6973742063616e2060448201527f6368616c6c656e676520646174610000000000000000000000000000000000006064820152608401610598565b6000848152609e602090815260408083208151606081018352815463ffffffff80821683526401000000008204169482019490945292909183019068010000000000000000900460ff166002811115610e2157610e21613914565b6002811115610e3257610e32613914565b9052509050600181604001516002811115610e4f57610e4f613914565b148015610e65575042816020015163ffffffff16115b610ed75760405162461bcd60e51b815260206004820152602d60248201527f526f6c6c757053746f7265206d75737420626520636f6d6d697474656420616e60448201527f6420756e636f6e6669726d6564000000000000000000000000000000000000006064820152608401610598565b8251610ee290611e43565b6098546020850151604080870151606088015191517fed82c0ee00000000000000000000000000000000000000000000000000000000815260ff9093166004840152602483015263ffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff9091169063ed82c0ee9060640160206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa69190613f20565b14610ff35760405162461bcd60e51b815260206004820152601e60248201527f6d6574616461746120707265696d61676520697320696e636f727265637400006044820152606401610598565b805183516040015163ffffffff90811691161461109e5760405162461bcd60e51b815260206004820152604260248201527f7365616368446174612773206461746173746f7265206964206973206e6f742060448201527f636f6e73697374656e74207769746820676976656e20726f6c6c75702073746f60648201527f7265000000000000000000000000000000000000000000000000000000000000608482015260a401610598565b6110a88280613d84565b6040516110b6929190613f39565b604051908190039020835151146111355760405162461bcd60e51b815260206004820152603260248201527f646973636c6f737572652070726f6f667320686561646572686173682070726560448201527f696d61676520697320696e636f727265637400000000000000000000000000006064820152608401610598565b6111756111428380613d84565b6111526040860160208701613bc1565b61115f6040870187613f49565b61116c6060890189613f49565b89608001611f63565b6111c15760405162461bcd60e51b815260206004820152601d60248201527f646973636c6f737572652070726f6f66732061726520696e76616c69640000006044820152606401610598565b60006111d56111d08480613d84565b61255b565b905063ffffffff81166111eb6040850185613f49565b90506111fd6040860160208701613bc1565b63ffffffff1661120d9190613d07565b11156112815760405162461bcd60e51b815260206004820152602e60248201527f43616e206f6e6c792070726f766520646174612066726f6d207468652073797360448201527f74656d61746963206368756e6b730000000000000000000000000000000000006064820152608401610598565b60006112b36112936040860186613f49565b886040518060800160405280606081526020016143f760609139516106c1565b90506040518060800160405280606081526020016143f7606091395181511461136a5760405162461bcd60e51b815260206004820152604260248201527f50617273696e67206572726f722c2070726f76656e20737472696e672069732060448201527f646966666572656e74206c656e677468207468616e206672617564207374726960648201527f6e67000000000000000000000000000000000000000000000000000000000000608482015260a401610598565b6040518060800160405280606081526020016143f760609139805190602001208180519060200120146113df5760405162461bcd60e51b815260206004820152601d60248201527f70726f76656e20737472696e6720213d20667261756420737472696e670000006044820152606401610598565b6000878152609e6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff1668020000000000000000179055875181015163ffffffff908116808552609f8452828520548a518401519092168552938290206001015482518c81529384019490945282820152606082019290925290517fca227c67a02028763083580d42e8bdef4bb49c393068d05983421cd7a4a2a5be9181900360800190a150505050505050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146115255760405162461bcd60e51b815260206004820152603160248201527f4f6e6c79207468652073657175656e6365722063616e20736574206c6174657360448201527f74206c3220626c6f636b206e756d6265720000000000000000000000000000006064820152608401610598565b609a55565b60975473ffffffffffffffffffffffffffffffffffffffff1633146115b75760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79207468652073657175656e6365722063616e2075706461746520736560448201527f7175656e636572206164647265737300000000000000000000000000000000006064820152608401610598565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60975473ffffffffffffffffffffffffffffffffffffffff16331461168b5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79207468652073657175656e6365722063616e2073746f72652064617460448201527f61000000000000000000000000000000000000000000000000000000000000006064820152608401610598565b825160409081015163ffffffff166000908152609f6020522054821480156116ce5750825160409081015163ffffffff166000908152609f602052206001015481145b6117665760405162461bcd60e51b815260206004820152605560248201527f446174612073746f72652065697468657220776173206e6f7420696e6974696160448201527f6c697a65642062792074686520726f6c6c757020636f6e74726163742c206f7260648201527f20697320616c726561647920636f6e6669726d65640000000000000000000000608482015260a401610598565b825160409081015163ffffffff16600090815260a060205220546000191461181c5760405162461bcd60e51b815260206004820152605560248201527f446174612073746f72652065697468657220776173206e6f7420696e6974696160448201527f6c697a65642062792074686520726f6c6c757020636f6e74726163742c206f7260648201527f20697320616c726561647920636f6e6669726d65640000000000000000000000608482015260a401610598565b6098546040517f5189951500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063518995159061187690889088908890600401613fb1565b600060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b50505050604051806060016040528084600001516040015163ffffffff168152602001609c54426118d59190613d07565b63ffffffff16815260200160019052609d546000908152609e6020908152604091829020835181549285015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169116179190911780825591830151909182907fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000083600281111561198457611984613914565b02179055505050609b819055609d8054845160409081015163ffffffff16600090815260a06020529081208290557fc7c0900be05d2a0ad0f77852eb975d9e862d1db0a2238617dd0f77854782f67292906119de83613e3b565b909155508451604090810151815163ffffffff93841681529216602083015281018490526060810183905260800160405180910390a15050505050565b600054610100900460ff1615808015611a3b5750600054600160ff909116105b80611a555750303b158015611a55575060005460ff166001145b611ac75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610598565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611b2557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611b2d61256a565b6097805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560988054928816929091169190911790556099849055609c839055609a829055609b8290558015611bf957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60975473ffffffffffffffffffffffffffffffffffffffff163314611c8e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652073657175656e6365722063616e2075706461746520667260448201527f6175642070726f6f6620706572696f64000000000000000000000000000000006064820152608401610598565b609c55565b611c9b611d65565b73ffffffffffffffffffffffffffffffffffffffff8116611d245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610598565b611d2d81611dcc565b50565b6000828410611d4c57818310611d465781611d5b565b82611d5b565b818410611d595781611d5b565b835b90505b9392505050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610d3a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080826000015183602001518460400151856060015186608001518760a001518860c00151604051602001611f26979695949392919096875260e095861b7fffffffff00000000000000000000000000000000000000000000000000000000908116602089015294861b851660248801529290941b909216602885015260a09190911b7fffffffffffffffffffffffff000000000000000000000000000000000000000016602c84015260609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166038830152604c820152606c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b6000808567ffffffffffffffff811115611f7f57611f7f6139d2565b604051908082528060200260200182016040528015611fa8578160200160208202803683370190505b50905060006120358b8b6040805160c08101825260006080820181815260a0830182905282526020820181905291810182905260608101919091525050604080518082018252823581526020838101358183015282516080810184529182528383013560e090811c918301919091526044840135811c92820192909252604890920135901c606082015290565b90508460005b818110156123145761210b83612051838e61407b565b8a8a8581811061206357612063613d55565b905060200281019061207591906140a3565b8b8b8681811061208757612087613d55565b905060200281019061209991906140a3565b6040018c8c878181106120ae576120ae613d55565b90506020028101906120c091906140a3565b6080018036038101906120d39190614131565b8d8d888181106120e5576120e5613d55565b90506020028101906120f791906140a3565b61210690610100810190613d84565b6125ef565b61217d5760405162461bcd60e51b815260206004820152602260248201527f52657665616c206661696c65642064756520746f206e6f6e203120706169726960448201527f6e670000000000000000000000000000000000000000000000000000000000006064820152608401610598565b89898281811061218f5761218f613d55565b90506020028101906121a19190613d84565b9050836020015160206121b4919061418e565b65ffffffffffff161461222f5760405162461bcd60e51b815260206004820152603860248201527f506f6c796e6f6d69616c206d757374206861766520612032353620626974206360448201527f6f656666696369656e7420666f722065616368207465726d00000000000000006064820152608401610598565b89898281811061224157612241613d55565b90506020028101906122539190613d84565b604051612261929190613f39565b604051809103902088888381811061227b5761227b613d55565b905060200281019061228d91906140a3565b358989848181106122a0576122a0613d55565b90506020028101906122b291906140a3565b6040516122d993929160209081013591019283526020830191909152604082015260600190565b6040516020818303038152906040528051906020012084828151811061230157612301613d55565b602090810291909101015260010161203b565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018460405160200161234991906141ef565b6040516020818303038152906040528051906020012060001c61236c91906141fb565b905061237661361c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018560006040516020016123ab92919061420f565b6040516020818303038152906040528051906020012060001c6123ce91906141fb565b80825260208201526000898982816123e8576123e8613d55565b90506020028101906123fa91906140a3565b61240a9036819003810190614228565b9050600061243c8d8d600081811061242457612424613d55565b90506020028101906124369190613d84565b866127f7565b905060015b8a811015612539576124938361248e8e8e8581811061246257612462613d55565b905060200281019061247491906140a3565b6124849036819003810190614228565b602088015161289d565b612933565b925060006124c48f8f848181106124ac576124ac613d55565b90506020028101906124be9190613d84565b886127f7565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180828760016020020151098408602086015186519194507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000191096020860152508061253181613e3b565b915050612441565b50612546828a86846129cf565b97505050505050505098975050505050505050565b604482013560e01c5b92915050565b600054610100900460ff166125e75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610598565b610d3a612b5e565b8251602080820151915181860151808301519051604080519485019590955293830191909152606082015260808101919091526000906126ac9060a00160405160208183030381529060405280519060200120612655898b604001518c60600151612be4565b63ffffffff166126708b6020015165ffffffffffff16612d50565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061305092505050565b6126f85760405162461bcd60e51b815260206004820181905260248201527f496e636f7272656374207a65726f20706f6c79206d65726b6c652070726f6f666044820152606401610598565b87516000906127189061248e612713368b90038b018b614228565b6131c6565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6020838101919091528101919091529091506127e96127e136899003890189614228565b878484613285565b9a9950505050505050505050565b600080836001825b82811015612891576000888289612817826020613d07565b9261282493929190613de9565b61282d9161425a565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180848309860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018784099250612889602083613d07565b9150506127ff565b50919695505050505050565b60408051808201909152600080825260208201526128b961363a565b83518152602080850151908201526040808201849052600090836060846007600019fa90508061292b5760405162461bcd60e51b815260206004820152601060248201527f626e3235342d6d756c2d6661696c6564000000000000000000000000000000006044820152606401610598565b505092915050565b604080518082019091526000808252602082015261294f613658565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508061292b5760405162461bcd60e51b815260206004820152601060248201527f626e3235342d6164642d6661696c6564000000000000000000000000000000006044820152606401610598565b604080518082019091526001815260026020820152600090816129fa6129f4836131c6565b8661289d565b604080518082019091527f220ac48bb1f91fd93f502a3d0caa077ac70e0af8819b9d8fa26a168a2c558a5781527f08f54b82af08ceaf7cd5f180bac94870f6d8100a9c9afa9dd09a4491653891126020820152909150612a5a8183612933565b91506000612a70612a6a856131c6565b8761289d565b90506000612a7e8a83612933565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d602083810191909152810191909152909150612b4f85612b48368d90038d018d614131565b8484613285565b9b9a5050505050505050505050565b600054610100900460ff16612bdb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610598565b610d3a33611dcc565b600080612bf1838561407b565b90506000612c048563ffffffff166134f2565b90506000612c128684614278565b63ffffffff1615612c24576001612c27565b60005b60ff16612c34878561429b565b612c3e919061407b565b90506000612c5a612c4f83856142be565b63ffffffff166134f2565b90508663ffffffff168863ffffffff161015612c9c5780612c7b828a61351f565b612c87906101006142be565b612c91919061429b565b945050505050611d5e565b612ca687846142e1565b612cb090826142e1565b63ffffffff168863ffffffff161015612ce25780612c7b8185612cd38b8d6142e1565b612cdd919061407b565b61351f565b60405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420637265617465206e756d626572206f66206672616d6520686960448201527f67686572207468616e20706f737369626c6500000000000000000000000000006064820152608401610598565b600080612d5c8361355e565b905080612d8b57507fe82cea94884b1b895ea0742840a3b19249a723810fd1b04d8564d675b0a416f192915050565b8060011415612dbc57507f4843774a80fc8385b31024f5bd18b42e62de439206ab9468d42d826796d41f6792915050565b8060021415612ded57507f092d3e5f87f5293e7ab0cc2ca6b0b5e4adb5e0011656544915f7cea34e69e5ab92915050565b8060031415612e1e57507f494b208540ec8624fbbb3f2c64ffccdaf6253f8f4e50c0d93922d88195b0775592915050565b8060041415612e4f57507ffdb44b84a82893cfa0e37a97f09ffc4298ad5e62be1bea1d03320ae836213d2292915050565b8060051415612e8057507f3f50cb08231d2a76853ba9dbb20dad45a1b75c57cdaff6223bfe069752cff3d492915050565b8060061415612eb157507fbb39eebd8138eefd5802a49d571e65b3e0d4e32277c28fbf5fbca66e7fb0431092915050565b8060071415612ee257507ff0a39b513e11fa80cbecbf352f69310eddd5cd03148768e0e9542bd600b133ec92915050565b8060081415612f1357507f038cca2238865414efb752cc004fffec9e6069b709f495249cdf36efbd5952f692915050565b8060091415612f4457507f2a26b054ed559dd255d8ac9060ebf6b95b768d87de767f8174ad2f9a4e48dd0192915050565b80600a1415612f7557507f1fe180d0bc4ff7c69fefa595b3b5f3c284535a280f6fdcf69b20770d1e20e1fc92915050565b80600b1415612fa657507f60e34ad57c61cd6fdd8177437c30e4a30334e63d7683989570cf27020efc820192915050565b80600c1415612fd757507feda2417e770ddbe88f083acf06b6794dfb76301314a32bd0697440d76f6cd9cc92915050565b80600d141561300857507f8cbe9b8cf92ce70e3bec8e1e72a0f85569017a7e43c3db50e4a5badb8dea7ce892915050565b60405162461bcd60e51b815260206004820152601660248201527f4c6f67206e6f7420696e2076616c69642072616e6765000000000000000000006044820152606401610598565b60006020825161306091906141fb565b156130ad5760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e6774680000000000000000000000006044820152606401610598565b6000602083516130bd9190613cf3565b90506130ca8160026143ea565b85106131185760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f2062696700000000000000000000006044820152606401610598565b60008660205b855181116131b8578581015192506131376002896141fb565b61316c576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150613199565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6131a4600289613cf3565b97506131b1602082613d07565b905061311e565b509094149695505050505050565b604080518082019091526000808252602082015281511580156131eb57506020820151155b15613209575050604080518082019091526000808252602082015290565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015161324e91906141fb565b613278907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613d3e565b905292915050565b919050565b6040805180820182528581526020808201859052825180840190935285835282018390526000916132b4613676565b60005b60028110156134795760006132cd826006613d1f565b90508482600281106132e1576132e1613d55565b602002015151836132f3836000613d07565b600c811061330357613303613d55565b602002015284826002811061331a5761331a613d55565b602002015160200151838260016133319190613d07565b600c811061334157613341613d55565b602002015283826002811061335857613358613d55565b602002015151518361336b836002613d07565b600c811061337b5761337b613d55565b602002015283826002811061339257613392613d55565b60200201515160016020020151836133ab836003613d07565b600c81106133bb576133bb613d55565b60200201528382600281106133d2576133d2613d55565b6020020151602001516000600281106133ed576133ed613d55565b6020020151836133fe836004613d07565b600c811061340e5761340e613d55565b602002015283826002811061342557613425613d55565b60200201516020015160016002811061344057613440613d55565b602002015183613451836005613d07565b600c811061346157613461613d55565b6020020152508061347181613e3b565b9150506132b7565b50613482613695565b60006020826101808560086107d05a03fa9050806134e25760405162461bcd60e51b815260206004820152601460248201527f626e3235342d70616972696e672d6661696c65640000000000000000000000006044820152606401610598565b5051151598975050505050505050565b600060015b82816001901b1015613515578061350d81613e3b565b9150506134f7565b6001901b92915050565b6000806135318463ffffffff1661355e565b61353c9060206142e1565b90508063ffffffff1661354e846135ce565b63ffffffff16901c949350505050565b60008082116135af5760405162461bcd60e51b815260206004820152601360248201527f4c6f67206d75737420626520646566696e6564000000000000000000000000006044820152606401610598565b60005b600183821c1461256457806135c681613e3b565b9150506135b2565b600080805b6020811015613615576001811b84811663ffffffff1615613602576135f982601f613d3e565b6001901b831792505b508061360d81613e3b565b9150506135d3565b5092915050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461328057600080fd5b6000602082840312156136e957600080fd5b611d5e826136b3565b6000806000806060858703121561370857600080fd5b843567ffffffffffffffff8082111561372057600080fd5b818701915087601f83011261373457600080fd5b81358181111561374357600080fd5b8860208260051b850101111561375857600080fd5b6020928301999098509187013596604001359550909350505050565b60005b8381101561378f578181015183820152602001613777565b8381111561379e576000848401525b50505050565b60208152600082518060208401526137c3816040850160208701613774565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261380757600080fd5b50813567ffffffffffffffff81111561381f57600080fd5b60208301915083602082850101111561383757600080fd5b9250929050565b803560ff8116811461328057600080fd5b63ffffffff81168114611d2d57600080fd5b80356132808161384f565b600080600080600080600060c0888a03121561388757600080fd5b873567ffffffffffffffff81111561389e57600080fd5b6138aa8a828b016137f5565b90985096506138bd90506020890161383e565b945060408801356138cd8161384f565b9350606088013592506080880135915060a08801356138eb8161384f565b8091505092959891949750929550565b60006020828403121561390d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061397a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060608201905063ffffffff8084511683528060208501511660208401525060408301516136156040840182613943565b63ffffffff848116825283166020820152606081016108246040830184613943565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715613a2457613a246139d2565b60405290565b60405160e0810167ffffffffffffffff81118282101715613a2457613a246139d2565b6040805190810167ffffffffffffffff81118282101715613a2457613a246139d2565b6000818303610140811215613a8457600080fd5b613a8c613a01565b915060e0811215613a9c57600080fd5b50613aa5613a2a565b823581526020830135613ab78161384f565b60208201526040830135613aca8161384f565b60408201526060830135613add8161384f565b606082015260808301356bffffffffffffffffffffffff81168114613b0157600080fd5b6080820152613b1260a084016136b3565b60a082015260c083810135908201528152613b2f60e0830161383e565b60208201526101008201356040820152613b4c6101208301613861565b606082015292915050565b6000806000806101a08587031215613b6e57600080fd5b8435935060208501359250613b868660408701613a70565b915061018085013567ffffffffffffffff811115613ba357600080fd5b85016101008188031215613bb657600080fd5b939692955090935050565b600060208284031215613bd357600080fd5b8135611d5e8161384f565b60008060008060006101a08688031215613bf757600080fd5b853567ffffffffffffffff811115613c0e57600080fd5b613c1a888289016137f5565b9096509450613c2e90508760208801613a70565b949793965093946101608101359450610180013592915050565b600080600080600060a08688031215613c6057600080fd5b613c69866136b3565b9450613c77602087016136b3565b94979496505050506040830135926060810135926080909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082613d0257613d02613c95565b500490565b60008219821115613d1a57613d1a613cc4565b500190565b6000816000190483118215151615613d3957613d39613cc4565b500290565b600082821015613d5057613d50613cc4565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613db957600080fd5b83018035915067ffffffffffffffff821115613dd457600080fd5b60200191503681900382131561383757600080fd5b60008085851115613df957600080fd5b83861115613e0657600080fd5b5050820193919092039150565b60008451613e25818460208901613774565b8201838582376000930192835250909392505050565b6000600019821415613e4f57613e4f613cc4565b5060010190565b600060208284031215613e6857600080fd5b8151611d5e8161384f565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff88811682528716602082015260ff8616604082015263ffffffff85811660608301528416608082015260c060a08201819052600090613f139083018486613e73565b9998505050505050505050565b600060208284031215613f3257600080fd5b5051919050565b8183823760009101908152919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613f7e57600080fd5b83018035915067ffffffffffffffff821115613f9957600080fd5b6020019150600581901b360382131561383757600080fd5b6000610160808352613fc68184018688613e73565b915050825180516020840152602081015163ffffffff808216604086015280604084015116606086015280606084015116608086015250506bffffffffffffffffffffffff60808201511660a084015273ffffffffffffffffffffffffffffffffffffffff60a08201511660c084015260c081015160e084015250602083015161405661010084018260ff169052565b50604083015161012083015260609092015163ffffffff166101409091015292915050565b600063ffffffff80831681851680830382111561409a5761409a613cc4565b01949350505050565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee18336030181126140d757600080fd5b9190910192915050565b600082601f8301126140f257600080fd5b6140fa613a4d565b80604084018581111561410c57600080fd5b845b8181101561412657803584526020938401930161410e565b509095945050505050565b60006080828403121561414357600080fd5b6040516040810181811067ffffffffffffffff82111715614166576141666139d2565b60405261417384846140e1565b815261418284604085016140e1565b60208201529392505050565b600065ffffffffffff808316818516818304811182151516156141b3576141b3613cc4565b02949350505050565b60008151602080840160005b838110156141e4578151875295820195908201906001016141c8565b509495945050505050565b6000611d5e82846141bc565b60008261420a5761420a613c95565b500690565b600061421b82856141bc565b9283525050602001919050565b60006040828403121561423a57600080fd5b614242613a4d565b82358152602083013560208201528091505092915050565b8035602083101561256457600019602084900360031b1b1692915050565b600063ffffffff8084168061428f5761428f613c95565b92169190910692915050565b600063ffffffff808416806142b2576142b2613c95565b92169190910492915050565b600063ffffffff808316818516818304811182151516156141b3576141b3613cc4565b600063ffffffff838116908316818110156142fe576142fe613cc4565b039392505050565b600181815b8085111561434157816000190482111561432757614327613cc4565b8085161561433457918102915b93841c939080029061430b565b509250929050565b60008261435857506001612564565b8161436557506000612564565b816001811461437b5760028114614385576143a1565b6001915050612564565b60ff84111561439657614396613cc4565b50506001821b612564565b5060208310610133831016604e8410600b84101617156143c4575081810a612564565b6143ce8383614306565b80600019048211156143e2576143e2613cc4565b029392505050565b6000611d5e838361434956fe2d5f2860204f2060295f2d202d5f2860206f2060295f2d202d5f286020512060295f2d2042495444414f204a5553542052454b5420594f55207c5f2860204f2060295f7c202d207c5f2860206f2060295f7c202d207c5f286020512060295f7ca26469706673582212203aea25d43fc2b3a19c7e56cdb3c91148689e7c3a79eda990af593aa1d67f275964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063c8fff01b116100a2578063d7fbc2e211610071578063d7fbc2e2146104c0578063f2495029146104d3578063f2a8f124146104f3578063f2fde38b146104fc57600080fd5b8063c8fff01b1461041a578063c96c0d381461042d578063cb4909c81461049a578063d13f90b4146104ad57600080fd5b806392f30a45116100de57806392f30a45146103a25780639495de40146103de578063990fca66146103f1578063b537c4c7146103fa57600080fd5b8063715018a6146103615780637bd85879146103695780638bea6cae1461037c5780638da5cb5b1461038457600080fd5b8063301b39ab1161018757806359cb63911161015657806359cb6391146102b75780635c1bba381461030a5780635d42ffb71461034f5780635e8b3f2d1461035857600080fd5b8063301b39ab1461028157806332c58f7a146102935780633c762984146102a657806346b2eb9b146102af57600080fd5b80631f944c8f116101c35780631f944c8f14610212578063228a1b5b1461023b5780632e64b4c01461024e5780632e72866b1461026157600080fd5b806302d777de146101ea578063060ee9a4146101ff5780630a33202e146101ff575b600080fd5b6101fd6101f83660046136d7565b61050f565b005b6101fd61020d3660046136d7565b6105e8565b6102256102203660046136f2565b6106c1565b60405161023291906137a4565b60405180910390f35b6101fd61024936600461386c565b61082c565b6101fd61025c3660046138fb565b610b06565b61027461026f3660046138fb565b610b98565b604051610232919061397e565b609a545b604051908152602001610232565b6101fd6102a13660046136d7565b610c30565b610285609d5481565b610225610d0c565b6102fb6102c53660046138fb565b609e6020526000908152604090205463ffffffff8082169164010000000081049091169068010000000000000000900460ff1683565b604051610232939291906139b0565b60975461032a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610232565b610285609b5481565b61028560995481565b6101fd610d28565b6101fd610377366004613b57565b610d3c565b609b54610285565b60335473ffffffffffffffffffffffffffffffffffffffff1661032a565b6103c96103b0366004613bc1565b609f602052600090815260409020805460019091015482565b60408051928352602083019190915201610232565b6101fd6103ec3660046138fb565b611498565b610285609a5481565b610285610408366004613bc1565b60a06020526000908152604090205481565b6101fd6104283660046136d7565b61152a565b61047f61043b366004613bc1565b60408051808201909152600080825260208201525063ffffffff166000908152609f6020908152604091829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610232565b6101fd6104a8366004613bde565b6115fe565b6101fd6104bb366004613c48565b611a1b565b6101fd6104ce3660046138fb565b611c01565b60985461032a9073ffffffffffffffffffffffffffffffffffffffff1681565b610285609c5481565b6101fd61050a3660046136d7565b611c93565b60975473ffffffffffffffffffffffffffffffffffffffff1633146105a15760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79207468652073657175656e6365722063616e2075706461746520646c60448201527f736d20616464726573730000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60975473ffffffffffffffffffffffffffffffffffffffff1633146106755760405162461bcd60e51b815260206004820152603160248201527f4f6e6c79207468652073657175656e6365722063616e2072656d6f766520667260448201527f6175642070726f6f6620616464726573730000000000000000000000000000006064820152608401610598565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a16020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6060806000845b848351101561081e576000610743826106e2602082613cf3565b6106ed906001613d07565b6106f8906020613d1f565b6107029190613d3e565b855161070e9089613d3e565b848c8c8881811061072157610721613d55565b90506020028101906107339190613d84565b61073e929150613d3e565b611d30565b90508389898581811061075857610758613d55565b905060200281019061076a9190613d84565b84906107768583613d07565b9261078393929190613de9565b60405160200161079593929190613e13565b6040516020818303038152906040529350835186116107b4575061081e565b8888848181106107c6576107c6613d55565b90506020028101906107d89190613d84565b90506107e48284613d07565b141561080057826107f481613e3b565b93505060019150610818565b61080b816001613d07565b6108159083613d07565b91505b506106c8565b50909150505b949350505050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146108b95760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79207468652073657175656e6365722063616e2073746f72652064617460448201527f61000000000000000000000000000000000000000000000000000000000000006064820152608401610598565b6099546108cc63ffffffff861643613d3e565b106109195760405162461bcd60e51b815260206004820152601e60248201527f7374616b65732074616b656e2066726f6d20746f6f206c6f6e672061676f00006044820152606401610598565b609854604080517f72d18e8d000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916372d18e8d916004808301926020929190829003018186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190613e56565b9050609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf49ea733308989878e8e6040518863ffffffff1660e01b8152600401610a259796959493929190613ebc565b602060405180830381600087803b158015610a3f57600080fd5b505af1158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190613e56565b50604080518082018252858152602080820186815263ffffffff85166000818152609f845285812094518555915160019094019390935560a082528390206000199055609a869055825191825281018690529081018490527fa99ca06ac3461399088feac88ec48dc5a47d61c3b6839eab20146f2c4ee535849060600160405180910390a15050505050505050565b60975473ffffffffffffffffffffffffffffffffffffffff163314610b935760405162461bcd60e51b815260206004820152603160248201527f4f6e6c79207468652073657175656e6365722063616e20736574206c6174657360448201527f74206c3220626c6f636b206e756d6265720000000000000000000000000000006064820152608401610598565b609b55565b610bb960408051606081018252600080825260208201819052909182015290565b6000828152609e60209081526040918290208251606081018452815463ffffffff8082168352640100000000820416938201939093529290919083019068010000000000000000900460ff166002811115610c1657610c16613914565b6002811115610c2757610c27613914565b90525092915050565b60975473ffffffffffffffffffffffffffffffffffffffff163314610cbd5760405162461bcd60e51b815260206004820152603a60248201527f4f6e6c79207468652073657175656e6365722063616e2073657420667261756460448201527f2070726f6f66206164647265737320756e617661696c61626c650000000000006064820152608401610598565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a16020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6040518060800160405280606081526020016143f76060913981565b610d30611d65565b610d3a6000611dcc565b565b33600090815260a1602052604090205460ff161515600114610dc65760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c792066726175642070726f6f66207768697465206c6973742063616e2060448201527f6368616c6c656e676520646174610000000000000000000000000000000000006064820152608401610598565b6000848152609e602090815260408083208151606081018352815463ffffffff80821683526401000000008204169482019490945292909183019068010000000000000000900460ff166002811115610e2157610e21613914565b6002811115610e3257610e32613914565b9052509050600181604001516002811115610e4f57610e4f613914565b148015610e65575042816020015163ffffffff16115b610ed75760405162461bcd60e51b815260206004820152602d60248201527f526f6c6c757053746f7265206d75737420626520636f6d6d697474656420616e60448201527f6420756e636f6e6669726d6564000000000000000000000000000000000000006064820152608401610598565b8251610ee290611e43565b6098546020850151604080870151606088015191517fed82c0ee00000000000000000000000000000000000000000000000000000000815260ff9093166004840152602483015263ffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff9091169063ed82c0ee9060640160206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa69190613f20565b14610ff35760405162461bcd60e51b815260206004820152601e60248201527f6d6574616461746120707265696d61676520697320696e636f727265637400006044820152606401610598565b805183516040015163ffffffff90811691161461109e5760405162461bcd60e51b815260206004820152604260248201527f7365616368446174612773206461746173746f7265206964206973206e6f742060448201527f636f6e73697374656e74207769746820676976656e20726f6c6c75702073746f60648201527f7265000000000000000000000000000000000000000000000000000000000000608482015260a401610598565b6110a88280613d84565b6040516110b6929190613f39565b604051908190039020835151146111355760405162461bcd60e51b815260206004820152603260248201527f646973636c6f737572652070726f6f667320686561646572686173682070726560448201527f696d61676520697320696e636f727265637400000000000000000000000000006064820152608401610598565b6111756111428380613d84565b6111526040860160208701613bc1565b61115f6040870187613f49565b61116c6060890189613f49565b89608001611f63565b6111c15760405162461bcd60e51b815260206004820152601d60248201527f646973636c6f737572652070726f6f66732061726520696e76616c69640000006044820152606401610598565b60006111d56111d08480613d84565b61255b565b905063ffffffff81166111eb6040850185613f49565b90506111fd6040860160208701613bc1565b63ffffffff1661120d9190613d07565b11156112815760405162461bcd60e51b815260206004820152602e60248201527f43616e206f6e6c792070726f766520646174612066726f6d207468652073797360448201527f74656d61746963206368756e6b730000000000000000000000000000000000006064820152608401610598565b60006112b36112936040860186613f49565b886040518060800160405280606081526020016143f760609139516106c1565b90506040518060800160405280606081526020016143f7606091395181511461136a5760405162461bcd60e51b815260206004820152604260248201527f50617273696e67206572726f722c2070726f76656e20737472696e672069732060448201527f646966666572656e74206c656e677468207468616e206672617564207374726960648201527f6e67000000000000000000000000000000000000000000000000000000000000608482015260a401610598565b6040518060800160405280606081526020016143f760609139805190602001208180519060200120146113df5760405162461bcd60e51b815260206004820152601d60248201527f70726f76656e20737472696e6720213d20667261756420737472696e670000006044820152606401610598565b6000878152609e6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff1668020000000000000000179055875181015163ffffffff908116808552609f8452828520548a518401519092168552938290206001015482518c81529384019490945282820152606082019290925290517fca227c67a02028763083580d42e8bdef4bb49c393068d05983421cd7a4a2a5be9181900360800190a150505050505050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146115255760405162461bcd60e51b815260206004820152603160248201527f4f6e6c79207468652073657175656e6365722063616e20736574206c6174657360448201527f74206c3220626c6f636b206e756d6265720000000000000000000000000000006064820152608401610598565b609a55565b60975473ffffffffffffffffffffffffffffffffffffffff1633146115b75760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79207468652073657175656e6365722063616e2075706461746520736560448201527f7175656e636572206164647265737300000000000000000000000000000000006064820152608401610598565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60975473ffffffffffffffffffffffffffffffffffffffff16331461168b5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79207468652073657175656e6365722063616e2073746f72652064617460448201527f61000000000000000000000000000000000000000000000000000000000000006064820152608401610598565b825160409081015163ffffffff166000908152609f6020522054821480156116ce5750825160409081015163ffffffff166000908152609f602052206001015481145b6117665760405162461bcd60e51b815260206004820152605560248201527f446174612073746f72652065697468657220776173206e6f7420696e6974696160448201527f6c697a65642062792074686520726f6c6c757020636f6e74726163742c206f7260648201527f20697320616c726561647920636f6e6669726d65640000000000000000000000608482015260a401610598565b825160409081015163ffffffff16600090815260a060205220546000191461181c5760405162461bcd60e51b815260206004820152605560248201527f446174612073746f72652065697468657220776173206e6f7420696e6974696160448201527f6c697a65642062792074686520726f6c6c757020636f6e74726163742c206f7260648201527f20697320616c726561647920636f6e6669726d65640000000000000000000000608482015260a401610598565b6098546040517f5189951500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063518995159061187690889088908890600401613fb1565b600060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b50505050604051806060016040528084600001516040015163ffffffff168152602001609c54426118d59190613d07565b63ffffffff16815260200160019052609d546000908152609e6020908152604091829020835181549285015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169116179190911780825591830151909182907fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000083600281111561198457611984613914565b02179055505050609b819055609d8054845160409081015163ffffffff16600090815260a06020529081208290557fc7c0900be05d2a0ad0f77852eb975d9e862d1db0a2238617dd0f77854782f67292906119de83613e3b565b909155508451604090810151815163ffffffff93841681529216602083015281018490526060810183905260800160405180910390a15050505050565b600054610100900460ff1615808015611a3b5750600054600160ff909116105b80611a555750303b158015611a55575060005460ff166001145b611ac75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610598565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611b2557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611b2d61256a565b6097805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560988054928816929091169190911790556099849055609c839055609a829055609b8290558015611bf957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60975473ffffffffffffffffffffffffffffffffffffffff163314611c8e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652073657175656e6365722063616e2075706461746520667260448201527f6175642070726f6f6620706572696f64000000000000000000000000000000006064820152608401610598565b609c55565b611c9b611d65565b73ffffffffffffffffffffffffffffffffffffffff8116611d245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610598565b611d2d81611dcc565b50565b6000828410611d4c57818310611d465781611d5b565b82611d5b565b818410611d595781611d5b565b835b90505b9392505050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610d3a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080826000015183602001518460400151856060015186608001518760a001518860c00151604051602001611f26979695949392919096875260e095861b7fffffffff00000000000000000000000000000000000000000000000000000000908116602089015294861b851660248801529290941b909216602885015260a09190911b7fffffffffffffffffffffffff000000000000000000000000000000000000000016602c84015260609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166038830152604c820152606c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b6000808567ffffffffffffffff811115611f7f57611f7f6139d2565b604051908082528060200260200182016040528015611fa8578160200160208202803683370190505b50905060006120358b8b6040805160c08101825260006080820181815260a0830182905282526020820181905291810182905260608101919091525050604080518082018252823581526020838101358183015282516080810184529182528383013560e090811c918301919091526044840135811c92820192909252604890920135901c606082015290565b90508460005b818110156123145761210b83612051838e61407b565b8a8a8581811061206357612063613d55565b905060200281019061207591906140a3565b8b8b8681811061208757612087613d55565b905060200281019061209991906140a3565b6040018c8c878181106120ae576120ae613d55565b90506020028101906120c091906140a3565b6080018036038101906120d39190614131565b8d8d888181106120e5576120e5613d55565b90506020028101906120f791906140a3565b61210690610100810190613d84565b6125ef565b61217d5760405162461bcd60e51b815260206004820152602260248201527f52657665616c206661696c65642064756520746f206e6f6e203120706169726960448201527f6e670000000000000000000000000000000000000000000000000000000000006064820152608401610598565b89898281811061218f5761218f613d55565b90506020028101906121a19190613d84565b9050836020015160206121b4919061418e565b65ffffffffffff161461222f5760405162461bcd60e51b815260206004820152603860248201527f506f6c796e6f6d69616c206d757374206861766520612032353620626974206360448201527f6f656666696369656e7420666f722065616368207465726d00000000000000006064820152608401610598565b89898281811061224157612241613d55565b90506020028101906122539190613d84565b604051612261929190613f39565b604051809103902088888381811061227b5761227b613d55565b905060200281019061228d91906140a3565b358989848181106122a0576122a0613d55565b90506020028101906122b291906140a3565b6040516122d993929160209081013591019283526020830191909152604082015260600190565b6040516020818303038152906040528051906020012084828151811061230157612301613d55565b602090810291909101015260010161203b565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018460405160200161234991906141ef565b6040516020818303038152906040528051906020012060001c61236c91906141fb565b905061237661361c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018560006040516020016123ab92919061420f565b6040516020818303038152906040528051906020012060001c6123ce91906141fb565b80825260208201526000898982816123e8576123e8613d55565b90506020028101906123fa91906140a3565b61240a9036819003810190614228565b9050600061243c8d8d600081811061242457612424613d55565b90506020028101906124369190613d84565b866127f7565b905060015b8a811015612539576124938361248e8e8e8581811061246257612462613d55565b905060200281019061247491906140a3565b6124849036819003810190614228565b602088015161289d565b612933565b925060006124c48f8f848181106124ac576124ac613d55565b90506020028101906124be9190613d84565b886127f7565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180828760016020020151098408602086015186519194507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000191096020860152508061253181613e3b565b915050612441565b50612546828a86846129cf565b97505050505050505098975050505050505050565b604482013560e01c5b92915050565b600054610100900460ff166125e75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610598565b610d3a612b5e565b8251602080820151915181860151808301519051604080519485019590955293830191909152606082015260808101919091526000906126ac9060a00160405160208183030381529060405280519060200120612655898b604001518c60600151612be4565b63ffffffff166126708b6020015165ffffffffffff16612d50565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061305092505050565b6126f85760405162461bcd60e51b815260206004820181905260248201527f496e636f7272656374207a65726f20706f6c79206d65726b6c652070726f6f666044820152606401610598565b87516000906127189061248e612713368b90038b018b614228565b6131c6565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6020838101919091528101919091529091506127e96127e136899003890189614228565b878484613285565b9a9950505050505050505050565b600080836001825b82811015612891576000888289612817826020613d07565b9261282493929190613de9565b61282d9161425a565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180848309860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018784099250612889602083613d07565b9150506127ff565b50919695505050505050565b60408051808201909152600080825260208201526128b961363a565b83518152602080850151908201526040808201849052600090836060846007600019fa90508061292b5760405162461bcd60e51b815260206004820152601060248201527f626e3235342d6d756c2d6661696c6564000000000000000000000000000000006044820152606401610598565b505092915050565b604080518082019091526000808252602082015261294f613658565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508061292b5760405162461bcd60e51b815260206004820152601060248201527f626e3235342d6164642d6661696c6564000000000000000000000000000000006044820152606401610598565b604080518082019091526001815260026020820152600090816129fa6129f4836131c6565b8661289d565b604080518082019091527f220ac48bb1f91fd93f502a3d0caa077ac70e0af8819b9d8fa26a168a2c558a5781527f08f54b82af08ceaf7cd5f180bac94870f6d8100a9c9afa9dd09a4491653891126020820152909150612a5a8183612933565b91506000612a70612a6a856131c6565b8761289d565b90506000612a7e8a83612933565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d602083810191909152810191909152909150612b4f85612b48368d90038d018d614131565b8484613285565b9b9a5050505050505050505050565b600054610100900460ff16612bdb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610598565b610d3a33611dcc565b600080612bf1838561407b565b90506000612c048563ffffffff166134f2565b90506000612c128684614278565b63ffffffff1615612c24576001612c27565b60005b60ff16612c34878561429b565b612c3e919061407b565b90506000612c5a612c4f83856142be565b63ffffffff166134f2565b90508663ffffffff168863ffffffff161015612c9c5780612c7b828a61351f565b612c87906101006142be565b612c91919061429b565b945050505050611d5e565b612ca687846142e1565b612cb090826142e1565b63ffffffff168863ffffffff161015612ce25780612c7b8185612cd38b8d6142e1565b612cdd919061407b565b61351f565b60405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420637265617465206e756d626572206f66206672616d6520686960448201527f67686572207468616e20706f737369626c6500000000000000000000000000006064820152608401610598565b600080612d5c8361355e565b905080612d8b57507fe82cea94884b1b895ea0742840a3b19249a723810fd1b04d8564d675b0a416f192915050565b8060011415612dbc57507f4843774a80fc8385b31024f5bd18b42e62de439206ab9468d42d826796d41f6792915050565b8060021415612ded57507f092d3e5f87f5293e7ab0cc2ca6b0b5e4adb5e0011656544915f7cea34e69e5ab92915050565b8060031415612e1e57507f494b208540ec8624fbbb3f2c64ffccdaf6253f8f4e50c0d93922d88195b0775592915050565b8060041415612e4f57507ffdb44b84a82893cfa0e37a97f09ffc4298ad5e62be1bea1d03320ae836213d2292915050565b8060051415612e8057507f3f50cb08231d2a76853ba9dbb20dad45a1b75c57cdaff6223bfe069752cff3d492915050565b8060061415612eb157507fbb39eebd8138eefd5802a49d571e65b3e0d4e32277c28fbf5fbca66e7fb0431092915050565b8060071415612ee257507ff0a39b513e11fa80cbecbf352f69310eddd5cd03148768e0e9542bd600b133ec92915050565b8060081415612f1357507f038cca2238865414efb752cc004fffec9e6069b709f495249cdf36efbd5952f692915050565b8060091415612f4457507f2a26b054ed559dd255d8ac9060ebf6b95b768d87de767f8174ad2f9a4e48dd0192915050565b80600a1415612f7557507f1fe180d0bc4ff7c69fefa595b3b5f3c284535a280f6fdcf69b20770d1e20e1fc92915050565b80600b1415612fa657507f60e34ad57c61cd6fdd8177437c30e4a30334e63d7683989570cf27020efc820192915050565b80600c1415612fd757507feda2417e770ddbe88f083acf06b6794dfb76301314a32bd0697440d76f6cd9cc92915050565b80600d141561300857507f8cbe9b8cf92ce70e3bec8e1e72a0f85569017a7e43c3db50e4a5badb8dea7ce892915050565b60405162461bcd60e51b815260206004820152601660248201527f4c6f67206e6f7420696e2076616c69642072616e6765000000000000000000006044820152606401610598565b60006020825161306091906141fb565b156130ad5760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e6774680000000000000000000000006044820152606401610598565b6000602083516130bd9190613cf3565b90506130ca8160026143ea565b85106131185760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f2062696700000000000000000000006044820152606401610598565b60008660205b855181116131b8578581015192506131376002896141fb565b61316c576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150613199565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6131a4600289613cf3565b97506131b1602082613d07565b905061311e565b509094149695505050505050565b604080518082019091526000808252602082015281511580156131eb57506020820151155b15613209575050604080518082019091526000808252602082015290565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015161324e91906141fb565b613278907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613d3e565b905292915050565b919050565b6040805180820182528581526020808201859052825180840190935285835282018390526000916132b4613676565b60005b60028110156134795760006132cd826006613d1f565b90508482600281106132e1576132e1613d55565b602002015151836132f3836000613d07565b600c811061330357613303613d55565b602002015284826002811061331a5761331a613d55565b602002015160200151838260016133319190613d07565b600c811061334157613341613d55565b602002015283826002811061335857613358613d55565b602002015151518361336b836002613d07565b600c811061337b5761337b613d55565b602002015283826002811061339257613392613d55565b60200201515160016020020151836133ab836003613d07565b600c81106133bb576133bb613d55565b60200201528382600281106133d2576133d2613d55565b6020020151602001516000600281106133ed576133ed613d55565b6020020151836133fe836004613d07565b600c811061340e5761340e613d55565b602002015283826002811061342557613425613d55565b60200201516020015160016002811061344057613440613d55565b602002015183613451836005613d07565b600c811061346157613461613d55565b6020020152508061347181613e3b565b9150506132b7565b50613482613695565b60006020826101808560086107d05a03fa9050806134e25760405162461bcd60e51b815260206004820152601460248201527f626e3235342d70616972696e672d6661696c65640000000000000000000000006044820152606401610598565b5051151598975050505050505050565b600060015b82816001901b1015613515578061350d81613e3b565b9150506134f7565b6001901b92915050565b6000806135318463ffffffff1661355e565b61353c9060206142e1565b90508063ffffffff1661354e846135ce565b63ffffffff16901c949350505050565b60008082116135af5760405162461bcd60e51b815260206004820152601360248201527f4c6f67206d75737420626520646566696e6564000000000000000000000000006044820152606401610598565b60005b600183821c1461256457806135c681613e3b565b9150506135b2565b600080805b6020811015613615576001811b84811663ffffffff1615613602576135f982601f613d3e565b6001901b831792505b508061360d81613e3b565b9150506135d3565b5092915050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461328057600080fd5b6000602082840312156136e957600080fd5b611d5e826136b3565b6000806000806060858703121561370857600080fd5b843567ffffffffffffffff8082111561372057600080fd5b818701915087601f83011261373457600080fd5b81358181111561374357600080fd5b8860208260051b850101111561375857600080fd5b6020928301999098509187013596604001359550909350505050565b60005b8381101561378f578181015183820152602001613777565b8381111561379e576000848401525b50505050565b60208152600082518060208401526137c3816040850160208701613774565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261380757600080fd5b50813567ffffffffffffffff81111561381f57600080fd5b60208301915083602082850101111561383757600080fd5b9250929050565b803560ff8116811461328057600080fd5b63ffffffff81168114611d2d57600080fd5b80356132808161384f565b600080600080600080600060c0888a03121561388757600080fd5b873567ffffffffffffffff81111561389e57600080fd5b6138aa8a828b016137f5565b90985096506138bd90506020890161383e565b945060408801356138cd8161384f565b9350606088013592506080880135915060a08801356138eb8161384f565b8091505092959891949750929550565b60006020828403121561390d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061397a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060608201905063ffffffff8084511683528060208501511660208401525060408301516136156040840182613943565b63ffffffff848116825283166020820152606081016108246040830184613943565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715613a2457613a246139d2565b60405290565b60405160e0810167ffffffffffffffff81118282101715613a2457613a246139d2565b6040805190810167ffffffffffffffff81118282101715613a2457613a246139d2565b6000818303610140811215613a8457600080fd5b613a8c613a01565b915060e0811215613a9c57600080fd5b50613aa5613a2a565b823581526020830135613ab78161384f565b60208201526040830135613aca8161384f565b60408201526060830135613add8161384f565b606082015260808301356bffffffffffffffffffffffff81168114613b0157600080fd5b6080820152613b1260a084016136b3565b60a082015260c083810135908201528152613b2f60e0830161383e565b60208201526101008201356040820152613b4c6101208301613861565b606082015292915050565b6000806000806101a08587031215613b6e57600080fd5b8435935060208501359250613b868660408701613a70565b915061018085013567ffffffffffffffff811115613ba357600080fd5b85016101008188031215613bb657600080fd5b939692955090935050565b600060208284031215613bd357600080fd5b8135611d5e8161384f565b60008060008060006101a08688031215613bf757600080fd5b853567ffffffffffffffff811115613c0e57600080fd5b613c1a888289016137f5565b9096509450613c2e90508760208801613a70565b949793965093946101608101359450610180013592915050565b600080600080600060a08688031215613c6057600080fd5b613c69866136b3565b9450613c77602087016136b3565b94979496505050506040830135926060810135926080909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082613d0257613d02613c95565b500490565b60008219821115613d1a57613d1a613cc4565b500190565b6000816000190483118215151615613d3957613d39613cc4565b500290565b600082821015613d5057613d50613cc4565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613db957600080fd5b83018035915067ffffffffffffffff821115613dd457600080fd5b60200191503681900382131561383757600080fd5b60008085851115613df957600080fd5b83861115613e0657600080fd5b5050820193919092039150565b60008451613e25818460208901613774565b8201838582376000930192835250909392505050565b6000600019821415613e4f57613e4f613cc4565b5060010190565b600060208284031215613e6857600080fd5b8151611d5e8161384f565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff88811682528716602082015260ff8616604082015263ffffffff85811660608301528416608082015260c060a08201819052600090613f139083018486613e73565b9998505050505050505050565b600060208284031215613f3257600080fd5b5051919050565b8183823760009101908152919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613f7e57600080fd5b83018035915067ffffffffffffffff821115613f9957600080fd5b6020019150600581901b360382131561383757600080fd5b6000610160808352613fc68184018688613e73565b915050825180516020840152602081015163ffffffff808216604086015280604084015116606086015280606084015116608086015250506bffffffffffffffffffffffff60808201511660a084015273ffffffffffffffffffffffffffffffffffffffff60a08201511660c084015260c081015160e084015250602083015161405661010084018260ff169052565b50604083015161012083015260609092015163ffffffff166101409091015292915050565b600063ffffffff80831681851680830382111561409a5761409a613cc4565b01949350505050565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee18336030181126140d757600080fd5b9190910192915050565b600082601f8301126140f257600080fd5b6140fa613a4d565b80604084018581111561410c57600080fd5b845b8181101561412657803584526020938401930161410e565b509095945050505050565b60006080828403121561414357600080fd5b6040516040810181811067ffffffffffffffff82111715614166576141666139d2565b60405261417384846140e1565b815261418284604085016140e1565b60208201529392505050565b600065ffffffffffff808316818516818304811182151516156141b3576141b3613cc4565b02949350505050565b60008151602080840160005b838110156141e4578151875295820195908201906001016141c8565b509495945050505050565b6000611d5e82846141bc565b60008261420a5761420a613c95565b500690565b600061421b82856141bc565b9283525050602001919050565b60006040828403121561423a57600080fd5b614242613a4d565b82358152602083013560208201528091505092915050565b8035602083101561256457600019602084900360031b1b1692915050565b600063ffffffff8084168061428f5761428f613c95565b92169190910692915050565b600063ffffffff808416806142b2576142b2613c95565b92169190910492915050565b600063ffffffff808316818516818304811182151516156141b3576141b3613cc4565b600063ffffffff838116908316818110156142fe576142fe613cc4565b039392505050565b600181815b8085111561434157816000190482111561432757614327613cc4565b8085161561433457918102915b93841c939080029061430b565b509250929050565b60008261435857506001612564565b8161436557506000612564565b816001811461437b5760028114614385576143a1565b6001915050612564565b60ff84111561439657614396613cc4565b50506001821b612564565b5060208310610133831016604e8410600b84101617156143c4575081810a612564565b6143ce8383614306565b80600019048211156143e2576143e2613cc4565b029392505050565b6000611d5e838361434956fe2d5f2860204f2060295f2d202d5f2860206f2060295f2d202d5f286020512060295f2d2042495444414f204a5553542052454b5420594f55207c5f2860204f2060295f7c202d207c5f2860206f2060295f7c202d207c5f286020512060295f7ca26469706673582212203aea25d43fc2b3a19c7e56cdb3c91148689e7c3a79eda990af593aa1d67f275964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirmData(bytes,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),uint256,uint256)": {
        "details": "Only dataStores created through this contract can be confirmed by calling this function.",
        "params": {
          "data": "Input of the header information for a dataStore and signatures for confirming the dataStore -- used as input to the `confirmDataStore` function of the DataLayrServiceManager -- see the DataLayr docs for more info on this.",
          "searchData": "Data used to specify the dataStore being confirmed. Must be provided so other contracts can properly look up the dataStore."
        }
      },
      "getL2ConfirmedBlockNumber()": {
        "returns": {
          "_0": "Latest stored L2 block number."
        }
      },
      "getL2RollUpBlockByDataStoreId(uint32)": {
        "returns": {
          "_0": "BatchRollupBlock."
        }
      },
      "getL2StoredBlockNumber()": {
        "returns": {
          "_0": "Latest stored L2 block number."
        }
      },
      "getRollupStoreByRollupBatchIndex(uint256)": {
        "returns": {
          "_0": "RollupStore."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proveFraud(uint256,uint256,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),(bytes,uint32,bytes[],((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2]),bytes)[],(uint256[2],uint256[2])))": {
        "details": "This function is only callable if: -the sequencer is staked, -the dataStore in question has been confirmed, and -the fraudproof period for the dataStore has not yet passed.",
        "params": {
          "disclosureProofs": "Non-interactive polynomial proofs that prove that the specific data of interest was part of the dataStore in question.",
          "fraudulentStoreNumber": "The rollup l2Block to prove fraud on",
          "searchData": "Data used to specify the dataStore being fraud-proven. Must be provided so other contracts can properly look up the dataStore.",
          "startIndex": "The index to begin reading the proven data from"
        }
      },
      "removeFraudProofAddress(address)": {
        "params": {
          "_address": "for fraud proof"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFraudProofAddress(address)": {
        "params": {
          "_address": "for fraud proof"
        }
      },
      "storeData(bytes,uint8,uint32,uint256,uint256,uint32)": {
        "details": "The specified `blockNumber `must be less than `BLOCK_STALE_MEASURE` blocks in the past.",
        "params": {
          "blockNumber": "is the previous block number which was used to encode the data for storage",
          "duration": "is the duration to store the datastore for",
          "header": "of data to be stored",
          "totalOperatorsIndex": "is index in the totalOperators array of DataLayr referring to what the total number of operators was at `blockNumber`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unavailableFraudProofAddress(address)": {
        "params": {
          "_address": "for fraud proof"
        }
      },
      "updateDataLayrManagerAddress(address)": {
        "params": {
          "_dataManageAddress": "dlsm address"
        }
      },
      "updateFraudProofPeriod(uint256)": {
        "params": {
          "_fraudProofPeriod": "fraud proof period"
        }
      },
      "updateL2ConfirmedBlockNumber(uint256)": {
        "params": {
          "_l2ConfirmedBlockNumber": "l2 latest block number"
        }
      },
      "updateL2StoredBlockNumber(uint256)": {
        "params": {
          "_l2StoredBlockNumber": "l2 latest block number"
        }
      },
      "updateSequencerAddress(address)": {
        "params": {
          "_sequencer": "update sequencer address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "confirmData(bytes,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),uint256,uint256)": {
        "notice": "After the `storeData `transaction is included in a block and doesn’t revert, the sequencer will disperse the data to the DataLayr nodes off chain and get their signatures that they have stored the data. Now, the sequencer has to post the signature on chain and get it verified."
      },
      "getL2ConfirmedBlockNumber()": {
        "notice": "Returns the block number of the latest stored L2."
      },
      "getL2RollUpBlockByDataStoreId(uint32)": {
        "notice": "Returns the l2 block number by store id"
      },
      "getL2StoredBlockNumber()": {
        "notice": "Returns the block number of the latest stored L2."
      },
      "getRollupStoreByRollupBatchIndex(uint256)": {
        "notice": "Returns the rollup store by l2 block number"
      },
      "proveFraud(uint256,uint256,((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),(bytes,uint32,bytes[],((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2]),bytes)[],(uint256[2],uint256[2])))": {
        "notice": "Called by a challenger (this could be anyone -- \"challenger\" is not a permissioned role) to prove that fraud has occurred. First, a subset of data included in a dataStore that was initiated by the sequencer is proven, and then the presence of fraud in the data is checked. For the sake of this example, \"fraud occurring\" means that the sequencer included the forbidden `FRAUD_STRING` in a dataStore that they initiated. In pratical use, \"fraud occurring\" might mean including data that specifies an invalid transaction or invalid state transition."
      },
      "removeFraudProofAddress(address)": {
        "notice": "remove fraud proof address"
      },
      "setFraudProofAddress(address)": {
        "notice": "set fraud proof address"
      },
      "storeData(bytes,uint8,uint32,uint256,uint256,uint32)": {
        "notice": "Called by the (staked) sequencer to pay for a datastore and post some metadata (in the `header` parameter) about it on chain. Since the sequencer must encode the data before they post the header on chain, they must use a *snapshot* of the number and stakes of DataLayr operators from a previous block number, specified by the `blockNumber` input."
      },
      "unavailableFraudProofAddress(address)": {
        "notice": "unavailable fraud proof address"
      },
      "updateDataLayrManagerAddress(address)": {
        "notice": "update dlsm address"
      },
      "updateFraudProofPeriod(uint256)": {
        "notice": "update fraud proof period"
      },
      "updateL2ConfirmedBlockNumber(uint256)": {
        "notice": "update l2 latest confirm block number"
      },
      "updateL2StoredBlockNumber(uint256)": {
        "notice": "update l2 latest store block number"
      },
      "updateSequencerAddress(address)": {
        "notice": "update sequencer address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 467,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13534,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "sequencer",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 13536,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "dataManageAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 13538,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "BLOCK_STALE_MEASURE",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 13540,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "l2StoredBlockNumber",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 13542,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "l2ConfirmedBlockNumber",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 13544,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "fraudProofPeriod",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 13546,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "rollupBatchIndex",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 13574,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "rollupBatchIndexRollupStores",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_struct(RollupStore)13564_storage)"
      },
      {
        "astId": 13579,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "dataStoreIdToL2RollUpBlock",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint32,t_struct(BatchRollupBlock)13569_storage)"
      },
      {
        "astId": 13583,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "dataStoreIdToRollupStoreNumber",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 13587,
        "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
        "label": "fraudProofWhitelist",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(RollupStoreStatus)13517": {
        "encoding": "inplace",
        "label": "enum BVM_EigenDataLayrChain.RollupStoreStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(RollupStore)13564_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BVM_EigenDataLayrChain.RollupStore)",
        "numberOfBytes": "32",
        "value": "t_struct(RollupStore)13564_storage"
      },
      "t_mapping(t_uint32,t_struct(BatchRollupBlock)13569_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct BVM_EigenDataLayrChain.BatchRollupBlock)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchRollupBlock)13569_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BatchRollupBlock)13569_storage": {
        "encoding": "inplace",
        "label": "struct BVM_EigenDataLayrChain.BatchRollupBlock",
        "members": [
          {
            "astId": 13566,
            "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
            "label": "startL2BlockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13568,
            "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
            "label": "endBL2BlockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RollupStore)13564_storage": {
        "encoding": "inplace",
        "label": "struct BVM_EigenDataLayrChain.RollupStore",
        "members": [
          {
            "astId": 13558,
            "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
            "label": "dataStoreId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 13560,
            "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
            "label": "confirmAt",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 13563,
            "contract": "contracts/da/BVM_EigenDataLayrChain.sol:BVM_EigenDataLayrChain",
            "label": "status",
            "offset": 8,
            "slot": "0",
            "type": "t_enum(RollupStoreStatus)13517"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}